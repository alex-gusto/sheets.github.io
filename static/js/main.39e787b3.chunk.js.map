{"version":3,"sources":["components/TreeGridComponent/config lazy /^/.*$/ groupOptions: {} namespace object","db/dataService.js","helpers/perfomance.js","views/Handsontable.js","helpers/flat-data.js","views/SpreadJS.js","views/ZingGrid.js","views/WijmoGrid.js","components/TreeGridComponent/utils/global-helpers.js","components/TreeGridComponent/TreeGridComponent.js","views/TimeTracker/static-layout.js","views/TimeTracker/create-head.js","views/TimeTracker/TimeTrackerGrid/utils/get-prev-event.js","helpers/pick-number.js","components/TreeGridComponent/validator/ChangesHolder.js","components/TreeGridComponent/validator/BaseValidator.js","views/TimeTracker/TimeTrackerGrid/TimeTrackerGrid.js","views/TimeTracker/create-left-columns.js","views/TimeTracker/create-columns.js","components/TreeGridComponent/utils/center-header.js","views/TimeTracker/create-foot.js","views/TimeTracker/create-solid.js","views/TimeTracker/create-rows-def.js","components/TreeGridComponent/utils/merge-layouts.js","views/TimeTracker/TimeTracker.js","helpers/deep-clone.js","App.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","this","data","Phases","Costs","fn","ts","performance","now","err","console","log","toFixed","SpreadSheetsCon","props","initTable","hot","Handsontable","tableRef","current","dataService","getPhases","nestedRows","colHeaders","rowHeaders","autoRowSize","stretchH","height","width","persistentState","nestedHeaders","label","colspan","columns","type","numericFormat","pattern","allowEmpty","correctFormat","contextMenu","bindRowsWithHeaders","manualRowMove","updateSettings","cells","row","col","prop","classes","readOnly","isTotal","instance","getDataAtRowProp","visualRow","push","start","overriddenStart","lockTimestamp","Date","className","join","createRef","state","time","setState","lis","document","querySelector","remove","style","color","ref","overflow","flex","fontSize","Component","createFlatter","globalIndex","flatData","newData","groups","forEach","__children","index","count","length","GC","window","columnToLetter","column","temp","letter","String","fromCharCode","SpreadJS","initSpread","spread","Spread","Sheets","Workbook","sheetCount","options","tabStripVisible","tabNavigationVisible","tabEditable","newTabVisible","sheet","getActiveSheet","spreadNS","suspendPaint","isProtected","autoGenerateColumns","setDataSource","setRowCount","SheetArea","colHeader","addSpan","setValue","bindColumn","name","displayName","formatter","size","setColumnCount","Style","backColor","cellPadding","totalRow","getRowCount","addRows","viewport","setStyle","columnsCount","getColumnCount","groupsIndex","i","getCell","borderLeft","LineBorder","LineStyle","thin","borderRight","borderTop","borderBottom","columnLetter","startRow","endRow","sumFormula","setFormula","CellRange","locked","rowOutlines","group","expand","direction","Outlines","OutlineDirection","backward","autoFitColumn","resumePaint","setTimeout","assignDataToNestedGrid","cellRef","recordRef","setData","JSON","stringify","ZingGridView","ZingGrid","tabelEl","header","editor","layout","loading","loadByScroll","addEventListener","getRowLevel","wjGrid","isGroupRow","level","CostTableView","gridRef","costs","getCosts","filter","initialWorkerGrid","grid","workerGrid","formatItem","addHandler","panel","rowData","rows","colData","test","binding","hasChildren","itemFormatter","r","c","cell","cellType","ColumnHeader","_ts","onCellEditEnding","updateGridStyles","cssClass","isReadOnly","onFilter","value","target","toLowerCase","onMenuItemClicked","selectedValue","cmd","addRow","rowIndex","selection","dataItem","days","populatedDays","refresh","removeRow","parentRow","rowLevel","getParentNode","parentRowData","childIndex","findIndex","child","splice","collapseAll","collapseGroupsToLevel","expandAll","maxGroupLevel","onDraggedRow","exportExcel","book","FlexGridXlsxConverter","save","includeColumnHeaders","includeRowHeaders","sheets","saveAsync","rowAdded","deletedRow","deletingRow","filterString","keysToSearch","collectResults","acc","cost","res","key","v","some","includes","costCopy","assign","children","reduce","search","replace","allowResizing","placeholder","marginBottom","onChange","itemsSource","selectionMode","childItemsPath","frozenColumns","allowSorting","allowDragging","allowAddNew","initialized","cellEditEnding","draggedRow","minWidth","dataMap","format","contextMenuOf","selectedValuePath","dropDownCssClass","itemClicked","isEmpty","isNotEmpty","isNumber","isNaN","TreeGrid","Grids","OnCustomAjax","G","IO","func","Url","default","catch","OnDataChanged","parse","GetChanges","defaultProps","onDataChanged","noop","nestedKey","body","Def","DefEmpty","DefParent","Validator","TreeGridComponent","$el","gridBody","prepareBody","dataManager","Worker","subscribeGridEvents","Changes","validChanges","errors","validate","hasErrors","Result","AcceptChanges","onDataManagerMessage","removeEventListener","postMessage","changes","Array","isArray","event","error","debug","initGrid","terminate","Dispose","Data","merge","Debug","Layout","Upload","Format","Flags","Type","Tag","Body","Helpers","helpers","arr","traverse","item","Items","Cfg","ShowDeleted","AutoSort","DateStrings","ReloadChanged","MainCol","NoVScroll","Sorting","AutoUpdate","StandardFilter","SaveExpanded","PersistentCfg","Filtered","RoundNumbers","RoundNumbersDigits","Size","Undo","RowIndex","SearchLap","FilterLap","Validate","Sync","SyncId","ExportType","Toolbar","Cells30Manipulate","R","Expanded","DefCols","C","CanFilter","Root","AcceptDef","CDef","Panel","Copy","Delete","Select","Move","getPrevEvent","_row","GetPrev","Name","pickNumber","args","find","n","ChangesHolder","_changes","message","change","getChange","messages","getMessages","getErrorKey","addError","values","entries","m","BaseValidator","invalidChanges","rules","GetRowById","rule","cb","forEachRule","call","getChanges","TimeTrackerGrid","createLayout","getEventStart","get","eventRow","OperationStartDate","getEventEnd","duration","getEventDuration","hours","isUndefined","getPlannedDepth","plannedDepth","getActualDepth","actualDepth","hasActual","getBehindHours","delta","actualHours","isAux","DerrickType","dynamicLayout","LeftCols","MinWidth","CaseSensitive","RelWidth","Cols","CanEmpty","Formula","Visible","CanHide","CanPrint","CanExport","CanEdit","OnChange","ClassFormula","Head","mainHeader","Pos","targetHours","dsvHours","nptHours","wowHours","_tftHours","_plannedDepth","_actualDepth","_start","_end","config","centerHeader","createHead","Foot","Class","Color","CanDelete","Calculated","dsvHoursFormula","actualHoursFormula","nptHoursFormula","wowHoursFormula","tftHoursFormula","targetHoursFormula","_plannedDepthFormula","_actualDepthFormula","_startFormula","_endFormula","Solid","Cells","OperationStartDateRecalc","Space","OperationStartDateLabel","OperationStartDateWidth","OperationStartDateFormat","OperationStartDateType","OperationStartDateOnChange","DerrickTypeType","DerrickTypeLabel","DerrickTypeOnChange","createSolid","commonGroupDef","nameCanEdit","codeCanEdit","Well","Phase","Event","CalcOrder","createRowsDef","mergeWith","FocusRect","SelectingCells","SelectingFocus","Actions","OnDragRow","OnDel","Lang","GroupSeparator","objValue","srcValue","concat","mergeLayouts","staticLayout","TimeTracker","Wells","handleOperationStartDateChange","handleDerrickTypeChange","localStorage","getItem","prepareState","obj","wells","defs","reCalc","addRowDefinitions","Recalc","WellsAux","Sample","path","exact","WijmoGrid","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.39e787b3.chunk.js","sourcesContent":["var map = {\n\t\"./Defaults\": [\n\t\t286,\n\t\t0\n\t],\n\t\"./Defaults.js\": [\n\t\t286,\n\t\t0\n\t],\n\t\"./Text\": [\n\t\t287,\n\t\t1\n\t],\n\t\"./Text.js\": [\n\t\t287,\n\t\t1\n\t],\n\t\"./default-layout\": [\n\t\t288,\n\t\t2\n\t],\n\t\"./default-layout.js\": [\n\t\t288,\n\t\t2\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 428;\nmodule.exports = webpackAsyncContext;","import data from './data.json';\r\n\r\nclass DataService {\r\n    constructor() {\r\n        this.data = data;\r\n    }\r\n\r\n    getPhases() {\r\n        return this.data.Phases\r\n    }\r\n\r\n    getCosts() {\r\n        return this.data.Costs\r\n    }\r\n}\r\n\r\nexport default new DataService()\r\n","export default function (fn) {\r\n    const ts = performance.now()\r\n    try {\r\n        fn()\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    const te = performance.now()\r\n\r\n    return (te - ts).toFixed(2)\r\n}\r\n","import React, { Component, createRef, Fragment } from 'react';\r\nimport dataService from '../db/dataService'\r\nimport Handsontable from 'handsontable'\r\nimport performance from '../helpers/perfomance'\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport './handsotable.css'\r\n\r\nclass SpreadSheetsCon extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.tableRef = createRef()\r\n        this.state = {\r\n            time: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const time = performance(this.initTable)\r\n        this.setState({ time })\r\n        const lis = document.querySelector('#hot-display-license-info')\r\n        if (lis) lis.remove()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const lis = document.querySelector('#hot-display-license-info')\r\n        if (lis) lis.remove()\r\n    }\r\n\r\n    initTable = () => {\r\n        this.hot = new Handsontable(this.tableRef.current, {\r\n            data: dataService.getPhases(),\r\n            nestedRows: true,\r\n            colHeaders: true,\r\n            rowHeaders: true,\r\n            autoRowSize: true,\r\n            stretchH: \"all\",\r\n            height: '500px',\r\n            width: '100%',\r\n            persistentState: true,\r\n            nestedHeaders: [\r\n                [\r\n                    {\r\n                        label: 'Identification',\r\n                        colspan: 2\r\n                    },\r\n                    {\r\n                        label: 'Duration [h]',\r\n                        colspan: 7\r\n                    },\r\n                    {\r\n                        label: 'End Depth [mMD]',\r\n                        colspan: 2\r\n                    },\r\n                    {\r\n                        label: 'Timing',\r\n                        colspan: 3\r\n                    },\r\n                    {\r\n                        label: 'Annotation',\r\n                        colspan: 2\r\n                    }\r\n                ],\r\n                [\r\n                    'Code',\r\n                    'Name',\r\n                    'AFE',\r\n                    'Target',\r\n                    'DSV',\r\n                    'Actual',\r\n                    'NPT',\r\n                    'WOW',\r\n                    'TFT',\r\n                    'Planned',\r\n                    'Actual',\r\n                    'Start',\r\n                    'End',\r\n                    'Days -ahead/+behind',\r\n                    'Contractor',\r\n                    'Comment'\r\n                ]\r\n            ],\r\n            columns: [\r\n                { data: 'code' },\r\n                { data: 'name' },\r\n                {\r\n                    data: 'afeHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'targetHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'dsvHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'actualHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'nptHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'wowHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'tftHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'plannedDepth',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'actualDepth',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'start',\r\n                    type: 'date',\r\n                    correctFormat: true,\r\n                    allowEmpty: true\r\n                },\r\n                {\r\n                    data: 'end',\r\n                    type: 'date',\r\n                    correctFormat: true,\r\n                    allowEmpty: true\r\n                },\r\n                {\r\n                    data: 'behindHours',\r\n                    type: 'numeric',\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'contractor',\r\n                    type: 'numeric',\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                { data: 'comments' }\r\n\r\n            ],\r\n            contextMenu: true,\r\n            bindRowsWithHeaders: 'strict',\r\n            manualRowMove: true\r\n        })\r\n\r\n        this.hot.updateSettings({\r\n            cells(row, col, prop) {\r\n                const cellProperties = this;\r\n                const classes = [];\r\n                let readOnly = false;\r\n\r\n                const isTotal = this.instance.getDataAtRowProp(this.visualRow, 'isTotal');\r\n                const isGroup = this.instance.getDataAtRowProp(this.visualRow, 'group');\r\n\r\n                if (isGroup) {\r\n                    readOnly = true;\r\n                    // add style for group rows\r\n                    classes.push('group-cell');\r\n                } else if (isTotal) {\r\n                    readOnly = true;\r\n                    // add style for total row\r\n                    classes.push('total-cell');\r\n                } else {\r\n                    classes.push('leaf-cell');\r\n                }\r\n\r\n                if (readOnly) {\r\n                    classes.push('locked-cell');\r\n                }\r\n\r\n                // Lock date styles\r\n                if (!isTotal) {\r\n                    const start = this.instance.getDataAtRowProp(this.visualRow, 'start');\r\n                    const overriddenStart = this.instance.getDataAtRowProp(this.visualRow, 'overriddenStart');\r\n                    const lockTimestamp = +new Date();\r\n\r\n                    if (+new Date(start) < lockTimestamp || +new Date(overriddenStart) < lockTimestamp) {\r\n                        // readOnly = true;\r\n                        classes.push('parked-cell');\r\n                    }\r\n                }\r\n\r\n                cellProperties.readOnly = readOnly;\r\n                cellProperties.className = classes.join(' ')\r\n                return cellProperties;\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h3>Handsontable render performance: <span style={{ color: 'tomato' }}>{this.state.time}ms</span></h3>\r\n\r\n                <div ref={this.tableRef}\r\n                     style={{ overflow: 'hidden', flex: '1 1 auto', fontSize: '11px' }}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SpreadSheetsCon\r\n","function createFlatter() {\r\n    let globalIndex = -1\r\n\r\n    return function flatData(data, newData = [], groups = []) {\r\n        data.forEach(row => {\r\n            newData.push(row)\r\n            globalIndex++\r\n\r\n            if (row.__children) {\r\n                groups.push({\r\n                    index: globalIndex,\r\n                    count: row.__children.length\r\n                })\r\n                flatData(row.__children, newData, groups)\r\n                delete row.__children\r\n            }\r\n        })\r\n\r\n        return { data: newData, groups }\r\n    }\r\n}\r\n\r\n\r\nexport default createFlatter\r\n","import React, { Component, createRef, Fragment } from 'react';\r\nimport dataService from '../db/dataService'\r\nimport performance from '../helpers/perfomance'\r\nimport createFlatter from '../helpers/flat-data'\r\nimport '@grapecity/spread-sheets/styles/gc.spread.sheets.excel2013white.css';\r\n\r\nconst GC = window.GC\r\n\r\nfunction columnToLetter(column) {\r\n    let temp, letter = '';\r\n    while (column > 0) {\r\n        temp = (column - 1) % 26;\r\n        letter = String.fromCharCode(temp + 65) + letter;\r\n        column = (column - temp - 1) / 26;\r\n    }\r\n    return letter;\r\n}\r\n\r\nexport default class SpreadJS extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.tableRef = createRef()\r\n        this.state = {\r\n            time: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            const time = performance(this.initSpread)\r\n            this.setState({ time })\r\n        })\r\n    }\r\n\r\n    initSpread = () => {\r\n        const spread = new GC.Spread.Sheets.Workbook(this.tableRef.current, { sheetCount: 1 });\r\n        spread.options.tabStripVisible = false\r\n        spread.options.tabNavigationVisible = false\r\n        spread.options.tabEditable = true\r\n        spread.options.newTabVisible = false\r\n        const sheet = spread.getActiveSheet()\r\n        const spreadNS = GC.Spread.Sheets;\r\n\r\n        sheet.suspendPaint()\r\n        const flatData = createFlatter()\r\n        const { data, groups } = flatData(dataService.getPhases())\r\n\r\n        sheet.options.isProtected = true\r\n        sheet.autoGenerateColumns = false\r\n        sheet.setDataSource(data)\r\n\r\n        sheet.setRowCount(2, spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 0, 1, 2, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 0, \"Identification\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 2, 1, 6, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 2, \"Duration\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 8, 1, 2, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 8, \"End Depth\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 10, 1, 3, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 10, \"Timing\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 13, 1, 2, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 13, \"Annotation\", spreadNS.SheetArea.colHeader);\r\n\r\n        // columns\r\n        sheet.bindColumn(0, { name: 'code', displayName: 'Code' })\r\n        sheet.bindColumn(1, { name: 'name', displayName: 'Name' })\r\n        sheet.bindColumn(2, { name: 'afeHours', displayName: 'AFE', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(3, { name: 'targetHours', displayName: 'Target', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(4, { name: 'dsvHours', displayName: 'DSV', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(5, { name: 'actualHours', displayName: 'Actual', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(6, { name: 'nptHours', displayName: 'NPT', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(7, { name: 'tftHours', displayName: 'TFT', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(8, { name: 'plannedDepth', displayName: 'Planned', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(9, { name: 'actualDepth', displayName: 'Actual', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(10, { name: 'start', displayName: 'Start', formatter: 'DD-MM-yyyy HH:mm' })\r\n        sheet.bindColumn(11, { name: 'end', displayName: 'End', formatter: 'DD-MM-yyyy HH:mm' })\r\n        sheet.bindColumn(12, { name: 'behindHours', displayName: 'Behind hours', formatter: '0.00', size: 100 })\r\n        sheet.bindColumn(13, { name: 'contractor', displayName: 'Contractor', size: 200 })\r\n        sheet.bindColumn(14, { name: 'comments', displayName: 'Comment', size: 200 })\r\n        sheet.setColumnCount(15)\r\n\r\n        const style = new spreadNS.Style()\r\n        style.backColor = '#f6f6f6'\r\n        style.cellPadding = '0 2'\r\n\r\n        // Total row\r\n        const totalRow = sheet.getRowCount()\r\n        sheet.addRows(sheet.getRowCount(spreadNS.SheetArea.viewport), 1)\r\n        sheet.setStyle(totalRow, 1, style, spreadNS.SheetArea.viewport)\r\n        sheet.setValue(totalRow, 1, 'Total')\r\n\r\n        const columnsCount = sheet.getColumnCount()\r\n        const groupsIndex = groups.map(({ index }) => index + 1)\r\n\r\n        function createTotal(letter) {\r\n            return `${letter}${groupsIndex.join(`,${letter}`)}`\r\n        }\r\n\r\n        groups.forEach(({ index, count }) => {\r\n            let i = columnsCount\r\n            while (i >= 0) {\r\n                sheet.setStyle(index, i, style, spreadNS.SheetArea.viewport)\r\n                const cell = sheet.getCell(index, i, spreadNS.SheetArea.viewport)\r\n                cell\r\n                    .borderLeft(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n                    .borderRight(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n                    .borderTop(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n                    .borderBottom(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n\r\n                if (i > 1 && i < 8) {\r\n                    const columnLetter = columnToLetter(i + 1)\r\n                    const startRow = index + 2\r\n                    const endRow = index + count + 1\r\n                    const sumFormula = `=SUM(${columnLetter}${startRow}:${columnLetter}${endRow})`\r\n                    sheet.setFormula(index, i, sumFormula)\r\n                    sheet.setFormula(totalRow, i, `=SUM(${createTotal(columnLetter)})`)\r\n                }\r\n                i--\r\n            }\r\n\r\n            // Prevent lock events\r\n            const row = new spreadNS.CellRange(sheet, index + 1, 0, count, columnsCount)\r\n            row.locked(false)\r\n\r\n            // group events to phases\r\n            sheet.rowOutlines.group(index + 1, count)\r\n            sheet.rowOutlines.expand(0, false)\r\n            sheet.rowOutlines.direction(spreadNS.Outlines.OutlineDirection.backward);\r\n        })\r\n\r\n\r\n        // auto fit\r\n        sheet.autoFitColumn(1)\r\n        sheet.autoFitColumn(10)\r\n        sheet.autoFitColumn(11)\r\n        sheet.resumePaint()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h3>SpreadJS render performance: <span style={{ color: 'tomato' }}>{this.state.time}ms</span></h3>\r\n                <div ref={this.tableRef} style={{ height: '100%', width: '100%' }}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment, createRef } from 'react';\r\nimport dataService from '../db/dataService'\r\nimport ZingGrid from 'zinggrid';\r\nimport './zing-grid.css'\r\nimport createFlatter from '../helpers/flat-data'\r\n\r\n\r\nwindow.assignDataToNestedGrid = (index, cellRef, recordRef) => {\r\n    if (cellRef) {\r\n        cellRef.querySelector('zing-grid').setData(JSON.stringify(index))\r\n    }\r\n}\r\nexport default class ZingGridView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.tabelEl = createRef()\r\n        this.state = {\r\n            time: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initTable()\r\n    }\r\n\r\n    initTable = () => {\r\n        const ts = window.performance.now()\r\n        const flatData = createFlatter()\r\n        const { data } = flatData(dataService.getPhases())\r\n        const grid = new ZingGrid(this.tabelEl.current, {\r\n            data,\r\n            columns: [\r\n                {\r\n                    index: 'code',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'name'\r\n                },\r\n                {\r\n                    index: 'afeHours',\r\n                    type: 'number',\r\n                    header: 'AFE',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'targetHours',\r\n                    type: 'number',\r\n                    header: 'Target',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'dsvHours',\r\n                    type: 'number',\r\n                    header: 'DSV',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'nptHours',\r\n                    type: 'number',\r\n                    header: 'NPT',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'wowHours',\r\n                    type: 'number',\r\n                    header: 'WOW',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'tftHours',\r\n                    type: 'number',\r\n                    header: 'TFT',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'plannedDepth',\r\n                    type: 'number',\r\n                    header: 'Planned',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'actualDepth',\r\n                    type: 'number',\r\n                    header: 'Actual',\r\n                    width: 80\r\n                }\r\n            ],\r\n            editor: true,\r\n            layout: 'row',\r\n            loading: true,\r\n            height: '600px',\r\n            loadByScroll: true\r\n        });\r\n\r\n        grid.addEventListener('grid:ready', (e) => {\r\n            const te = window.performance.now()\r\n            const time = (te - ts).toFixed(2)\r\n            this.setState({ time })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h3>Zing grid render performance: <span style={{ color: 'tomato' }}>{this.state.time}ms</span></h3>\r\n                <div ref={this.tabelEl}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, createRef } from 'react';\r\nimport './wijmo.css'\r\nimport '@grapecity/wijmo.styles/wijmo.css';\r\nimport { FlexGrid, FlexGridColumn } from \"@grapecity/wijmo.react.grid\";\r\n// import * as wjCore from '@grapecity/wijmo';\r\nimport { FlexGridXlsxConverter } from '@grapecity/wijmo.grid.xlsx';\r\nimport * as wjGrid from '@grapecity/wijmo.grid';\r\nimport { Menu, MenuItem, MenuSeparator } from '@grapecity/wijmo.react.input';\r\n\r\nimport dataService from '../db/dataService'\r\n\r\nfunction isGroupRow(row) {\r\n    return row instanceof wjGrid.GroupRow\r\n}\r\n\r\nfunction getRowLevel(row) {\r\n    return isGroupRow(row) ? row.level : -1\r\n}\r\n\r\nfunction getParentNode(row) {\r\n    let parentRow = null\r\n    const rowLevel = getRowLevel(row);\r\n    if (rowLevel === -1) return\r\n\r\n    let i = row.index\r\n    do {\r\n        i--\r\n        parentRow = row.grid.rows[i]\r\n    } while (getRowLevel(parentRow) >= rowLevel)\r\n\r\n    return parentRow\r\n}\r\n\r\n\r\nclass CostTableView extends Component {\r\n    gridRef = createRef()\r\n    state = {\r\n        costs: dataService.getCosts(),\r\n        filter: '',\r\n        time: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this._ts = window.performance.now()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateGridStyles()\r\n\r\n        this.workerGrid.collapseGroupsToLevel(0)\r\n        this.workerGrid.rowAdded.addHandler(() => {\r\n            this.updateGridStyles()\r\n        })\r\n\r\n        this.workerGrid.deletedRow.addHandler((grid, e) => {\r\n            this.updateGridStyles()\r\n        })\r\n\r\n        this.workerGrid.deletingRow.addHandler((grid, e) => {\r\n            // this.updateGridStyles()\r\n        })\r\n    }\r\n\r\n    initialWorkerGrid = (grid) => {\r\n        this.workerGrid = grid;\r\n        // grid.columnFooters.rows.push(new wjGrid.GroupRow());\r\n        // grid.bottomLeftCells.setCellData(0, 0, 'Σ');\r\n        grid.formatItem.addHandler((grid, e) => {\r\n            if (e.panel !== grid.cells) {\r\n                return\r\n            }\r\n\r\n            const { row, col } = e\r\n            const rowData = grid.rows[row]\r\n            const colData = grid.columns[col]\r\n\r\n            // if (colData.binding === 'rate' && rowData.hasChildren) {\r\n            //     e.cell.textContent = wjCore.getAggregate(1, item.__children, 'rate')\r\n            // }\r\n\r\n            if (/days/.test(colData.binding) && !rowData.hasChildren) {\r\n                // e.cell.textContent = get(item, colData.binding, get(item, colData.binding.replace('days', 'populatedDays')))\r\n            }\r\n        });\r\n\r\n        grid.itemFormatter = (panel, r, c, cell) => {\r\n            if (panel.cellType === wjGrid.CellType.ColumnHeader) {\r\n            }\r\n        }\r\n\r\n        const te = window.performance.now()\r\n        const time = (te - this._ts).toFixed(2)\r\n        this.setState({ time })\r\n    }\r\n\r\n    onCellEditEnding = (grid, e) => {\r\n        console.log('edited')\r\n    }\r\n\r\n    updateGridStyles = () => {\r\n        this.workerGrid.rows.forEach((row) => {\r\n            if (!row.hasChildren) {\r\n                row.cssClass = 'wj-group--bg-white'\r\n            }\r\n            row.isReadOnly = row.hasChildren;\r\n        });\r\n    }\r\n\r\n    onFilter = ({ target: { value } }) => {\r\n        this.setState(() => {\r\n            const filter = value.toLowerCase()\r\n            const costs = dataService.getCosts()\r\n\r\n            return {\r\n                costs: this.filter(filter, costs),\r\n                filter\r\n            }\r\n        }, () => {\r\n            this.updateGridStyles()\r\n        })\r\n    }\r\n\r\n    filter(filterString, costs) {\r\n        if (filterString === '') return costs;\r\n        const keysToSearch = ['name', 'code'];\r\n\r\n        const search = cost => {\r\n            const values = keysToSearch.map(key => cost[key]).filter(v => v);\r\n            if (values.some(v => v.toLowerCase().includes(filterString))) {\r\n                return cost;\r\n            }\r\n\r\n            if (cost.__children && cost.__children.length) {\r\n                const costCopy = Object.assign({}, cost);\r\n                const children = cost.__children.reduce(collectResults, []);\r\n\r\n                if (children.length) {\r\n                    costCopy.__children = children;\r\n                    return costCopy;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        function collectResults(acc, cost) {\r\n            const res = search(cost);\r\n            if (res) acc.push(res);\r\n\r\n            return acc;\r\n        }\r\n\r\n        return costs.reduce(collectResults, []);\r\n    }\r\n\r\n    onMenuItemClicked = ({ selectedValue }) => {\r\n        const cmd = this[selectedValue]\r\n        if (typeof cmd !== 'function') {\r\n            console.log('Context Menu: no cmd found ', selectedValue)\r\n            return\r\n        }\r\n\r\n        cmd()\r\n    }\r\n\r\n    addRow = () => {\r\n        const { row: rowIndex } = this.workerGrid.selection\r\n        const { rows } = this.workerGrid\r\n        const rowData = rows[rowIndex].dataItem\r\n\r\n        this.setState(({ costs }) => {\r\n            if (!rowData.__children) {\r\n                rowData.__children = []\r\n            }\r\n\r\n            rowData.__children.push({ name: '', code: '', days: {}, populatedDays: {} })\r\n\r\n            const newCosts = [...costs]\r\n            return { costs: newCosts }\r\n        }, () => {\r\n            this.workerGrid.refresh()\r\n            this.updateGridStyles()\r\n        })\r\n    }\r\n\r\n    removeRow = () => {\r\n        const { row: rowIndex } = this.workerGrid.selection\r\n        const { rows } = this.workerGrid\r\n        const row = rows[rowIndex]\r\n        const parentRow = getParentNode(row)\r\n\r\n        if (parentRow) {\r\n            this.setState(({ costs }) => {\r\n                const parentRowData = parentRow.dataItem\r\n                const rowData = row.dataItem\r\n                const childIndex = parentRowData.__children.findIndex(child => child === rowData)\r\n\r\n                if (childIndex >= 0) {\r\n                    parentRowData.__children.splice(childIndex, 1)\r\n                }\r\n\r\n                return { costs: [...costs] }\r\n            }, () => {\r\n                this.workerGrid.refresh()\r\n                this.updateGridStyles()\r\n            })\r\n        }\r\n    }\r\n\r\n    collapseAll = () => {\r\n        this.workerGrid.collapseGroupsToLevel(0)\r\n    }\r\n\r\n    expandAll = () => {\r\n        this.workerGrid.collapseGroupsToLevel(this.workerGrid.rows.maxGroupLevel + 1)\r\n    }\r\n\r\n\r\n    onDraggedRow = (grid, e) => {\r\n        console.log(e)\r\n    }\r\n\r\n    exportExcel = () => {\r\n        const book = FlexGridXlsxConverter.save(this.workerGrid, {\r\n            includeColumnHeaders: true,\r\n            includeRowHeaders: true\r\n        })\r\n\r\n        book.sheets[0].name = 'FlexGrid Data';\r\n        book.saveAsync('FlexGrid-Export.xlsx');\r\n    }\r\n\r\n    render() {\r\n        const { costs, filter, time } = this.state\r\n        const columns = ['days.2015-06-22', 'days.2015-06-27', 'days.2015-07-05', 'days.2015-07-11'].map((key) =>\r\n            <FlexGridColumn\r\n                binding={key}\r\n                header={key.replace('days.', '')}\r\n                key={key}\r\n                allowResizing={false}></FlexGridColumn>)\r\n\r\n\r\n        return (\r\n            <div className=\"cost-view\">\r\n                <h3>Wijmo Grid render performance: <span style={{ color: 'tomato' }}>{time}ms</span></h3>\r\n\r\n                <input type=\"text\" value={filter}\r\n                       placeholder=\"Filter\"\r\n                       className=\"form-control\" style={{ marginBottom: '20px' }}\r\n                       onChange={this.onFilter}/>\r\n                <FlexGrid\r\n                    ref={this.gridRef}\r\n                    itemsSource={costs}\r\n                    selectionMode=\"Row\"\r\n                    autoGenerateColumns={false}\r\n                    childItemsPath=\"__children\"\r\n                    frozenColumns={7}\r\n                    isReadOnly={false}\r\n                    allowSorting={false}\r\n                    allowDragging=\"Rows\"\r\n                    allowAddNew={true}\r\n                    // allowDelete={true}\r\n                    initialized={this.initialWorkerGrid}\r\n                    cellEditEnding={this.onCellEditEnding}\r\n                    draggedRow={this.onDraggedRow}\r\n                >\r\n                    <FlexGridColumn binding=\"name\" header=\"Name\" width=\"2*\" minWidth={200}\r\n                                    isReadOnly={false}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"code\" header=\"Code\"></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"type\" header=\"Type\"\r\n                                    dataMap={['tangible', 'intangible', 'consumable']}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"unit\" header=\"Unit\"\r\n                                    dataMap={['day rate', 'lump sum', 'unit cost', 'depth based']}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"rate\" header=\"Rate\"></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"currency\" header=\"Currency\"\r\n                                    dataMap={[\"AUD\", \"EUR\", \"GBP\", \"NOK\", \"USD\"]}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"populateDaily\" header=\"Populate Daily\" format=\"n*\"></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"prior\" header=\"Before onhire\"></FlexGridColumn>\r\n                    {columns}\r\n                    <FlexGridColumn binding=\"afterOffhire\" header=\"After offhire\"></FlexGridColumn>\r\n                </FlexGrid>\r\n\r\n                <Menu contextMenuOf={this.gridRef}\r\n                      header=\"Context Menu\"\r\n                      selectedValuePath=\"cmd\"\r\n                      dropDownCssClass=\"ctx-menu\"\r\n                      itemClicked={this.onMenuItemClicked}\r\n                >\r\n                    <MenuItem cmd=\"addRow\">\r\n                        Add row\r\n                    </MenuItem>\r\n                    <MenuItem cmd=\"removeRow\">\r\n                        Remove row\r\n                    </MenuItem>\r\n                    <MenuSeparator></MenuSeparator>\r\n                    <MenuItem cmd=\"collapseAll\">\r\n                        Collapse all\r\n                    </MenuItem>\r\n                    <MenuItem cmd=\"expandAll\">Expand all</MenuItem>\r\n                    <MenuSeparator></MenuSeparator>\r\n                    <MenuItem cmd=\"exportExcel\">Export Excel</MenuItem>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CostTableView\r\n","export default {\r\n    isEmpty: v => v === '',\r\n    isNotEmpty: v => v !== '',\r\n    isNumber: v => typeof v === 'number' && !isNaN(v)\r\n}\r\n","/**\r\n * TreeGrid component\r\n * http://www.treegrid.com/TreeGrid5_6/Doc/TreeGridFAQ.htm\r\n *\r\n */\r\nimport React, { Component, createRef } from 'react'\r\nimport noop from 'lodash/noop'\r\nimport PropTypes from 'prop-types'\r\nimport merge from 'lodash/merge'\r\nimport helpers from './utils/global-helpers'\r\n\r\nconst { TreeGrid, Grids } = window\r\n\r\nGrids.OnCustomAjax = (G, IO, data, func) => {\r\n    if (IO.Url) {\r\n        import(`./config/${IO.Url}`)\r\n            .then(({ default: res }) => func(0, res))\r\n            .catch(err => err)\r\n    } else {\r\n        G.OnDataChanged(G, JSON.parse(G.GetChanges()), func) // TODO: data doesn't match with changes list\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nconst propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n\r\n    // events\r\n    onDataChanged: PropTypes.func,\r\n\r\n    // data\r\n    body: PropTypes.arrayOf(PropTypes.object),\r\n    layout: PropTypes.shape({\r\n        Cfg: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\r\n    }).isRequired,\r\n    nestedKey: PropTypes.string,\r\n\r\n    // rows defaults http://www.treegrid.com/Doc/RowDefaults.htm\r\n    Def: PropTypes.string,\r\n    DefEmpty: PropTypes.string,\r\n    DefParent: PropTypes.string,\r\n    Validator: PropTypes.func\r\n}\r\n\r\nconst defaultProps = {\r\n    onDataChanged: noop,\r\n    nestedKey: '__children',\r\n    body: [],\r\n    Def: 'R',\r\n    DefEmpty: 'R',\r\n    DefParent: 'R',\r\n    Validator: null\r\n}\r\n\r\nclass TreeGridComponent extends Component {\r\n    static propTypes = propTypes\r\n\r\n    static defaultProps = defaultProps\r\n\r\n    $el = createRef()\r\n\r\n    grid = null\r\n\r\n    // eslint-disable-next-line react/destructuring-assignment\r\n    gridBody = this.prepareBody(this.props.body)\r\n\r\n    dataManager = new Worker('/sheets.github.io/ManageData.worker.js')\r\n\r\n    componentDidMount() {\r\n        this.initGrid()\r\n        this.subscribeGridEvents()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.dataManager.terminate()\r\n\r\n        if (!this.grid) return\r\n        this.grid.Dispose()\r\n    }\r\n\r\n    subscribeGridEvents = () => {\r\n        this.grid.OnDataChanged = (G, { Changes }, func) => {\r\n            const { body, nestedKey, Validator } = this.props\r\n            let validChanges = []\r\n            let errors = []\r\n\r\n            if (Validator) {\r\n                const validator = new Validator(G)\r\n                ;[validChanges, errors] = validator.validate(Changes)\r\n            }\r\n\r\n            const hasErrors = errors.length\r\n            func(0, {\r\n                IO: {\r\n                    Result: hasErrors ? -1 : 0\r\n                },\r\n                Changes: hasErrors ? errors : validChanges\r\n            })\r\n\r\n            if (hasErrors) return\r\n            G.AcceptChanges()\r\n\r\n            const onDataManagerMessage = (...args) => {\r\n                this.onDataManagerMessage(...args)\r\n\r\n                this.dataManager.removeEventListener('message', onDataManagerMessage)\r\n            }\r\n\r\n            this.dataManager.addEventListener('message', onDataManagerMessage)\r\n            this.dataManager.postMessage(['update', { changes: Changes, data: body, nestedKey }])\r\n        }\r\n    }\r\n\r\n    onDataManagerMessage = e => {\r\n        if (!Array.isArray(e.data)) return\r\n\r\n        const { onDataChanged } = this.props\r\n        const [event, data] = e.data\r\n\r\n        switch (event) {\r\n            case 'updated':\r\n                onDataChanged(data.data)\r\n                break\r\n            case 'error':\r\n                // eslint-disable-next-line no-console\r\n                console.error('Worker error: ', data.data)\r\n                break\r\n            default:\r\n                // eslint-disable-next-line no-console\r\n                console.debug('Worker: event not found!')\r\n        }\r\n    }\r\n\r\n    initGrid() {\r\n        const { layout, id } = this.props\r\n        const Data = merge({}, layout)\r\n\r\n        this.grid = TreeGrid(\r\n            {\r\n                Debug: process.env.NODE_ENV !== 'production' ? 'Problem' : 0,\r\n                id,\r\n                Layout: {\r\n                    Data\r\n                },\r\n                Upload: {\r\n                    Format: 'JSON',\r\n                    Flags: 'Spanned',\r\n                    Type: 'Changes,Span',\r\n                    Tag: 'grid'\r\n                },\r\n                Data: {\r\n                    Data: {\r\n                        Body: [this.gridBody]\r\n                    }\r\n                }\r\n            },\r\n\r\n            // root element\r\n            this.$el.current,\r\n\r\n            // inject to Grid\r\n            {\r\n                Component: this,\r\n                Helpers: helpers\r\n            }\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Data  format http://www.treegrid.com/Doc/DataFormats.htm#JSONFormat\r\n     * @param arr\r\n     * @returns {{}[]}\r\n     */\r\n    prepareBody(arr) {\r\n        const { nestedKey, Def, DefParent, DefEmpty } = this.props\r\n\r\n        function traverse(item) {\r\n            if (item[nestedKey] && item[nestedKey].length) {\r\n                item.Def = item.Def || DefParent\r\n                item.Items = item[nestedKey].map(traverse)\r\n            } else {\r\n                item.Def = item.Def || Def\r\n            }\r\n\r\n            item.DefParent = item.DefParent || DefParent\r\n            item.DefEmpty = item.DefEmpty || DefEmpty\r\n\r\n            return item\r\n        }\r\n\r\n        return arr.map(traverse)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={this.$el}\r\n                style={{\r\n                    height: '100%',\r\n                    width: '100%'\r\n                }}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeGridComponent\r\n","export default {\r\n    Cfg: {\r\n        ShowDeleted: \"0\",\r\n        AutoSort: \"0\",\r\n        DateStrings: '1',\r\n        ReloadChanged: '3',\r\n        MainCol: 'name',\r\n        NoVScroll: 0,\r\n        Sorting: 0,\r\n        // Paging: 2,\r\n        // PageLength: 1,\r\n        AutoUpdate: 1,\r\n        StandardFilter: 3,\r\n        SaveExpanded: 1,\r\n        PersistentCfg: 2,\r\n        Filtered: 0,\r\n        RoundNumbers: 1,\r\n        RoundNumbersDigits: 2,\r\n        Size: 'Small',\r\n        Undo: 32,\r\n        RowIndex: \"Pos\",\r\n        SearchLap: 1,\r\n        FilterLap: 1,\r\n        Validate: 'Changed,Messages',\r\n        Sync: 'Horz,Vert',\r\n        SyncId: 'TimeTracker',\r\n        // CfgId: 'Costs',\r\n        ExportType: 'Expanded,Outline,Indent,ForceBorder,TextType,Strings,FixedRows,Size'\r\n    },\r\n    Toolbar: {\r\n        Cells30Manipulate: \"Undo,Redo,Add,AddChild,Calc,Outdent,Indent,ExpandAll,CollapseAll\"\r\n    },\r\n    Def: {\r\n        R: {\r\n            Expanded: 1\r\n        }\r\n    },\r\n    DefCols: {\r\n        C: {\r\n            CanFilter: 0\r\n        }\r\n    },\r\n    Root: {\r\n        AcceptDef: 'Well',\r\n        CDef: 'Well'\r\n    },\r\n    Panel: {\r\n        Copy: 1,\r\n        Delete: 1,\r\n        Select: 1,\r\n        Move: 1\r\n    }\r\n}\r\n","import centerHeader from '../../components/TreeGridComponent/utils/center-header'\r\n\r\nexport default () => {\r\n    const mainHeader = {\r\n        Pos: 'Pos',\r\n        name: \"Name\",\r\n        code: \"Code\",\r\n        targetHours: 'Rounding bug',\r\n        dsvHours: 'DSV',\r\n        actualHours: 'Actual',\r\n        nptHours: 'NPT',\r\n        wowHours: 'WOW',\r\n        _tftHours: 'TFT',\r\n        _plannedDepth: 'Planned',\r\n        _actualDepth: 'Actual',\r\n        _start: 'Start',\r\n        _end: 'End'\r\n    }\r\n\r\n    // set align for header' key\r\n    // http://www.treegrid.com/Doc/ColBasics.htm#HeaderCellvalue\r\n    Object.keys(mainHeader).forEach((key) => centerHeader(key, mainHeader))\r\n\r\n    mainHeader.id = 'Header'\r\n\r\n    return [\r\n        mainHeader\r\n    ]\r\n}\r\n","export default function getPrevEvent(grid, row) {\r\n    const _row = grid.GetPrev(row)\r\n\r\n    if (!_row) return\r\n\r\n    if (_row.Def.Name !== 'Event') {\r\n        return getPrevEvent(grid, _row)\r\n    }\r\n\r\n    return _row\r\n}\r\n","import isNumber from 'lodash/isNumber'\r\nimport isNaN from 'lodash/isNaN'\r\n\r\nexport default function pickNumber(...args) {\r\n    return args.find(n => isNumber(n) && !isNaN(n));\r\n};\r\n","class ChangesHolder {\n  _changes = {}\n\n  static getErrorKey(key) {\n    return `${key}Error`\n  }\n\n  static getMessages(change, key) {\n    return change[ChangesHolder.getErrorKey(key)] || []\n  }\n\n  getChange(id) {\n    const row = this._changes[id]\n    if (!row) {\n      this._changes[id] = { id }\n    }\n\n    return this._changes[id]\n  }\n\n  addError(id, key, message) {\n    const change = this.getChange(id)\n\n    const messages = ChangesHolder.getMessages(change, key)\n    messages.push(message)\n\n    change[ChangesHolder.getErrorKey(key)] = messages\n  }\n\n  removeError(id, key) {\n    this.addError(id, key, '')\n  }\n\n  getChanges() {\n    return Object.values(this._changes).reduce((acc, errors) => {\n      const change = {}\n\n      Object.entries(errors).forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          change[key] = value.find(m => m) || ''\n        } else {\n          change[key] = value\n        }\n      })\n\n      return [...acc, change]\n    }, [])\n  }\n}\n\nexport default ChangesHolder\n","import ChangesHolder from './ChangesHolder'\n\nclass BaseValidator {\n  validChanges = null\n\n  invalidChanges = null\n\n  rules = {}\n\n  constructor(grid) {\n    if (!grid) {\n      throw new Error('TreeGrid validator: Set related grid!')\n    }\n\n    this.grid = grid\n  }\n\n  _getRow(id) {\n    return this.grid.GetRowById(id)\n  }\n\n  forEachRule(fn) {\n    Object.entries(this.rules).forEach(([rule, cb]) => fn(rule, cb))\n  }\n\n  validate(changes) {\n    this.validChanges = new ChangesHolder()\n    this.invalidChanges = new ChangesHolder()\n\n    changes.forEach(change => {\n      this.forEachRule((key, fn) => {\n        if (key in change) {\n          fn.call(this, change)\n        }\n      })\n    })\n\n    return [this.validChanges.getChanges(), this.invalidChanges.getChanges()]\n  }\n}\n\nexport default BaseValidator\n","import React, { Component } from 'react';\r\nimport TreeGridComponent from '../../../components/TreeGridComponent'\r\n\r\n\r\n// Layout\r\nimport mergeLayouts from '../../../components/TreeGridComponent/utils/merge-layouts'\r\nimport staticLayout from '../static-layout'\r\nimport createColumns from '../create-columns'\r\nimport createLeftColumns from '../create-left-columns'\r\nimport createHead from '../create-head'\r\nimport createFoot from '../create-foot'\r\nimport createSolid from '../create-solid'\r\nimport createRowsDef from '../create-rows-def'\r\n\r\n// Utils\r\nimport getPrevEvent from './utils/get-prev-event'\r\nimport pickNumber from '../../../helpers/pick-number'\r\nimport isUndefined from 'lodash/isUndefined'\r\nimport Validator from '../../../components/TreeGridComponent/validator'\r\n\r\nclass TimeTrackerGrid extends Component {\r\n    layout = this.createLayout()\r\n\r\n    createLayout() {\r\n        const { OperationStartDate, isAux, DerrickType } = this.props\r\n        const dynamicLayout = {}\r\n\r\n        dynamicLayout.LeftCols = createLeftColumns()\r\n\r\n        dynamicLayout.Cols = createColumns({ isAux })\r\n\r\n        dynamicLayout.Head = createHead()\r\n\r\n        dynamicLayout.Foot = createFoot()\r\n\r\n        dynamicLayout.Solid = createSolid({ OperationStartDate, isAux, DerrickType })\r\n\r\n        dynamicLayout.Def = createRowsDef()\r\n\r\n        return mergeLayouts(staticLayout, dynamicLayout)\r\n    }\r\n\r\n    getEventStart = (grid, row, get) => {\r\n        const eventRow = getPrevEvent(grid, row)\r\n\r\n        if (eventRow) {\r\n            return get(eventRow, '_end')\r\n        }\r\n\r\n        return this.props.OperationStartDate\r\n    }\r\n\r\n    getEventEnd = (start, duration) => {\r\n        if (start && typeof duration === 'number') {\r\n            return start + duration\r\n        }\r\n\r\n        return ''\r\n    }\r\n\r\n    getEventDuration = (...args) => {\r\n        const hours = pickNumber(...args)\r\n\r\n        if (isUndefined(hours)) return ''\r\n\r\n        return 60 * 60 * 1000 * hours // to milliseconds\r\n    }\r\n\r\n    getPlannedDepth = (grid, row, get, plannedDepth) => {\r\n        if (grid.Helpers.isNotEmpty(plannedDepth)) return plannedDepth\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        if (eventRow) {\r\n            return get(eventRow, '_plannedDepth')\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    getActualDepth = (grid, row, get, actualDepth) => {\r\n        if (grid.Helpers.isNotEmpty(actualDepth)) return actualDepth\r\n\r\n        if (!this.hasActual(grid, row)) return ''\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        if (eventRow) {\r\n            return get(eventRow, '_actualDepth')\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    getBehindHours = (grid, row, get, delta) => {\r\n        if (!this.hasActual(grid, row)) return ''\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        const prevDelta = eventRow ? get(eventRow, 'behindHours') : 0\r\n\r\n        return prevDelta + delta\r\n    }\r\n\r\n    hasActual = (grid, row) => {\r\n        return grid.Helpers.isNotEmpty(row.actualHours)\r\n    }\r\n\r\n    render() {\r\n        return <TreeGridComponent\r\n            layout={this.layout}\r\n            nestedKey={TimeTrackerGrid.nestedKey}\r\n            getBehindHours={this.getBehindHours}\r\n            getActualDepth={this.getActualDepth}\r\n            getPlannedDepth={this.getPlannedDepth}\r\n            getEventEnd={this.getEventEnd}\r\n            getEventStart={this.getEventStart}\r\n            getEventDuration={this.getEventDuration}\r\n            Validator={Validator}\r\n            {...this.props}\r\n        />\r\n    }\r\n}\r\n\r\nexport default TimeTrackerGrid\r\n","export default () => {\r\n    return [\r\n        {\r\n            Name: 'code',\r\n            CanFilter: 1,\r\n            MinWidth: 60,\r\n            CaseSensitive: 0\r\n        },\r\n        {\r\n            Name: 'name',\r\n            RelWidth: 1,\r\n            MinWidth: 250,\r\n            CanFilter: 1,\r\n            CaseSensitive: 0\r\n        }\r\n    ]\r\n}\r\n","export default ({ isAux }) => {\r\n    const cols = [\r\n        {\r\n            Name: 'targetHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'dsvHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'actualHours',\r\n            MinWidth: 80,\r\n            CanEmpty: isAux ? 0 : 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'nptHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'wowHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: '_tftHours',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Type: 'Float',\r\n            Formula: 'actualHours - nptHours - wowHours'\r\n        },\r\n        {\r\n            Name: 'plannedDepth',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_plannedDepth',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Type: 'Float',\r\n            CanEdit: 1,\r\n            CanEmpty: 1,\r\n            OnChange: 'Grid.SetValue(Row, \"plannedDepth\", Value, 1)',\r\n            ClassFormula: 'Grid.Helpers.isEmpty(plannedDepth) && \"TSClassReadOnly\"',\r\n            Formula: 'Grid.Component.props.getPlannedDepth(Grid, Row, Get, plannedDepth)'\r\n        },\r\n        {\r\n            Name: 'actualDepth',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_actualDepth',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Type: 'Float',\r\n            CanEdit: 1,\r\n            CanEmpty: 1,\r\n            OnChange: 'Grid.SetValue(Row, \"actualDepth\", Value, 1)',\r\n            ClassFormula: 'Grid.Helpers.isEmpty(actualDepth) && \"TSClassReadOnly\"',\r\n            Formula: 'Grid.Component.props.getActualDepth(Grid, Row, Get, actualDepth)'\r\n        },\r\n        {\r\n            Name: '_eventDuration',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0,\r\n            Formula: 'Grid.Component.props.getEventDuration(actualHours, dsvHours)'\r\n        },\r\n        {\r\n            Name: 'start',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_start',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            CanEdit: 1,\r\n            OnChange: `Grid.SetValue(Row, \"start\", Value, 1)`,\r\n            ClassFormula: 'Grid.Helpers.isEmpty(start) && \"TSClassReadOnly\"',\r\n            Formula: 'start ? start : Grid.Component.props.getEventStart(Grid, Row, Get)',\r\n            MinWidth: 120\r\n        },\r\n        {\r\n            Name: '_end',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            MinWidth: 120,\r\n            Formula: 'Grid.Component.props.getEventEnd(_start, _eventDuration)'\r\n        }\r\n    ]\r\n\r\n    return cols\r\n}\r\n","export default function centerHeader(key, config) {\r\n    config[`${key}Align`] = 'Center'\r\n}\r\n","export default () => {\r\n    const total = {\r\n        id: 'Total',\r\n        Class: 'time-grid-total',\r\n        Color: '#D0E6F5',\r\n        CanDelete: 0,\r\n        CanEdit: 0,\r\n        Calculated: 1,\r\n        code: \"SUM\",\r\n\r\n        // calculations\r\n        dsvHoursFormula: 'sum()',\r\n        actualHoursFormula: 'sum()',\r\n        nptHoursFormula: 'sum()',\r\n        wowHoursFormula: 'sum()',\r\n        tftHoursFormula: 'sum()',\r\n        targetHoursFormula: 'sum()',\r\n        _plannedDepthFormula: '',\r\n        _actualDepthFormula: '',\r\n        _startFormula: '',\r\n        _endFormula: 'Grid.GetLast() ? Get(Grid.GetLast(), \"_end\") : \"\"'\r\n    }\r\n\r\n    return [total]\r\n}\r\n","export default ({ OperationStartDate, DerrickType, isAux }) => {\r\n    const topBar = {\r\n        id: 'topBar',\r\n        Space: -1,\r\n        Tag: 'timeGridTopBar',\r\n        Cells: 'OperationStartDate,DerrickType',\r\n\r\n        // OperationStartDate cell settings\r\n        OperationStartDate,\r\n        OperationStartDateLabel: 'Start operation: ',\r\n        OperationStartDateWidth: 120,\r\n        OperationStartDateFormat: 'yyyy-M-d H:mm',\r\n        OperationStartDateType: 'Date',\r\n        OperationStartDateRecalc: 256,\r\n        OperationStartDateOnChange: 'Grid.Component.props.handleOperationStartDateChange(Grid,Value)',\r\n\r\n        DerrickType,\r\n        DerrickTypeType: 'Bool',\r\n        DerrickTypeLabel: 'Aux derrick: ',\r\n        DerrickTypeOnChange: 'Grid.Component.props.handleDerrickTypeChange(Grid,Value)',\r\n    }\r\n\r\n    const topBarAux = {\r\n        id: 'topBarAux',\r\n        Visible: 0,\r\n        Cells: 'OperationStartDate',\r\n        OperationStartDate,\r\n        OperationStartDateRecalc: 256\r\n    }\r\n\r\n    return isAux ? [topBarAux] : [topBar]\r\n}\r\n","export default () => {\r\n    const commonGroupDef = {\r\n        CanEdit: 0,\r\n        Calculated: 1,\r\n\r\n        nameCanEdit: 1,\r\n        codeCanEdit: 1,\r\n\r\n        // calculations\r\n        dsvHoursFormula: 'sum()',\r\n        actualHoursFormula: 'sum()',\r\n        wowHoursFormula: 'sum()',\r\n        nptHoursFormula: 'sum()',\r\n        tftHoursFormula: 'sum()',\r\n        targetHoursFormula: 'sum()',\r\n        _plannedDepthFormula: 'calc(\"_plannedDepth ? _plannedDepth : Result\")',\r\n        _actualDepthFormula: 'calc(\"_actualDepth ? _actualDepth : Result\")',\r\n        _startFormula: 'Row.firstChild ? Get(Row.firstChild, \"_start\") : \"\"',\r\n        _endFormula: 'Row.lastChild ? Get(Row.lastChild, \"_end\") : \"\"',\r\n    }\r\n\r\n    const Well = {\r\n        CDef: 'Phase',\r\n        AcceptDef: 'Phase',\r\n\r\n        Class: 'time-grid-well',\r\n        Color: '#d7d7d7',\r\n\r\n        ...commonGroupDef\r\n    }\r\n\r\n    const Phase = {\r\n        CDef: 'Event',\r\n        AcceptDef: 'Event',\r\n\r\n        Class: 'time-grid-phase',\r\n        Color: '#f0f0f0',\r\n\r\n        ...commonGroupDef\r\n    }\r\n\r\n    const eventCalcOrder = [\r\n        'nameClass',\r\n        '_tftHours',\r\n        '_plannedDepth',\r\n        '_plannedDepthClass',\r\n        '_actualDepth',\r\n        '_actualDepthClass',\r\n        '_eventDuration',\r\n        '_start',\r\n        '_startClass',\r\n        '_end'\r\n    ]\r\n\r\n    const Event = {\r\n        AcceptDef: '',\r\n\r\n        CalcOrder: eventCalcOrder.join()\r\n    }\r\n\r\n    return { Well, Phase, Event }\r\n}\r\n","import mergeWith from 'lodash/mergeWith'\r\n\r\nexport default function (...args) {\r\n    return mergeWith(\r\n        {\r\n            Cfg: {\r\n                FocusRect: 2,\r\n                SelectingCells: 2,\r\n                SelectingFocus: 2\r\n            },\r\n            Actions: {\r\n                OnDragRow: 'FocusCells',\r\n                OnDel: '!StartEditEmpty' // prevent delete rows on del button pressing\r\n            },\r\n            Lang: {\r\n                Format: {\r\n                    GroupSeparator: ' '\r\n                }\r\n            }\r\n        },\r\n        ...args,\r\n        function (objValue, srcValue) {\r\n            if (Array.isArray(objValue)) {\r\n                return srcValue.concat(objValue)\r\n            }\r\n        }\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport deepClone from '../../helpers/deep-clone'\r\nimport TimeTrackerGrid from './TimeTrackerGrid'\r\nimport dataService from '../../db/dataService'\r\n\r\nclass TimeTracker extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        let data = window.localStorage.getItem('phases')\r\n        data = data ? JSON.parse(data) : dataService.getPhases()\r\n\r\n        this.state = {\r\n            DerrickType: 0,\r\n            Wells: this.prepareState(data),\r\n            OperationStartDate: +new Date()\r\n        }\r\n    }\r\n\r\n    prepareState(data) {\r\n        const wells = deepClone(data)\r\n        const defs = ['Well', 'Phase', 'Event']\r\n        const reCalc = [3, 3, 256]\r\n\r\n        function addRowDefinitions(row, level = 0) {\r\n            row.Def = defs[level]\r\n            row.Recalc = reCalc[level]\r\n\r\n            if (row.Items) {\r\n                row.Items.forEach(row => addRowDefinitions(row, level + 1))\r\n            }\r\n        }\r\n\r\n        wells.forEach(row => addRowDefinitions(row, 0))\r\n        return wells\r\n    }\r\n\r\n    onDataChanged = (newData) => {\r\n        this.setState(\r\n            { Wells: newData },\r\n            () => {\r\n                // window.localStorage.setItem('phases', JSON.stringify(newData))\r\n            }\r\n        )\r\n    }\r\n\r\n    handleOperationStartDateChange = (grid, value) => {\r\n        this.setState({ OperationStartDate: value })\r\n    }\r\n\r\n    handleDerrickTypeChange = (grid, value) => {\r\n        this.setState({ DerrickType: value })\r\n    }\r\n\r\n    render() {\r\n        const { DerrickType, Wells, WellsAux, OperationStartDate } = this.state\r\n\r\n        return (\r\n            <div className=\"time-grid-view\">\r\n                <div id=\"timeGridTopBar\" className=\"time-grid-view__top-bar\"/>\r\n\r\n                <div className=\"time-grid-view__grids\">\r\n                    <div className=\"time-grid-view__col\">\r\n                        <TimeTrackerGrid\r\n                            id=\"TimeTrackerMain\"\r\n                            body={Wells}\r\n                            DerrickType={DerrickType}\r\n                            OperationStartDate={OperationStartDate}\r\n                            handleDerrickTypeChange={this.handleDerrickTypeChange}\r\n                            handleOperationStartDateChange={this.handleOperationStartDateChange}\r\n                            onDataChanged={(data) => this.onDataChanged(data, 'Wells')}\r\n                        />\r\n                    </div>\r\n\r\n                    {DerrickType ? <div className=\"time-grid-view__col\">\r\n                        <TimeTrackerGrid\r\n                            id=\"TimeTrackerAux\"\r\n                            isAux={true}\r\n                            body={WellsAux}\r\n                            DerrickType={DerrickType}\r\n                            OperationStartDate={OperationStartDate}\r\n                            onDataChanged={(data) => this.onDataChanged(data, 'WellsAux')}\r\n                        />\r\n                    </div> : ''}\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeTracker\r\n","export default (obj) => JSON.parse(JSON.stringify(obj))\r\n","import React, { Component } from 'react';\r\nimport './App.css'\r\n// import NavBar from './components/NavBar'\r\nimport Handsontable from './views/Handsontable'\r\nimport SpreadJS from './views/SpreadJS'\r\nimport ZingGrid from './views/ZingGrid'\r\nimport WijmoGrid from './views/WijmoGrid'\r\nimport TimeTracker from './views/TimeTracker'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\n\r\n\r\nclass Sample extends Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                {/*<NavBar/>*/}\r\n                <div className=\"views-container\">\r\n                    <Switch>\r\n                        <Route path=\"/\">\r\n                            <TimeTracker/>\r\n                        </Route>\r\n\r\n                        <Route exact path=\"/handsontable\">\r\n                            <Handsontable/>\r\n                        </Route>\r\n                        <Route path=\"/spread-js\">\r\n                            <SpreadJS/>\r\n                        </Route>\r\n                        <Route path=\"/zing-grid\">\r\n                            <ZingGrid/>\r\n                        </Route>\r\n                        <Route path=\"/wijmo-grid\">\r\n                            <WijmoGrid/>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </HashRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sample\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}