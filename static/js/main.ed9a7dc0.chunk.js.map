{"version":3,"sources":["components/TreeGridComponent/config lazy /^/.*$/ groupOptions: {} namespace object","components/NavBar.js","helpers/deep-clone.js","components/TreeGridComponent/utils/global-helpers.js","components/TreeGridComponent/TreeGridComponent.js","components/TreeGridComponent/utils/merge-layouts.js","views/TimeTracker/static-layout.js","views/TimeTracker/create-head.js","db/dataService.js","views/TreeGridGantt/create-col-name.js","views/TreeGridGantt/create-body.js","views/TimeTracker/TimeTrackerGrid/utils/get-prev-event.js","helpers/pick-number.js","components/TreeGridComponent/validator/ChangesHolder.js","components/TreeGridComponent/validator/BaseValidator.js","views/TimeTracker/TimeTrackerGrid/TimeTrackerGrid.js","views/TimeTracker/create-left-columns.js","views/TimeTracker/create-columns.js","components/TreeGridComponent/utils/center-header.js","views/TimeTracker/create-foot.js","views/TimeTracker/create-solid.js","views/TimeTracker/create-rows-def.js","views/TreeGridGantt/static-layout.js","views/TreeGridGantt/create-head.js","views/TreeGridGantt/DataListManager.js","views/TreeGridGantt/RunColEditor.js","views/TreeGridGantt/TreeGridGantt.jsx","views/TreeGridGantt/create-layout.js","views/TreeGridGantt/create-cols.js","views/TreeGridGantt/create-left-cols.js","views/TreeGridGantt/create-solid.js","views/TimeTracker/TimeTracker.js","views/Companies/static-layout.js","views/Companies/constants.js","views/Companies/create-columns.js","views/Companies/create-head.js","views/Companies/create-foot.js","views/Companies/create-layout.js","views/Companies/create-left-columns.js","views/Companies/Companies.jsx","views/HighchartGant/HighchartGant.jsx","views/TreeGridGanttV2/static-layout.js","views/TreeGridGanttV2/create-body.js","views/TreeGridGanttV2/DataListManager.js","views/TreeGridGanttV2/TreeGridGantt.jsx","views/TreeGridGanttV2/create-layout.js","views/TreeGridGanttV2/create-solid.js","views/TreeGridGanttV2/create-left-cols.js","views/TreeGridGanttV2/create-cols.js","App.js","index.js","components/TreeGridComponent/config/default-layout.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","NavBar","className","to","Component","obj","JSON","parse","stringify","isEmpty","v","isNotEmpty","isNumber","isNaN","window","TreeGrid","Grids","OnCustomAjax","G","IO","data","func","Url","res","default","catch","err","OnDataChanged","GetChanges","defaultProps","onDataChanged","noop","nestedKey","body","Def","DefEmpty","DefParent","Validator","TreeGridComponent","$el","createRef","grid","gridBody","prepareBody","props","dataManager","Worker","subscribeGridEvents","Changes","validChanges","errors","validate","hasErrors","length","Result","AcceptChanges","addEventListener","onDataManagerMessage","removeEventListener","postMessage","changes","Array","isArray","event","console","error","debug","this","initGrid","terminate","Dispose","layout","Data","merge","Debug","Layout","Upload","Format","Flags","Type","Body","current","Helpers","helpers","arr","traverse","item","Items","ref","style","height","width","args","mergeWith","defaultLayout","objValue","srcValue","concat","Cfg","ShowDeleted","AutoSort","DateStrings","ReloadChanged","MainCol","NoVScroll","Sorting","AutoUpdate","StandardFilter","SaveExpanded","PersistentCfg","Filtered","RoundNumbers","RoundNumbersDigits","Size","Undo","RowIndex","SearchLap","FilterLap","Validate","Sync","SyncId","ExportType","Toolbar","Cells30Manipulate","R","Expanded","DefCols","C","CanFilter","Root","AcceptDef","CDef","Panel","Copy","Delete","Select","Move","MenuPrint","Attribute","HideUnused","calculatePhases","phases","start","prevItem","calculate","parent","newItem","name","hours","k","end","collectItemsOnLevel","deepArr","level","collector","acc","_level","push","forEach","it","reduce","DataService","getFromLS","instance","key","saveToLS","localStorage","setItem","getItem","OperationStartDate","Phases","getStartTime","PhasesAux","getPhases","PHASE_LEVEL","EVENT_LEVEL","getPhasesAux","Companies","Costs","totalDuration","sum","s","days","date","moment","format","WELL_LEVEL","createColName","prefix","col","index","CLASSES","createMainBars","i","createColNames","getType","mainBarEvents","dataService","getOnlyEvents","runBarEventsForAux","getOnlyEventsAux","Id","Start","Duration","Class","Text","title","CanEdit","events","getPrevEvent","row","_row","GetPrev","Name","pickNumber","find","n","ChangesHolder","_changes","message","change","getChange","messages","getMessages","getErrorKey","addError","values","entries","value","m","BaseValidator","invalidChanges","rules","GetRowById","fn","rule","cb","forEachRule","call","getChanges","TimeTrackerGrid","createLayout","getEventStart","get","eventRow","getEventEnd","duration","getEventDuration","isUndefined","getPlannedDepth","plannedDepth","getActualDepth","actualDepth","hasActual","getBehindHours","delta","actualHours","isAux","DerrickType","dynamicLayout","MinWidth","CaseSensitive","RelWidth","Cols","CanEmpty","EditFormat","Visible","CanHide","CanPrint","CanExport","Formula","OnChange","ClassFormula","createColumns","Head","mainHeader","Pos","_start","_end","config","centerHeader","createHead","Foot","Color","CanDelete","Calculated","hoursFormula","_startFormula","_endFormula","Solid","createBody","Cells","OperationStartDateRecalc","Kind","Space","eventsVisible","GANTTType","GANTTWidth","GANTTGanttRunSave","GANTTGanttRun","GANTTGanttRunAdjust","Tag","OperationStartDateLabel","OperationStartDateWidth","OperationStartDateFormat","OperationStartDateType","OperationStartDateOnChange","createSolid","commonGroupDef","nameCanEdit","codeCanEdit","Well","Phase","Event","CalcOrder","join","createRowsDef","mergeLayouts","staticLayout","FastGantt","GanttStyle","Detail","Zoom","GanttUnits","GanttWidth","GanttDragUnits","GanttChartRound","GanttHeader1","GanttHeader2","GanttHeader3","Cells05","ZoomType","ZoomWidth","Spanned","upHeader","colName","assign","DataListManager","dataClone","deepClone","flatArrById","list","nextParent","hasChildren","next","prev","indexWithinParent","set","Map","nextId","prevId","_getParentArr","splice","_updateIndexWithinParent","has","isTotally","hasItem","delete","parentId","moveItem","_getFutureIndex","convertedItem","convertItemKeys","_setChildToParent","removeItem","convertedData","test","convertValue","Symbol","cols","CanSort","getPopupGridBody","cellValue","Function","RunColEditor","createPopupLayout","log","AddOnClick","Cancel","CancelButton","CancelOnClick","Ok","OkButton","OkOnClick","gridId","onStartEdit","GetValue","ShowPopupGrid","onSave","HasChanges","EndEdit","Row","ParentDialog","mainGrid","ParentGrid","box","GetGanttRunBox","SetGanttRunBox","TreeGridGant","TGAddEvent","runEditor","useRef","useMemo","GanttZoom","GanttDataUnits","GanttCount","GanttRunSave","GanttRun","GanttRunAdjust","LeftCols","Width","Button","OnClick","ganttRunKey","newData","gridID","StartUpdate","State","SetValue","Date","EndUpdate","handleRunEditorSave","handleRunColStartEdit","TGSetEvent","keysMap","TimeTracker","setState","save","handleOperationStartDateChange","handleDerrickTypeChange","state","prepareState","ganttGrid","GANTT","mapper","boxKey","End","wells","defs","reCalc","addRowDefinitions","Recalc","TreeGridGantt","Dragging","HideZero","PrintPageOrientation","PrintPageSize","ColPaging","Alternate","Comment","CanCopy","CanSelect","CanDrag","Cells20Data","Cells60Cfg","MenuExport","COLS","day","flat","daysHeader","nameAlign","companiesHeader","commentRow","nameVertAlign","nameRowSpan","replaceAll","toUpperCase","comments","from","rowIndex","random","loremIpsum","toComment","fromComment","getDays","createFoot","useState","getCompanies","setBody","require","Highcharts","HighchartGant","today","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","getTime","prevEvent","collectEvents","ac","y","text","xAxis","currentDateIndicator","yAxis","categories","plotOptions","series","dragDrop","draggableX","dragMinY","dragMaxY","dragPrecisionX","dataLabels","enabled","allowPointSelect","point","drag","options","containerProps","highcharts","constructorType","GANTTGanttClass","startFormula","endFormula","settings","descendants","ancestors","create","Range","GanttStart","GanttEnd","GanttHtml","GanttTip","GanttAncestors","GanttTask","GanttMarkIncorrectDependencies","GanttMarkDisabledDependencies","GanttCorrectDependencies","GanttDragDependenciesBetween","GanttAssignDependencies","dialog","inputEl","useEffect","oldData","dir","XY","keyPrefix","X","Y","toString","substr","getElementsByTagName","buttonEl","ShowDialog","getElementsByClassName","Close","ShowCalendar","HeadClose","TimeFormat","OnSave","d","updateItem","Sample","path","exact","root","document","getElementById","ReactDOM","render","StrictMode","FocusRect","SelectingCells","SelectingFocus","CopyCols","PasteFocused","Actions","OnCtrlDragRow","OnDragRow","OnDel","Cells70Styles","PanelCopyMenu","Lang","GroupSeparator","GMT"],"mappings":"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","file":"static/js/main.ed9a7dc0.chunk.js","sourcesContent":["var map = {\n\t\"./Defaults\": [\n\t\t82,\n\t\t0\n\t],\n\t\"./Defaults.js\": [\n\t\t82,\n\t\t0\n\t],\n\t\"./Text\": [\n\t\t83,\n\t\t1\n\t],\n\t\"./Text.js\": [\n\t\t83,\n\t\t1\n\t],\n\t\"./default-layout\": [\n\t\t34\n\t],\n\t\"./default-layout.js\": [\n\t\t34\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 157;\nmodule.exports = webpackAsyncContext;","import React, { Component } from 'react';\r\nimport './NavBar.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navigationBar\">\r\n        <h3>Navigation</h3>\r\n        <nav className=\"navigationBarList\">\r\n          <Link to=\"/\" className=\"navItem\">Time tracker</Link>\r\n          <Link to=\"/companies\" className=\"navItem\">Companies</Link>\r\n          <Link to=\"/highcharts-gant\" className=\"navItem\">Highcharts Gantt</Link>\r\n          <Link to=\"/tree-grid-gant\" className=\"navItem\">TreeGrid gantt</Link>\r\n          <Link to=\"/tree-grid-gant-v2\" className=\"navItem\">TreeGrid gantt v2</Link>\r\n          {/*<Link to=\"/wijmo-grid\" className=\"navItem\">Wijmo Grid</Link>*/}\r\n          {/*<Link to=\"/tree-grid\" className=\"navItem\">Tree Grid</Link>*/}\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavBar\r\n","export default (obj) => JSON.parse(JSON.stringify(obj))\r\n","export default {\r\n    isEmpty: v => v === '',\r\n    isNotEmpty: v => v !== '',\r\n    isNumber: v => typeof v === 'number' && !isNaN(v)\r\n}\r\n","/**\r\n * TreeGrid component\r\n * http://www.treegrid.com/TreeGrid5_6/Doc/TreeGridFAQ.htm\r\n *\r\n */\r\nimport React, { Component, createRef } from 'react'\r\nimport noop from 'lodash/noop'\r\nimport PropTypes from 'prop-types'\r\nimport merge from 'lodash/merge'\r\nimport helpers from './utils/global-helpers'\r\n\r\nconst { TreeGrid, Grids } = window\r\n\r\nGrids.OnCustomAjax = (G, IO, data, func) => {\r\n  if (IO.Url) {\r\n    import(`./config/${IO.Url}`)\r\n      .then(({ default: res }) => func(0, res))\r\n      .catch(err => err)\r\n  } else {\r\n    G.OnDataChanged(G, JSON.parse(G.GetChanges()), func) // TODO: data doesn't match with changes list\r\n  }\r\n  \r\n  return true\r\n}\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  \r\n  // events\r\n  onDataChanged: PropTypes.func,\r\n  \r\n  // data\r\n  body: PropTypes.arrayOf(PropTypes.object),\r\n  layout: PropTypes.shape({\r\n    Cfg: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\r\n  }).isRequired,\r\n  nestedKey: PropTypes.string,\r\n  \r\n  // rows defaults http://www.treegrid.com/Doc/RowDefaults.htm\r\n  Def: PropTypes.string,\r\n  DefEmpty: PropTypes.string,\r\n  DefParent: PropTypes.string,\r\n  Validator: PropTypes.func\r\n}\r\n\r\nconst defaultProps = {\r\n  onDataChanged: noop,\r\n  nestedKey: 'Items',\r\n  body: [],\r\n  Def: 'R',\r\n  DefEmpty: 'R',\r\n  DefParent: 'R',\r\n  Validator: null\r\n}\r\n\r\nclass TreeGridComponent extends Component {\r\n  static propTypes = propTypes\r\n  \r\n  static defaultProps = defaultProps\r\n  \r\n  $el = createRef()\r\n  \r\n  grid = null\r\n  \r\n  // eslint-disable-next-line react/destructuring-assignment\r\n  gridBody = this.prepareBody(this.props.body)\r\n  \r\n  dataManager = new Worker('/sheets.github.io/ManageData.worker.js')\r\n  \r\n  componentDidMount() {\r\n    this.initGrid()\r\n    this.subscribeGridEvents()\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    this.dataManager.terminate()\r\n    \r\n    if (!this.grid) return\r\n    this.grid.Dispose()\r\n  }\r\n  \r\n  subscribeGridEvents = () => {\r\n    this.grid.OnDataChanged = (G, { Changes }, func) => {\r\n      const { body, nestedKey, Validator } = this.props\r\n      let validChanges = []\r\n      let errors = []\r\n      \r\n      if (Validator) {\r\n        const validator = new Validator(G)\r\n        ;[validChanges, errors] = validator.validate(Changes)\r\n      }\r\n      \r\n      const hasErrors = errors.length\r\n      func(0, {\r\n        IO: {\r\n          Result: hasErrors ? -1 : 0\r\n        },\r\n        Changes: hasErrors ? errors : validChanges\r\n      })\r\n      \r\n      if (hasErrors) return\r\n      G.AcceptChanges()\r\n      \r\n      const onDataManagerMessage = (...args) => {\r\n        this.onDataManagerMessage(...args)\r\n        \r\n        this.dataManager.removeEventListener('message', onDataManagerMessage)\r\n      }\r\n      \r\n      this.dataManager.addEventListener('message', onDataManagerMessage)\r\n      this.dataManager.postMessage(['update', { changes: Changes, data: body, nestedKey }])\r\n    }\r\n  }\r\n  \r\n  onDataManagerMessage = e => {\r\n    if (!Array.isArray(e.data)) return\r\n    \r\n    const { onDataChanged } = this.props\r\n    const [event, data] = e.data\r\n    \r\n    switch (event) {\r\n      case 'updated':\r\n        onDataChanged(data.data)\r\n        break\r\n      case 'error':\r\n        // eslint-disable-next-line no-console\r\n        console.error('Worker error: ', data.data)\r\n        break\r\n      default:\r\n        // eslint-disable-next-line no-console\r\n        console.debug('Worker: event not found!')\r\n    }\r\n  }\r\n  \r\n  initGrid() {\r\n    const { layout, id } = this.props\r\n    const Data = merge({}, layout)\r\n    \r\n    this.grid = TreeGrid(\r\n      {\r\n        Debug: process.env.NODE_ENV !== 'production' ? 'Problem' : 0,\r\n        id,\r\n        Layout: {\r\n          Data\r\n        },\r\n        Upload: {\r\n          Format: 'JSON',\r\n          Flags: 'Spanned',\r\n          Type: 'Changes,Span,Gantt'\r\n        },\r\n        Data: {\r\n          Data: {\r\n            Body: [this.gridBody]\r\n          }\r\n        }\r\n      },\r\n      \r\n      // root element\r\n      this.$el.current,\r\n      \r\n      // inject to Grid\r\n      {\r\n        Component: this,\r\n        Helpers: helpers\r\n      }\r\n    )\r\n  }\r\n  \r\n  /**\r\n   * Data  format http://www.treegrid.com/Doc/DataFormats.htm#JSONFormat\r\n   * @param arr\r\n   * @returns {{}[]}\r\n   */\r\n  prepareBody(arr) {\r\n    const { nestedKey, Def, DefParent, DefEmpty } = this.props\r\n    \r\n    function traverse(item) {\r\n      if (item[nestedKey] && item[nestedKey].length) {\r\n        item.Def = item.Def || DefParent\r\n        item.Items = item[nestedKey].map(traverse)\r\n      } else {\r\n        item.Def = item.Def || Def\r\n      }\r\n      \r\n      item.DefParent = item.DefParent || DefParent\r\n      item.DefEmpty = item.DefEmpty || DefEmpty\r\n      \r\n      return item\r\n    }\r\n    \r\n    return arr.map(traverse)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div\r\n        ref={this.$el}\r\n        style={{\r\n          height: '100%',\r\n          width: '100%'\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default TreeGridComponent\r\n","import mergeWith from 'lodash/mergeWith'\r\nimport defaultLayout from '../config/default-layout'\r\n\r\nexport default function (...args) {\r\n    return mergeWith(\r\n        {},\r\n        defaultLayout,\r\n        ...args,\r\n        function (objValue, srcValue) {\r\n            if (Array.isArray(objValue)) {\r\n                return srcValue.concat(objValue)\r\n            }\r\n        }\r\n    )\r\n}\r\n","export default {\r\n    Cfg: {\r\n        ShowDeleted: \"0\",\r\n        AutoSort: \"0\",\r\n        DateStrings: '1',\r\n        ReloadChanged: '3',\r\n        MainCol: 'name',\r\n        NoVScroll: 1,\r\n        Sorting: 0,\r\n        AutoUpdate: 1,\r\n        StandardFilter: 3,\r\n        SaveExpanded: 1,\r\n        PersistentCfg: 2,\r\n        Filtered: 0,\r\n        RoundNumbers: 1,\r\n        RoundNumbersDigits: 2,\r\n        Size: 'Small',\r\n        Undo: 32,\r\n        RowIndex: \"Pos\",\r\n        SearchLap: 1,\r\n        FilterLap: 1,\r\n        Validate: 'Changed,Messages',\r\n        Sync: 'Horz,Vert',\r\n        SyncId: 'TimeTracker',\r\n        // CfgId: 'Costs',\r\n        ExportType: 'Expanded,Outline,Indent,ForceBorder,TextType,Strings,FixedRows,Size'\r\n    },\r\n    Toolbar: {\r\n        Cells30Manipulate: \"Undo,Redo,Add,AddChild,Calc,Outdent,Indent,ExpandAll,CollapseAll\"\r\n    },\r\n    Def: {\r\n        R: {\r\n            Expanded: 1\r\n        }\r\n    },\r\n    DefCols: {\r\n        C: {\r\n            CanFilter: 0\r\n        }\r\n    },\r\n    Root: {\r\n        AcceptDef: 'Well',\r\n        CDef: 'Well'\r\n    },\r\n    Panel: {\r\n        Copy: 1,\r\n        Delete: 1,\r\n        Select: 1,\r\n        Move: 1\r\n    },\r\n    MenuPrint: {\r\n        Items: 'ColsCaption,Cols,SpaceCaption,RowsCaption,Foot,OptionsCaption,Options,SizeCaption,Size',\r\n        Attribute: 'CanPrint',\r\n        HideUnused: '1'\r\n    }\r\n}\r\n","import centerHeader from '../../components/TreeGridComponent/utils/center-header'\r\n\r\nexport default () => {\r\n    const mainHeader = {\r\n        Pos: 'Pos',\r\n        name: \"Name\",\r\n        code: \"Code\",\r\n        hours: 'Hours',\r\n        _start: 'Start',\r\n        _end: 'End'\r\n    }\r\n\r\n    // set align for header' key\r\n    // http://www.treegrid.com/Doc/ColBasics.htm#HeaderCellvalue\r\n    Object.keys(mainHeader).forEach((key) => centerHeader(key, mainHeader))\r\n\r\n    mainHeader.id = 'Header'\r\n\r\n    return [\r\n        mainHeader\r\n    ]\r\n}\r\n","import data from './data.json';\r\nimport moment from 'moment'\r\n\r\nconst STORAGE_KEY = 'data'\r\n\r\nfunction calculatePhases(phases, start) {\r\n  let prevItem = null\r\n  \r\n  const calculate = (item, parent) => {\r\n    const newItem = {\r\n      name: item.name,\r\n      id: item.id,\r\n      hours: item.hours\r\n    }\r\n    \r\n    if (item.Items) {\r\n      newItem.Items = item.Items.map(k => calculate(k, newItem))\r\n    } else {\r\n      newItem.start = item.start ? item.start : prevItem ? prevItem.end : start\r\n      newItem.end = newItem.start + (item.hours * 60 * 60 * 1000)\r\n      prevItem = newItem\r\n    }\r\n    \r\n    if (!parent) return newItem\r\n    \r\n    if (!parent.start) {\r\n      parent.start = newItem.start\r\n    }\r\n    parent.end = newItem.end || parent.end\r\n    \r\n    return newItem\r\n  }\r\n  \r\n  return phases.map(item => calculate(item))\r\n}\r\n\r\n\r\nconst collectItemsOnLevel = (deepArr, level = 0) => {\r\n  const collector = (acc, item, _level) => {\r\n    if (level === _level) {\r\n      acc.push(item)\r\n      \r\n      return acc\r\n    }\r\n    \r\n    if (_level < level && item.Items) {\r\n      item.Items.forEach(it => collector(acc, it, _level + 1))\r\n    }\r\n    \r\n    return acc\r\n  }\r\n  \r\n  \r\n  return deepArr.reduce((acc, item) => collector(acc, item, 0), [])\r\n}\r\n\r\nclass DataService {\r\n  static WELL_LEVEL = 0\r\n  static PHASE_LEVEL = 1\r\n  static EVENT_LEVEL = 2\r\n  \r\n  data = this.getFromLS() || data\r\n  \r\n  constructor() {\r\n    if (DataService.instance) {\r\n      return DataService.instance\r\n    }\r\n    \r\n    window.DataService = this\r\n    \r\n    DataService.instance = this\r\n  }\r\n  \r\n  save(key, data) {\r\n    if (!key) {\r\n      throw new Error('No key at save method')\r\n    }\r\n    \r\n    this.data[key] = data\r\n    \r\n    this.saveToLS()\r\n  }\r\n  \r\n  saveToLS() {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.data))\r\n  }\r\n  \r\n  getFromLS() {\r\n    try {\r\n      return JSON.parse(localStorage.getItem(STORAGE_KEY))\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }\r\n  \r\n  getStartTime() {\r\n    return this.data.OperationStartDate\r\n  }\r\n  \r\n  getPhases() {\r\n    return calculatePhases(this.data.Phases, this.getStartTime())\r\n  }\r\n  \r\n  getPhasesAux() {\r\n    return calculatePhases(this.data.PhasesAux, this.getStartTime())\r\n  }\r\n  \r\n  getOnlyPhases() {\r\n    return collectItemsOnLevel(this.getPhases(), DataService.PHASE_LEVEL)\r\n  }\r\n  \r\n  getOnlyEvents() {\r\n    return collectItemsOnLevel(this.getPhases(), DataService.EVENT_LEVEL)\r\n  }\r\n  \r\n  getOnlyEventsAux() {\r\n    return collectItemsOnLevel(this.getPhasesAux(), DataService.EVENT_LEVEL)\r\n  }\r\n  \r\n  getCompanies() {\r\n    return this.data.Companies\r\n  }\r\n  \r\n  getCosts() {\r\n    return this.data.Costs\r\n  }\r\n  \r\n  getDays() {\r\n    const sum = (arr) => arr.reduce((s, item) => {\r\n      if (item.Items) {\r\n        return s + sum(item.Items)\r\n      }\r\n      \r\n      return s + (item.hours || 0)\r\n    }, 0)\r\n    \r\n    let totalDuration = sum(this.data.Phases)\r\n    const start = this.getStartTime()\r\n    const days = []\r\n    \r\n    while (totalDuration > 0) {\r\n      const date = moment(start + totalDuration * 60 * 60 * 1000)\r\n      days.push(date.format('YYYY_MM_DD'))\r\n      totalDuration -= 24\r\n    }\r\n    \r\n    return days\r\n  }\r\n}\r\n\r\nexport default new DataService()\r\n","const createColName = (id, prefix = '') => `${prefix}_${id}`\n\nexport const GANTT_COL_NAME = 'G'\n\nexport default {\n  nameColName: (item) => createColName(item.id, 'name'),\n  startColName: (item) => createColName(item.id, 'start'),\n  endColName: (item) => createColName(item.id, 'end'),\n  getColNameWithIndex: (col, index) => `${GANTT_COL_NAME}${col}${index || ''}`\n}\n","import dataService from '../../db/dataService'\nimport createColNames from './create-col-name'\nimport moment from 'moment'\n\nconst CLASSES = ['Aqua', 'Blue', 'Fuchsia', 'Gray', 'Green', 'Lime', 'Maroon', 'Navy', 'Olive', 'Orange', 'Purple', 'Red', 'Silver', 'Teal', 'White', 'Yellow']\n\nconst createMainBars = (arr) => {\n  return arr.reduce((acc, item, i) => {\n    acc[createColNames.getColNameWithIndex('GanttHtml', i)] = item.name\n    acc[createColNames.getColNameWithIndex('GanttClass', i)] = CLASSES[i]\n    acc[createColNames.getColNameWithIndex('GanttStart', i)] = item.start\n    acc[createColNames.getColNameWithIndex('GanttEnd', i)] = item.end\n    \n    return acc\n  }, {})\n}\nconst getType = (i) => !i ? 'Left' : 'Box'\n\nconst createRunBars = (arr) => {\n  return arr.map((event, i) => {\n    return {\n      Id: event.id,\n      Start: event.start, // moment(event.start).format('MM/DD/YYYY HH:mm:ss'),\n      // End: moment(event.end).format('MM/DD/YYYY HH:mm:ss'),\n      Duration: event.hours,\n      Class: CLASSES[i],\n      Text: event.name,\n      Type: getType(i)\n    }\n  })\n}\n\nexport default () => {\n  const mainBarEvents = createMainBars(dataService.getOnlyEvents())\n  const mainBarEventsForAux = createMainBars(dataService.getOnlyEventsAux())\n  const runBarEventsForAux = createRunBars(dataService.getOnlyEventsAux())\n  \n  return [\n    // {\n    //   id: '64029a29010',\n    //   name: 'Main phases',\n    //   CanEdit: 0,\n    //   events: 'phasesMain'\n    // },\n    {\n      id: '24029a29010',\n      title: 'Main events',\n      CanEdit: 0,\n      ...mainBarEvents\n    },\n    // {\n    //   id: '63029a29010',\n    //   title: 'Aux events',\n    //   ...mainBarEventsForAux\n    // },\n    // {\n    //   id: '54029a29010'\n    // },\n    {\n      id: 'TimeTrackerAux',\n      title: 'Aux events',\n      events: runBarEventsForAux\n    }\n  ]\n}\n","export default function getPrevEvent(grid, row) {\r\n    const _row = grid.GetPrev(row)\r\n\r\n    if (!_row) return\r\n\r\n    if (_row.Def.Name !== 'Event') {\r\n        return getPrevEvent(grid, _row)\r\n    }\r\n\r\n    return _row\r\n}\r\n","import isNumber from 'lodash/isNumber'\r\nimport isNaN from 'lodash/isNaN'\r\n\r\nexport default function pickNumber(...args) {\r\n    return args.find(n => isNumber(n) && !isNaN(n));\r\n};\r\n","class ChangesHolder {\n  _changes = {}\n\n  static getErrorKey(key) {\n    return `${key}Error`\n  }\n\n  static getMessages(change, key) {\n    return change[ChangesHolder.getErrorKey(key)] || []\n  }\n\n  getChange(id) {\n    const row = this._changes[id]\n    if (!row) {\n      this._changes[id] = { id }\n    }\n\n    return this._changes[id]\n  }\n\n  addError(id, key, message) {\n    const change = this.getChange(id)\n\n    const messages = ChangesHolder.getMessages(change, key)\n    messages.push(message)\n\n    change[ChangesHolder.getErrorKey(key)] = messages\n  }\n\n  removeError(id, key) {\n    this.addError(id, key, '')\n  }\n\n  getChanges() {\n    return Object.values(this._changes).reduce((acc, errors) => {\n      const change = {}\n\n      Object.entries(errors).forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          change[key] = value.find(m => m) || ''\n        } else {\n          change[key] = value\n        }\n      })\n\n      return [...acc, change]\n    }, [])\n  }\n}\n\nexport default ChangesHolder\n","import ChangesHolder from './ChangesHolder'\n\nclass BaseValidator {\n  validChanges = null\n\n  invalidChanges = null\n\n  rules = {}\n\n  constructor(grid) {\n    if (!grid) {\n      throw new Error('TreeGrid validator: Set related grid!')\n    }\n\n    this.grid = grid\n  }\n\n  _getRow(id) {\n    return this.grid.GetRowById(id)\n  }\n\n  forEachRule(fn) {\n    Object.entries(this.rules).forEach(([rule, cb]) => fn(rule, cb))\n  }\n\n  validate(changes) {\n    this.validChanges = new ChangesHolder()\n    this.invalidChanges = new ChangesHolder()\n\n    changes.forEach(change => {\n      this.forEachRule((key, fn) => {\n        if (key in change) {\n          fn.call(this, change)\n        }\n      })\n    })\n\n    return [this.validChanges.getChanges(), this.invalidChanges.getChanges()]\n  }\n}\n\nexport default BaseValidator\n","import React, { Component } from 'react';\r\nimport TreeGridComponent from '../../../components/TreeGridComponent'\r\n\r\n\r\n// Layout\r\nimport mergeLayouts from '../../../components/TreeGridComponent/utils/merge-layouts'\r\nimport staticLayout from '../static-layout'\r\nimport createColumns from '../create-columns'\r\nimport createLeftColumns from '../create-left-columns'\r\nimport createHead from '../create-head'\r\nimport createFoot from '../create-foot'\r\nimport createSolid from '../create-solid'\r\nimport createRowsDef from '../create-rows-def'\r\n\r\n// Utils\r\nimport getPrevEvent from './utils/get-prev-event'\r\nimport pickNumber from '../../../helpers/pick-number'\r\nimport isUndefined from 'lodash/isUndefined'\r\nimport Validator from '../../../components/TreeGridComponent/validator'\r\n\r\nclass TimeTrackerGrid extends Component {\r\n  layout = this.createLayout()\r\n  \r\n  createLayout() {\r\n    const { OperationStartDate, isAux, DerrickType } = this.props\r\n    const dynamicLayout = {\r\n      Cfg: {\r\n      \r\n      }\r\n    }\r\n    \r\n    dynamicLayout.LeftCols = createLeftColumns()\r\n    \r\n    dynamicLayout.Cols = createColumns({ isAux })\r\n    \r\n    dynamicLayout.Head = createHead()\r\n    \r\n    dynamicLayout.Foot = createFoot()\r\n    \r\n    dynamicLayout.Solid = createSolid({ OperationStartDate, isAux, DerrickType })\r\n    \r\n    dynamicLayout.Def = createRowsDef()\r\n    \r\n    return mergeLayouts(staticLayout, dynamicLayout)\r\n  }\r\n  \r\n  getEventStart = (grid, row, get) => {\r\n    const eventRow = getPrevEvent(grid, row)\r\n    \r\n    if (eventRow) {\r\n      return get(eventRow, '_end')\r\n    }\r\n    \r\n    return this.props.OperationStartDate\r\n  }\r\n  \r\n  getEventEnd = (start, duration) => {\r\n    if (start && typeof duration === 'number') {\r\n      return start + duration\r\n    }\r\n    \r\n    return ''\r\n  }\r\n  \r\n  getEventDuration = (...args) => {\r\n    const hours = pickNumber(...args)\r\n    \r\n    if (isUndefined(hours)) return ''\r\n    \r\n    return 60 * 60 * 1000 * hours // to milliseconds\r\n  }\r\n  \r\n  getPlannedDepth = (grid, row, get, plannedDepth) => {\r\n    if (grid.Helpers.isNotEmpty(plannedDepth)) return plannedDepth\r\n    \r\n    const eventRow = getPrevEvent(grid, row)\r\n    if (eventRow) {\r\n      return get(eventRow, '_plannedDepth')\r\n    }\r\n    \r\n    return 0\r\n  }\r\n  \r\n  getActualDepth = (grid, row, get, actualDepth) => {\r\n    if (grid.Helpers.isNotEmpty(actualDepth)) return actualDepth\r\n    \r\n    if (!this.hasActual(grid, row)) return ''\r\n    \r\n    const eventRow = getPrevEvent(grid, row)\r\n    if (eventRow) {\r\n      return get(eventRow, '_actualDepth')\r\n    }\r\n    \r\n    return 0\r\n  }\r\n  \r\n  getBehindHours = (grid, row, get, delta) => {\r\n    if (!this.hasActual(grid, row)) return ''\r\n    \r\n    const eventRow = getPrevEvent(grid, row)\r\n    const prevDelta = eventRow ? get(eventRow, 'behindHours') : 0\r\n    \r\n    return prevDelta + delta\r\n  }\r\n  \r\n  hasActual = (grid, row) => {\r\n    return grid.Helpers.isNotEmpty(row.actualHours)\r\n  }\r\n  \r\n  render() {\r\n    return <TreeGridComponent\r\n      layout={this.layout}\r\n      nestedKey={TimeTrackerGrid.nestedKey}\r\n      getBehindHours={this.getBehindHours}\r\n      getActualDepth={this.getActualDepth}\r\n      getPlannedDepth={this.getPlannedDepth}\r\n      getEventEnd={this.getEventEnd}\r\n      getEventStart={this.getEventStart}\r\n      getEventDuration={this.getEventDuration}\r\n      Validator={Validator}\r\n      {...this.props}\r\n    />\r\n  }\r\n}\r\n\r\nexport default TimeTrackerGrid\r\n","export default () => {\r\n    return [\r\n        {\r\n            Name: 'code',\r\n            CanFilter: 1,\r\n            MinWidth: 60,\r\n            CaseSensitive: 0\r\n        },\r\n        {\r\n            Name: 'name',\r\n            RelWidth: 1,\r\n            MinWidth: 250,\r\n            CanFilter: 1,\r\n            CaseSensitive: 0\r\n        }\r\n    ]\r\n}\r\n","export default ({ isAux }) => {\r\n    const cols = [\r\n        {\r\n            Name: 'hours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            EditFormat: '',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: '_eventDuration',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0,\r\n            Formula: 'Grid.Component.props.getEventDuration(hours)'\r\n        },\r\n        {\r\n            Name: 'start',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_start',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            CanEdit: 1,\r\n            OnChange: `Grid.SetValue(Row, \"start\", Value, 1)`,\r\n            ClassFormula: 'Grid.Helpers.isEmpty(start) && \"TSClassReadOnly\"',\r\n            Formula: 'start ? start : Grid.Component.props.getEventStart(Grid, Row, Get)',\r\n            MinWidth: 120\r\n        },\r\n        {\r\n            Name: '_end',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            MinWidth: 120,\r\n            Formula: 'Grid.Component.props.getEventEnd(_start, _eventDuration)'\r\n        }\r\n    ]\r\n\r\n    return cols\r\n}\r\n","export default function centerHeader(key, config) {\r\n    config[`${key}Align`] = 'Center'\r\n}\r\n","export default () => {\r\n    const total = {\r\n        id: 'Total',\r\n        Color: '#D0E6F5',\r\n        CanDelete: 0,\r\n        CanEdit: 0,\r\n        Calculated: 1,\r\n        code: \"SUM\",\r\n\r\n        // calculations\r\n        hoursFormula: 'sum()',\r\n        _startFormula: '',\r\n        _endFormula: 'Grid.GetLast() ? Get(Grid.GetLast(), \"_end\") : \"\"'\r\n    }\r\n\r\n    return [total]\r\n}\r\n","import createBody from '../TreeGridGantt/create-body'\r\n\r\n\r\nexport default ({ OperationStartDate, DerrickType, isAux }) => {\r\n  const { events } = createBody()[1]\r\n  \r\n  const topBar = {\r\n    id: 'topBar',\r\n    Space: -1,\r\n    Tag: 'timeGridTopBar',\r\n    Cells: 'OperationStartDate',\r\n    \r\n    // OperationStartDate cell settings\r\n    OperationStartDate,\r\n    OperationStartDateLabel: 'Start operation: ',\r\n    OperationStartDateWidth: 120,\r\n    OperationStartDateFormat: 'yyyy-M-d H:mm',\r\n    OperationStartDateType: 'Date',\r\n    OperationStartDateRecalc: 256,\r\n    OperationStartDateOnChange: 'Grid.Component.props.handleOperationStartDateChange(Grid,Value)'\r\n    \r\n    // DerrickType,\r\n    // DerrickTypeType: 'Bool',\r\n    // DerrickTypeLabel: 'Aux derrick: ',\r\n    // DerrickTypeOnChange: 'Grid.Component.props.handleDerrickTypeChange(Grid,Value)',\r\n  }\r\n  \r\n  const topBarAux = {\r\n    id: 'topBarAux',\r\n    Visible: 0,\r\n    Cells: 'OperationStartDate',\r\n    OperationStartDate,\r\n    OperationStartDateRecalc: 256\r\n  }\r\n  \r\n  const gantt = {\r\n    Kind: 'Space',\r\n    Cells: 'GANTT,events',\r\n    Space: 2,\r\n    \r\n    events,\r\n    eventsVisible: 0,\r\n    \r\n    GANTTType: 'Gantt',\r\n    GANTTWidth: 500,\r\n    // GANTTGanttZoom: 'days',\r\n    // GANTTGanttDataUnits: 'h',\r\n    \r\n    // Main settings\r\n    // GANTTGanttCount: 10,\r\n    \r\n    // Run settings\r\n    GANTTGanttRunSave: 2,\r\n    GANTTGanttRun: 'events',\r\n    GANTTGanttRunAdjust: 'Shrink'\r\n  }\r\n  \r\n  return isAux ? [topBarAux, gantt] : [topBar]\r\n}\r\n","export default () => {\r\n  const commonGroupDef = {\r\n    CanEdit: 0,\r\n    Calculated: 1,\r\n    \r\n    nameCanEdit: 1,\r\n    codeCanEdit: 1,\r\n    \r\n    // calculations\r\n    hoursFormula: 'sum()',\r\n    _startFormula: 'Row.firstChild ? Get(Row.firstChild, \"_start\") : \"\"',\r\n    _endFormula: 'Row.lastChild ? Get(Row.lastChild, \"_end\") : \"\"'\r\n  }\r\n  \r\n  const Well = {\r\n    CDef: 'Phase',\r\n    AcceptDef: 'Phase',\r\n    \r\n    Class: 'time-grid-well',\r\n    Color: '#d7d7d7',\r\n    \r\n    ...commonGroupDef\r\n  }\r\n  \r\n  const Phase = {\r\n    CDef: 'Event',\r\n    AcceptDef: 'Event',\r\n    \r\n    Class: 'time-grid-phase',\r\n    Color: '#f0f0f0',\r\n    \r\n    ...commonGroupDef\r\n  }\r\n  \r\n  const eventCalcOrder = [\r\n    'nameClass',\r\n    '_tftHours',\r\n    '_plannedDepth',\r\n    '_plannedDepthClass',\r\n    '_actualDepth',\r\n    '_actualDepthClass',\r\n    '_eventDuration',\r\n    '_start',\r\n    '_startClass',\r\n    '_end'\r\n  ]\r\n  \r\n  const Event = {\r\n    AcceptDef: '',\r\n    \r\n    CalcOrder: eventCalcOrder.join()\r\n  }\r\n  \r\n  return { Well, Phase, Event }\r\n}\r\n","export default {\n  Cfg: {\n    AutoUpdate: 0,\n    Undo: 32,\n    NoVScroll: 1,\n    FastGantt: 1,\n    GanttStyle: 'Standard',\n    Detail: 1\n  },\n  Zoom: [\n    {\n      Name: \"months\",\n      GanttUnits: \"d\",\n      GanttWidth: \"50\", // 1 day equal 50px\n      GanttDragUnits: 'h',\n      GanttChartRound: \"d\",\n      GanttHeader1: \"M#MMMM yyyy\"\n    },\n    {\n      Name: \"days\",\n      GanttUnits: \"h\",\n      GanttWidth: \"8\", // 1 hour equal 8px\n      GanttDragUnits: 'm',\n      GanttChartRound: \"d\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h6#HH\"\n    },\n    {\n      Name: \"hours\",\n      GanttUnits: \"h\",\n      GanttWidth: \"25\", // 1 hour equal 25px\n      GanttDragUnits: 'm',\n      GanttChartRound: \"h\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h#HH\"\n    },\n    {\n      Name: \"minutes\",\n      GanttUnits: \"m\",\n      GanttWidth: \"2\", // 1 minute equal 2px\n      GanttDragUnits: 's',\n      GanttChartRound: \"h\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h#HH\",\n      GanttHeader3: \"m15#mm\"\n    }\n  ],\n  Toolbar: {\n    Visible: 0,\n    Cells05: \"Zoom\",\n    ZoomType: \"SelectGanttZoom\",\n    ZoomWidth: \"90\"\n  }\n}\n","import dataService from '../../db/dataService'\nimport createColNames from './create-col-name'\n\nexport default () => {\n  const events = dataService.getOnlyEventsAux()\n  const mainHeader = {\n    id: 'Header',\n    Spanned: 1\n  }\n  \n  const upHeader = {\n    Kind: 'Header'\n  }\n  \n  events.forEach((event, i) => {\n    const colName = createColNames.startColName(event)\n    Object.assign(mainHeader, {\n      [colName]: event.name,\n      [`${colName}Span`]: 2\n    })\n    \n    Object.assign(upHeader, {\n      [createColNames.startColName(event)]: 'Start',\n      [createColNames.endColName(event)]: 'End'\n    })\n  })\n  \n  return [mainHeader, upHeader]\n}\n","import merge from 'lodash/merge'\r\nimport set from 'lodash/set'\r\nimport deepClone from '../../helpers/deep-clone'\r\n\r\nconst convertValue = value => {\r\n  if (value === '') return value\r\n  \r\n  if (value === '0') return 0\r\n  \r\n  return +value || value\r\n}\r\n\r\nclass DataListManager {\r\n  // symbol vars for ignoring JSON.stringify\r\n  static parent = Symbol('parent')\r\n  \r\n  static next = Symbol('next')\r\n  \r\n  static prev = Symbol('prev')\r\n  \r\n  static indexWithinParent = Symbol('indexWithinParent')\r\n  \r\n  #list\r\n  \r\n  #data\r\n  \r\n  nestedKey = ''\r\n  \r\n  constructor(data, nestedKey) {\r\n    const dataClone = deepClone(data)\r\n    this.nestedKey = nestedKey\r\n    \r\n    // TODO: fix flatting for more than one well. Now it works just for two levels\r\n    // nextParent is defined wrong.\r\n    function flatArrById(arr, list, parent = null, nextParent = null) {\r\n      let i = 0\r\n      while (i < arr.length) {\r\n        const item = arr[i++]\r\n        const hasChildren = nestedKey && item[nestedKey] && item[nestedKey].length > 0\r\n        \r\n        if (hasChildren) {\r\n          // eslint-disable-next-line prefer-destructuring\r\n          item[DataListManager.next] = item[nestedKey][0] // get first child\r\n        } else {\r\n          item[DataListManager.next] = arr[i] ? arr[i] : nextParent // get sibling item or next parent\r\n        }\r\n        \r\n        item[DataListManager.parent] = parent\r\n        item[DataListManager.prev] = arr[i - 2] ? arr[i - 2] : parent\r\n        item[DataListManager.indexWithinParent] = i - 1\r\n        list.set(item.id, item)\r\n        \r\n        if (hasChildren) {\r\n          flatArrById(item[nestedKey], list, item, arr[i])\r\n        }\r\n      }\r\n      \r\n      return list\r\n    }\r\n    \r\n    this.#data = dataClone\r\n    this.#list = flatArrById(dataClone, new Map())\r\n  }\r\n  \r\n  get data() {\r\n    return deepClone(this.#data)\r\n  }\r\n  \r\n  /**\r\n   * Get future index for inserting item. choose between nextIndex or prevIndex\r\n   * @param nextId - uid\r\n   * @param prevId - uid\r\n   * @returns {number}\r\n   * @private\r\n   */\r\n  _getFutureIndex(nextId, prevId) {\r\n    const next = this.getItem(nextId)\r\n    const prev = this.getItem(prevId)\r\n    \r\n    if (next) {\r\n      return next[DataListManager.indexWithinParent]\r\n    }\r\n    \r\n    if (prev) {\r\n      return prev[DataListManager.indexWithinParent] + 1\r\n    }\r\n    \r\n    return 0\r\n  }\r\n  \r\n  /**\r\n   * Returns parent's array for child item\r\n   * @param parent\r\n   * @returns {Array}\r\n   * @private\r\n   */\r\n  _getParentArr(parent) {\r\n    if (parent) {\r\n      parent[this.nestedKey] = parent[this.nestedKey] || []\r\n      return parent[this.nestedKey]\r\n    }\r\n    \r\n    return this.#data\r\n  }\r\n  \r\n  /**\r\n   * Add child to array and update their index\r\n   * @param parent\r\n   * @param index\r\n   * @param item\r\n   * @private\r\n   */\r\n  _setChildToParent(parent, index, item) {\r\n    const arr = this._getParentArr(parent)\r\n    \r\n    arr.splice(index, 0, item)\r\n    this._updateIndexWithinParent(arr)\r\n  }\r\n  \r\n  _updateIndexWithinParent(arr) {\r\n    let i = 0\r\n    while (i < arr.length) {\r\n      const item = this.#list.get(arr[i++].id)\r\n      item[DataListManager.indexWithinParent] = i - 1\r\n    }\r\n  }\r\n  \r\n  getItem(id) {\r\n    return this.#list.get(id)\r\n  }\r\n  \r\n  hasItem(id) {\r\n    return this.#list.has(id)\r\n  }\r\n  \r\n  /**\r\n   * Remove item from parent or from parent & list\r\n   * @param id\r\n   * @param isTotally{Boolean}\r\n   */\r\n  removeItem(id, isTotally = true) {\r\n    if (!this.hasItem(id)) {\r\n      return\r\n    }\r\n    \r\n    const item = this.getItem(id)\r\n    const parent = item[DataListManager.parent]\r\n    const index = item[DataListManager.indexWithinParent]\r\n    \r\n    // remove item from list\r\n    if (isTotally) this.#list.delete(id)\r\n    \r\n    const arr = this._getParentArr(parent)\r\n    \r\n    arr.splice(index, 1)\r\n    this._updateIndexWithinParent(arr)\r\n  }\r\n  \r\n  addItem(id, parentId, nextId, prevId, item) {\r\n    if (this.hasItem(id)) {\r\n      this.moveItem(id, parentId, nextId, prevId)\r\n      return\r\n    }\r\n    \r\n    const parent = this.getItem(parentId)\r\n    const index = this._getFutureIndex(nextId, prevId)\r\n    const convertedItem = DataListManager.convertItemKeys(item)\r\n    // update list\r\n    this.#list.set(id, convertedItem)\r\n    \r\n    // set parent\r\n    convertedItem[DataListManager.parent] = parent\r\n    \r\n    this._setChildToParent(parent, index, convertedItem)\r\n  }\r\n  \r\n  moveItem(id, parentId, nextId, prevId) {\r\n    const item = this.getItem(id)\r\n    const parent = this.getItem(parentId)\r\n    const index = this._getFutureIndex(nextId, prevId)\r\n    \r\n    // remove item from old parent\r\n    this.removeItem(id, false)\r\n    \r\n    // change parent\r\n    item[DataListManager.parent] = parent\r\n    \r\n    this._setChildToParent(parent, index, item)\r\n  }\r\n  \r\n  updateItem(id, data) {\r\n    if (!this.hasItem(id)) {\r\n      return\r\n    }\r\n    \r\n    const item = this.getItem(id)\r\n    const convertedData = DataListManager.convertItemKeys(data)\r\n    merge(item, convertedData)\r\n  }\r\n  \r\n  static convertItemKeys(item) {\r\n    // TODO: change after model structure concern\r\n    return Object.entries(item).reduce((acc, [key, value]) => {\r\n      if (/^_|^f_|^[A-Z]_|Click|Error/.test(key) && !/Span$/.test(key)) return acc // ignore temp keys\r\n      \r\n      value = convertValue(value) // TODO: replace to TReeGrid config. convert to number.\r\n      \r\n      set(acc, key, value)\r\n      return acc\r\n    }, {})\r\n  }\r\n}\r\n\r\nexport { DataListManager, DataListManager as default }\r\n","import { GANTT_COL_NAME } from './create-col-name'\n\nconst cols = [\n  {\n    Name: 'Text',\n    CanSort: 0\n  },\n  {\n    Name: 'Start',\n    Type: 'Date',\n    MinWidth: 80,\n    CanSort: 0\n  },\n  {\n    Name: 'Duration',\n    Type: 'Float',\n    MinWidth: 80,\n    CanSort: 0\n  },\n  {\n    Name: 'End',\n    Type: 'Date',\n    MinWidth: 80,\n    CanSort: 0,\n    Formula: 'Start + Duration * 1000 * 60 * 60'\n  }\n]\n\nfunction getPopupGridBody(cellValue) {\n  return Function(`return ${cellValue}`)()\n}\n\nclass RunColEditor {\n  constructor({ id, colName = 'events' } = {}) {\n    this.gridId = id\n    this.colName = colName\n  }\n  \n  createPopupLayout = cellValue => {\n    const body = getPopupGridBody(cellValue)\n    console.log(body)\n    return {\n      Toolbar: {\n        Cells: 'Cancel,Ok',\n        \n        AddOnClick: 'AddRowEnd',\n        \n        Cancel: 'Cancel',\n        CancelButton: 'Button',\n        CancelOnClick: 'Grid.ParentDialog.Close(); return 1;',\n        \n        Ok: 'Save',\n        OkButton: 'Button',\n        OkOnClick: `Grids[\"${this.gridId}\"].Component.props.handleRunEditorSave(Grid); Grid.ParentDialog.Close(); return 1;`\n      },\n      Cols: cols,\n      Body: [body]\n    }\n  }\n  \n  onStartEdit = (grid, row, col) => {\n    const cellValue = grid.GetValue(row, this.colName)\n    return grid.ShowPopupGrid(row, col, this.createPopupLayout(cellValue))\n  }\n  \n  onSave = grid => {\n    if (!grid.HasChanges()) return\n    grid.EndEdit(1) // Finishes editing if any http://www.treegrid.com/Doc/CellEdit.htm?Mark=EndEdit#EndEdit\n    \n    const { Row } = grid.ParentDialog\n    const mainGrid = grid.ParentGrid\n    const changes = JSON.parse(grid.GetChanges()).Changes\n    changes.forEach(row => {\n      const box = mainGrid.GetGanttRunBox(Row, GANTT_COL_NAME, row.id)\n      console.log(box, row)\n      console.log(mainGrid.SetGanttRunBox(Object.assign(box, row)))\n    })\n  }\n}\n\nexport default RunColEditor\n","import React, { useEffect, useRef, useMemo } from 'react'\nimport TreeGridComponent from '../../components/TreeGridComponent'\nimport createLayout from './create-layout'\nimport createBody from './create-body'\nimport dataService from '../../db/dataService'\nimport DataListManager from './DataListManager'\nimport last from 'lodash/last'\nimport RunColEditor from './RunColEditor'\n\nconst GRID_ID = 'GANTT'\n\nconst { TGAddEvent } = window\n\nconst TreeGridGant = () => {\n  const runEditor = useRef(new RunColEditor({ id: 'GANTT' }))\n  const layout = useMemo(() => createLayout(), [])\n  const body = useMemo(() => createBody(), [])\n  let dialog = null\n  let inputEl = null\n  \n  const handleRunColStartEdit = (...args) => runEditor.current.onStartEdit(...args)\n  const handleRunEditorSave = (...args) => runEditor.current.onSave(...args)\n  // useEffect(() => {\n  //   TGAddEvent('OnDragGanttRun', GRID_ID, (grid, row, col, index, start, newData, oldData, change, dir, XY, keyPrefix, X, Y) => {\n  //     const date = new Date(newData).toString().substr(0, 21)\n  //     if (dialog) {\n  //       inputEl = dialog.Tag.getElementsByTagName(\"input\")[0]\n  //       inputEl.value = date\n  //       return\n  //     }\n  //\n  //     dialog = window.ShowDialog(\n  //       {\n  //         Body: `<div style=\"display: flex; align-items: center;\">\n  //           <input type=\"text\" style=\"width: 140px\" value=\"${date}\">\n  //           <button class=\"TSDateRight date\" style=\"background-color: transparent;border: 0;width: 20px;height: 20px;padding: 0;cursor: pointer;\"></button>\n  //           <button class=\"close\" style=\"background-color: transparent;border: 0;width: 20px;height: 20px;padding: 0;cursor: pointer;\">x</button>\n  //         </div>`\n  //       },\n  //       {\n  //         X, Y: Y + 12\n  //       }\n  //     )\n  //\n  //     const buttonEl = dialog.Tag.getElementsByClassName(\"date\")[0]\n  //     const closeButtonEl = dialog.Tag.getElementsByClassName(\"close\")[0]\n  //\n  //     closeButtonEl.addEventListener(\"click\", () => {\n  //       dialog.Close();\n  //       dialog = null\n  //     })\n  //\n  //     buttonEl.addEventListener(\"click\", () => {\n  //       window.ShowCalendar(\n  //         {\n  //           Date: newData,\n  //           HeadClose: 1,\n  //           TimeFormat: 'HH:mm',\n  //           OnSave(d) {\n  //             inputEl.value = new Date(d).toString().substr(0, 21)\n  //           }\n  //         },\n  //         {\n  //           X, Y\n  //         }\n  //       )\n  //     })\n  //   })\n  //\n  //   TGAddEvent('OnEndDragGanttRun', GRID_ID, (grid, row, col, index, start, newData) => {\n  //     // dialog.Close()\n  //     // dialog = null\n  //   })\n  // }, [])\n  \n  const onDataChanged = (newData) => {\n    // const dataManager = new DataListManager(dataService.data.PhasesAux, 'Items')\n    \n    newData.forEach(row => {\n      let { events, CanEdit, id: gridID } = row\n      \n      const grid = window.Grids[gridID]\n      if (!grid) return\n      \n      grid.StartUpdate()\n      \n      if (CanEdit === 0) return\n      \n      if (typeof events === 'string') {\n        events = Function(`return ${events}`)()\n      }\n      events.forEach(({ Id, Start, Duration, Text, State }) => {\n        if (!State) return\n        \n        const _row = grid.GetRowById(Id)\n        \n        grid.SetValue(_row, 'start', +new Date(Start))\n        grid.SetValue(_row, 'hours', +Duration)\n        grid.SetValue(_row, 'name', Text)\n        \n        // dataManager.updateItem(Id, {\n        //   start: +new Date(Start),\n        //   hours: Duration,\n        //   name: Text\n        // })\n      })\n      \n      grid.EndUpdate()\n    })\n    \n    // dataService.save('PhasesAux', dataManager.data)\n  }\n  \n  return <TreeGridComponent id={GRID_ID} ganttRunKey={'events'} layout={layout} body={body}\n                            onDataChanged={onDataChanged} handleRunEditorSave={handleRunEditorSave}\n                            handleRunColStartEdit={handleRunColStartEdit}/>\n}\n\nexport default TreeGridGant\n","import createCols from './create-cols'\nimport createLeftCols from './create-left-cols'\nimport mergeLayouts from '../../components/TreeGridComponent/utils/merge-layouts'\nimport staticLayout from './static-layout'\nimport createSolid from './create-solid'\nimport dataService from '../../db/dataService'\nimport createHead from './create-head'\n\nexport default () => {\n  const dynamicLayout = {\n    Head: createHead(),\n    Cols: createCols(),\n    LeftCols: createLeftCols(),\n    Solid: createSolid(dataService.getStartTime())\n  }\n  \n  return mergeLayouts(staticLayout, dynamicLayout)\n}\n","import dataService from '../../db/dataService'\nimport createColNames, { GANTT_COL_NAME } from './create-col-name'\n\nexport default () => {\n  const cols = []\n  \n  const ganttCol = {\n    Name: GANTT_COL_NAME,\n    Type: 'Gantt',\n    GanttZoom: 'days',\n    GanttDataUnits: 'h',\n    \n    // Main settings\n    GanttCount: 10,\n    \n    // Run settings\n    GanttRunSave: 2,\n    GanttRun: 'events',\n    GanttRunAdjust: 'Shrink'\n  }\n  \n  // dataService.getOnlyEvents().forEach((event,i) => {\n  //   cols.push({\n  //       Name: createColNames.getColNameWithIndex('GanttStart', i),\n  //       Format: 'yyyy-M-d H:mm',\n  //       Type: 'Date',\n  //       Width: 80\n  //     },\n  //     {\n  //       Name: createColNames.getColNameWithIndex('GanttEnd', i),\n  //       Format: 'yyyy-M-d H:mm',\n  //       Type: 'Date',\n  //       Width: 80\n  //     })\n  // })\n  \n  return [ganttCol]\n}\n","export default () => {\n  return [\n    {\n      Name: 'title',\n      Visible: 0\n    },\n    {\n      Name: 'events',\n      Width: 80,\n      Visible: 0,\n      Button: 'Enum',\n      OnClick: 'Focus,Grid.Component.props.handleRunColStartEdit(Grid,Row, Col)'\n    }\n  ]\n}\n","export default (OperationStartDate) => {\r\n  const topBar = {\r\n    id: 'topBar',\r\n    Space: -1,\r\n    Cells: 'OperationStartDate',\r\n    \r\n    // OperationStartDate cell settings\r\n    OperationStartDate,\r\n    OperationStartDateLabel: 'Start operation: ',\r\n    OperationStartDateWidth: 120,\r\n    OperationStartDateFormat: 'yyyy-M-d H:mm',\r\n    OperationStartDateType: 'Date',\r\n    OperationStartDateRecalc: 256,\r\n    OperationStartDateOnChange: 'Grid.Component.props.handleOperationStartDateChange(Grid,Value)'\r\n  }\r\n  \r\n  return []\r\n}\r\n","import React, { Component } from 'react'\r\nimport deepClone from '../../helpers/deep-clone'\r\nimport TimeTrackerGrid from './TimeTrackerGrid'\r\nimport dataService from '../../db/dataService'\r\nimport TreeGridGantt from '../TreeGridGantt'\r\n\r\nconst { TGSetEvent } = window\r\n\r\nconst convertValue = value => {\r\n  if (value === '') return value\r\n  \r\n  if (value === '0') return 0\r\n  \r\n  return +value || value\r\n}\r\n\r\nconst keysMap = {\r\n  start: ['Start', (v) => v],\r\n  hours: ['Duration', (v) => v * 60 * 60 * 1000],\r\n  name: ['Text', (v) => v]\r\n}\r\n\r\nclass TimeTracker extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      DerrickType: 1,\r\n      Phases: this.prepareState(dataService.data.Phases),\r\n      PhasesAux: this.prepareState(dataService.data.PhasesAux),\r\n      OperationStartDate: dataService.getStartTime()\r\n    }\r\n    \r\n    TGSetEvent('OnSave', 'TimeTrackerAux', (grid) => {\r\n      const { Changes } = JSON.parse(grid.GetChanges())\r\n      const ganttGrid = window.Grids.GANTT\r\n      const row = ganttGrid.GetRowById('TimeTrackerAux')\r\n      \r\n      Changes.forEach(change => {\r\n        const box = ganttGrid.GetGanttRunBox(row, 'G', change.id)\r\n        \r\n        Object.entries(change).forEach(([key, value]) => {\r\n          const mapper = keysMap[key]\r\n          if (!mapper) return\r\n          const [boxKey, fn] = mapper\r\n          \r\n          box[boxKey] = fn(value)\r\n        })\r\n        box.End = null\r\n        console.log(ganttGrid.SetGanttRunBox(box, 'Resize'))\r\n      })\r\n    })\r\n  }\r\n  \r\n  prepareState(data) {\r\n    const wells = deepClone(data)\r\n    const defs = ['Well', 'Phase', 'Event']\r\n    const reCalc = [3, 3, 256]\r\n    \r\n    function addRowDefinitions(row, level = 0) {\r\n      row.Def = defs[level]\r\n      row.Recalc = reCalc[level]\r\n      \r\n      if (row.Items) {\r\n        row.Items.forEach(row => addRowDefinitions(row, level + 1))\r\n      }\r\n    }\r\n    \r\n    wells.forEach(row => addRowDefinitions(row, 0))\r\n    return wells\r\n  }\r\n  \r\n  onDataChanged = (newData, key) => {\r\n    this.setState(\r\n      { [key]: newData },\r\n      () => {\r\n        dataService.save(key, newData)\r\n      }\r\n    )\r\n  }\r\n  \r\n  handleOperationStartDateChange = (grid, value) => {\r\n    this.setState({ OperationStartDate: value })\r\n  }\r\n  \r\n  handleDerrickTypeChange = (grid, value) => {\r\n    this.setState({ DerrickType: value })\r\n  }\r\n  \r\n  render() {\r\n    const { DerrickType, Phases, PhasesAux, OperationStartDate } = this.state\r\n    \r\n    return (\r\n      <div className=\"time-grid-view\">\r\n        <TreeGridGantt/>\r\n        \r\n        <div id=\"timeGridTopBar\" className=\"time-grid-view__top-bar\"/>\r\n        \r\n        <div className=\"time-grid-view__grids\">\r\n          <TimeTrackerGrid\r\n            id=\"TimeTrackerMain\"\r\n            body={Phases}\r\n            DerrickType={DerrickType}\r\n            OperationStartDate={OperationStartDate}\r\n            handleDerrickTypeChange={this.handleDerrickTypeChange}\r\n            handleOperationStartDateChange={this.handleOperationStartDateChange}\r\n            onDataChanged={(data) => this.onDataChanged(data, 'Phases')}\r\n          />\r\n          \r\n          {DerrickType ? <TimeTrackerGrid\r\n            id=\"TimeTrackerAux\"\r\n            isAux={true}\r\n            body={PhasesAux}\r\n            DerrickType={DerrickType}\r\n            OperationStartDate={OperationStartDate}\r\n            onDataChanged={(data) => this.onDataChanged(data, 'PhasesAux')}\r\n          /> : ''}\r\n        </div>\r\n      \r\n      \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TimeTracker\r\n","export default {\n  Cfg: {\n    Dragging: 1,\n    HideZero: 1,\n    Size: 'Small',\n    ShowDeleted: 0,\n    AutoSort: 0,\n    RowIndex: 'Pos',\n    Filtered: 0,\n    RoundNumbers: 1,\n    RoundNumbersDigits: 2,\n    ExportType: 'Expanded,Outline,Indent,ForceBorder,TextType,Strings,FixedRows,Size',\n    PrintPageOrientation: 1,\n    PrintPageSize: 7,\n    Undo: 32,\n    ColPaging: 2,\n    NoVScroll: 1,\n    Alternate: 2,\n    AutoUpdate: 1\n  },\n  Def: {\n    Comment: {\n      CanEdit: 0,\n      CanCopy: 0,\n      CanDelete: 0,\n      CanSelect: 0,\n      CanDrag: 0\n    }\n  },\n  Toolbar: {\n    Cells30Manipulate: 'Undo,Redo',\n    Cells20Data: 'Print,ExportPDF,Export,Columns',\n    Cells60Cfg: 'Help'\n  },\n  Panel: {\n    Select: 1,\n    Copy: 1,\n    Delete: 1,\n    Move: 1\n  },\n  MenuExport: {\n    Items: 'ColsCaption,Cols,RowsCaption,OptionsCaption,Options',\n    Attribute: 'CanExport',\n    HideUnused: 1\n  },\n  MenuPrint: {\n    Items: 'ColsCaption,Cols,SpaceCaption,RowsCaption,OptionsCaption,Options,SizeCaption,Size',\n    Attribute: 'CanPrint',\n    HideUnused: '1'\n  }\n}\n","export const COLS = ['in', 'out', 'onboard']\n","import { COLS } from './constants'\n\nexport default (days) => {\n  \n  return [\n    {\n      Name: 'prior'\n    },\n    ...days.map(day => COLS.map(col => ({ Name: `${day}_${col}`, Width: 60 }))).flat()\n  ]\n}\n","import random from 'lodash/random';\nimport { loremIpsum } from 'lorem-ipsum'\nimport { COLS } from './constants'\n\nexport default (days) => {\n  const daysHeader = {\n    Kind: 'Header',\n    Spanned: 1,\n    \n    name: 'Name',\n    nameAlign: 'Center'\n  }\n  \n  const companiesHeader = {\n    Kind: 'Header'\n  }\n  \n  const commentRow = {\n    Def: 'Comment',\n    Spanned: 1,\n    name: 'Comments',\n    nameAlign: 'Center',\n    nameVertAlign: 'middle',\n    nameRowSpan: 10\n  }\n  \n  days.forEach(day => {\n    const colName = `${day}_in`\n    \n    Object.assign(daysHeader, {\n      [colName]: day.replaceAll('_', '-'),\n      [`${colName}Span`]: 3,\n      [`${colName}Align`]: 'Center'\n    })\n    \n    COLS.forEach(col => Object.assign(companiesHeader, {\n      [`${day}_${col}`]: col.toUpperCase(),\n      [`${day}_${col}Align`]: 'Center'\n    }))\n    \n    Object.assign(commentRow, {\n      [`${colName}Span`]: 3\n    })\n  })\n  \n  const comments = Array.from({ length: 10 }).map(() => ({ ...commentRow }))\n  \n  days.forEach(day => {\n    const rowIndex = random(0, 9)\n    const row = comments[rowIndex]\n    \n    row[`${day}_in`] = loremIpsum()\n  })\n  \n  return [daysHeader, ...comments, daysHeader, { ...companiesHeader, id: 'Header' }]\n}\n","export default days => {\n  const toComment = { Pos: 'To', Spanned: 1 }\n  const fromComment = { Pos: 'From', Spanned: 1 }\n  \n  days.forEach(day => {\n    const colName = `${day}_in`\n    \n    Object.assign(toComment, {\n      [`${colName}Span`]: 3\n    })\n  \n    Object.assign(fromComment, {\n      [`${colName}Span`]: 3\n    })\n  })\n  \n  return [toComment, fromComment]\n}\n","import mergeLayouts from '../../components/TreeGridComponent/utils/merge-layouts'\nimport staticLayout from './static-layout'\nimport createColumns from './create-columns'\nimport createHead from './create-head'\nimport createFoot from './create-foot'\nimport dataService from '../../db/dataService'\nimport createLeftColumns from './create-left-columns'\n\nexport default () => {\n  const days = dataService.getDays()\n  \n  const dynamicLayout = {\n    Foot: createFoot(days),\n    Head: createHead(days),\n    LeftCols: createLeftColumns(),\n    Cols: createColumns(days)\n  }\n  \n  return mergeLayouts(staticLayout, dynamicLayout)\n}\n","export default () => {\n  return [\n    {\n      Name: 'name',\n      Spanned: 1\n    }\n  ]\n}\n","import React, { useMemo, useState } from 'react'\nimport createLayout from './create-layout'\nimport TreeGridComponent from '../../components/TreeGridComponent'\nimport dataService from '../../db/dataService'\n\nconst GRID_ID = 'Companies'\n\nconst Companies = () => {\n  const [body, setBody] = useState(dataService.getCompanies())\n  const layout = useMemo(createLayout, [])\n  \n  const onDataChanged = (newData) => {\n    setBody(newData)\n    dataService.save('Companies', newData)\n  }\n  \n  return <TreeGridComponent id={GRID_ID} layout={layout} onDataChanged={onDataChanged}\n                            body={body}/>\n}\n\nexport default Companies\n","import React, { useState } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport dataService from '../../db/dataService'\n\nrequire('highcharts/modules/gantt')(Highcharts)\nrequire('highcharts/modules/draggable-points')(Highcharts)\n\nconst HighchartGant = () => {\n  var today = new Date(),\n    day = 1000 * 60 * 60 * 24;\n\n// Set to 00:00:00:000 today\n  today.setUTCHours(0);\n  today.setUTCMinutes(0);\n  today.setUTCSeconds(0);\n  today.setUTCMilliseconds(0);\n  today = today.getTime();\n  \n  let prevEvent = null\n  const start = dataService.getStartTime()\n  const collectEvents = (acc, item) => {\n    if (item.Items) {\n      item.Items.reduce((ac, item) => collectEvents(ac, item), acc)\n    } else {\n      item.end = (item.start || start) + (item.hours * 60 * 60 * 1000)\n      item.start = prevEvent ? prevEvent.end : start\n      item.y = 0\n      prevEvent = item\n      acc.push(item)\n    }\n    \n    return acc\n  }\n  \n  const events = dataService.getPhases().reduce((acc, item) => collectEvents(acc, item), [])\n  console.log(events)\n  \n  const [options] = useState({\n    title: {\n      text: 'Intraday jobs Scheduling'\n    },\n    xAxis: {\n      currentDateIndicator: true\n    },\n    \n    yAxis: {\n      categories: ['Main', 'Aux']\n    },\n    \n    plotOptions: {\n      series: {\n        dragDrop: {\n          draggableX: true,\n          dragMinY: 0,\n          dragMaxY: 2,\n          dragPrecisionX: 1000 * 60\n        },\n        dataLabels: {\n          enabled: true,\n          format: '{point.name}'\n        },\n        allowPointSelect: true,\n        point: {\n          events: {\n            drag(e) {\n              console.log(e)\n            }\n          }\n        }\n      }\n    },\n    \n    series: [{\n      name: 'Init M1, Import FIRT market data',\n      data: events\n    }]\n  })\n  \n  return (\n    <HighchartsReact\n      containerProps={{ style: { height: '100%' } }}\n      highcharts={Highcharts}\n      constructorType='ganttChart'\n      options={options}\n    />\n  )\n}\n\nexport default HighchartGant\n","export default {\n  Cfg: {\n    AutoUpdate: 1,\n    MainCol: 'name',\n    Size: 'Small',\n    GanttStyle: 'Standard'\n  },\n  Def: {\n    Well: {\n      GANTTGanttClass: 'Blue',\n      Calculated: 1,\n      startFormula: 'ganttstart()',\n      endFormula: 'ganttend()'\n    },\n    Phase: {\n      GANTTGanttClass: 'Aqua',\n      Calculated: 1,\n      startFormula: 'ganttstart()',\n      endFormula: 'ganttend()'\n    },\n    R: {\n      DefEmpty: 'R',\n      DefParent: 'Sum'\n    }\n  },\n  Zoom: [\n    {\n      Name: \"months\",\n      GanttUnits: \"d\",\n      GanttWidth: \"50\", // 1 day equal 50px\n      GanttDragUnits: 'h',\n      GanttChartRound: \"d\",\n      GanttHeader1: \"M#MMMM yyyy\"\n    },\n    {\n      Name: \"days\",\n      GanttUnits: \"h\",\n      GanttWidth: \"8\", // 1 hour equal 8px\n      GanttDragUnits: 'm',\n      GanttChartRound: \"d\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h6#HH\"\n    },\n    {\n      Name: \"hours\",\n      GanttUnits: \"h\",\n      GanttWidth: \"25\", // 1 hour equal 25px\n      GanttDragUnits: 'm',\n      GanttChartRound: \"h\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h#HH\"\n    },\n    {\n      Name: \"minutes\",\n      GanttUnits: \"m\",\n      GanttWidth: \"2\", // 1 minute equal 2px\n      GanttDragUnits: 's',\n      GanttChartRound: \"h\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h#HH\",\n      GanttHeader3: \"m15#mm\"\n    }\n  ],\n  Toolbar: {\n    Cells05: \"Zoom\",\n    ZoomType: \"SelectGanttZoom\",\n    ZoomWidth: \"90\"\n  }\n}\n","import dataService from '../../db/dataService'\n\nconst CLASSES = ['Aqua', 'Blue', 'Fuchsia', 'Gray', 'Green', 'Lime', 'Maroon', 'Navy', 'Olive', 'Orange', 'Purple', 'Red', 'Silver', 'Teal', 'White', 'Yellow']\n\nconst WELL_LEVEL = 0\nconst PHASE_LEVEL = 1\nconst EVENT_LEVEL = 2\n\nconst create = (deepArr, settings = {}) => {\n  let prevEvent = null\n  const collector = (item, level = 0) => {\n    const newItem = {\n      id: item.id,\n      name: item.name,\n      Class: CLASSES[level],\n      ...settings\n    }\n    \n    if (item.Items) {\n      newItem.Def = level ? 'Phase' : 'Well'\n      newItem.Items = item.Items.map(item => collector(item, ++level))\n    } else {\n      newItem.start = item.start\n      newItem.end = item.end\n      if (prevEvent) {\n        prevEvent.descendants = newItem.id\n      }\n      newItem.ancestors = prevEvent?.id\n      prevEvent = newItem\n    }\n    \n    return newItem\n  }\n  \n  \n  return deepArr.map(item => collector(item))\n}\n\nexport default () => {\n  return create(dataService.getPhases())\n}\n","import merge from 'lodash/merge'\r\nimport set from 'lodash/set'\r\nimport deepClone from '../../helpers/deep-clone'\r\n\r\nconst convertValue = value => {\r\n  if (value === '') return value\r\n  \r\n  if (value === '0') return 0\r\n  \r\n  return +value || value\r\n}\r\n\r\nclass DataListManager {\r\n  // symbol vars for ignoring JSON.stringify\r\n  static parent = Symbol('parent')\r\n  \r\n  static next = Symbol('next')\r\n  \r\n  static prev = Symbol('prev')\r\n  \r\n  static indexWithinParent = Symbol('indexWithinParent')\r\n  \r\n  #list\r\n  \r\n  #data\r\n  \r\n  nestedKey = ''\r\n  \r\n  constructor(data, nestedKey) {\r\n    const dataClone = deepClone(data)\r\n    this.nestedKey = nestedKey\r\n    \r\n    // TODO: fix flatting for more than one well. Now it works just for two levels\r\n    // nextParent is defined wrong.\r\n    function flatArrById(arr, list, parent = null, nextParent = null) {\r\n      let i = 0\r\n      while (i < arr.length) {\r\n        const item = arr[i++]\r\n        const hasChildren = nestedKey && item[nestedKey] && item[nestedKey].length > 0\r\n        \r\n        if (hasChildren) {\r\n          // eslint-disable-next-line prefer-destructuring\r\n          item[DataListManager.next] = item[nestedKey][0] // get first child\r\n        } else {\r\n          item[DataListManager.next] = arr[i] ? arr[i] : nextParent // get sibling item or next parent\r\n        }\r\n        \r\n        item[DataListManager.parent] = parent\r\n        item[DataListManager.prev] = arr[i - 2] ? arr[i - 2] : parent\r\n        item[DataListManager.indexWithinParent] = i - 1\r\n        list.set(item.id, item)\r\n        \r\n        if (hasChildren) {\r\n          flatArrById(item[nestedKey], list, item, arr[i])\r\n        }\r\n      }\r\n      \r\n      return list\r\n    }\r\n    \r\n    this.#data = dataClone\r\n    this.#list = flatArrById(dataClone, new Map())\r\n  }\r\n  \r\n  get data() {\r\n    return deepClone(this.#data)\r\n  }\r\n  \r\n  /**\r\n   * Get future index for inserting item. choose between nextIndex or prevIndex\r\n   * @param nextId - uid\r\n   * @param prevId - uid\r\n   * @returns {number}\r\n   * @private\r\n   */\r\n  _getFutureIndex(nextId, prevId) {\r\n    const next = this.getItem(nextId)\r\n    const prev = this.getItem(prevId)\r\n    \r\n    if (next) {\r\n      return next[DataListManager.indexWithinParent]\r\n    }\r\n    \r\n    if (prev) {\r\n      return prev[DataListManager.indexWithinParent] + 1\r\n    }\r\n    \r\n    return 0\r\n  }\r\n  \r\n  /**\r\n   * Returns parent's array for child item\r\n   * @param parent\r\n   * @returns {Array}\r\n   * @private\r\n   */\r\n  _getParentArr(parent) {\r\n    if (parent) {\r\n      parent[this.nestedKey] = parent[this.nestedKey] || []\r\n      return parent[this.nestedKey]\r\n    }\r\n    \r\n    return this.#data\r\n  }\r\n  \r\n  /**\r\n   * Add child to array and update their index\r\n   * @param parent\r\n   * @param index\r\n   * @param item\r\n   * @private\r\n   */\r\n  _setChildToParent(parent, index, item) {\r\n    const arr = this._getParentArr(parent)\r\n    \r\n    arr.splice(index, 0, item)\r\n    this._updateIndexWithinParent(arr)\r\n  }\r\n  \r\n  _updateIndexWithinParent(arr) {\r\n    let i = 0\r\n    while (i < arr.length) {\r\n      const item = this.#list.get(arr[i++].id)\r\n      item[DataListManager.indexWithinParent] = i - 1\r\n    }\r\n  }\r\n  \r\n  getItem(id) {\r\n    return this.#list.get(id)\r\n  }\r\n  \r\n  hasItem(id) {\r\n    return this.#list.has(id)\r\n  }\r\n  \r\n  /**\r\n   * Remove item from parent or from parent & list\r\n   * @param id\r\n   * @param isTotally{Boolean}\r\n   */\r\n  removeItem(id, isTotally = true) {\r\n    if (!this.hasItem(id)) {\r\n      return\r\n    }\r\n    \r\n    const item = this.getItem(id)\r\n    const parent = item[DataListManager.parent]\r\n    const index = item[DataListManager.indexWithinParent]\r\n    \r\n    // remove item from list\r\n    if (isTotally) this.#list.delete(id)\r\n    \r\n    const arr = this._getParentArr(parent)\r\n    \r\n    arr.splice(index, 1)\r\n    this._updateIndexWithinParent(arr)\r\n  }\r\n  \r\n  addItem(id, parentId, nextId, prevId, item) {\r\n    if (this.hasItem(id)) {\r\n      this.moveItem(id, parentId, nextId, prevId)\r\n      return\r\n    }\r\n    \r\n    const parent = this.getItem(parentId)\r\n    const index = this._getFutureIndex(nextId, prevId)\r\n    const convertedItem = DataListManager.convertItemKeys(item)\r\n    // update list\r\n    this.#list.set(id, convertedItem)\r\n    \r\n    // set parent\r\n    convertedItem[DataListManager.parent] = parent\r\n    \r\n    this._setChildToParent(parent, index, convertedItem)\r\n  }\r\n  \r\n  moveItem(id, parentId, nextId, prevId) {\r\n    const item = this.getItem(id)\r\n    const parent = this.getItem(parentId)\r\n    const index = this._getFutureIndex(nextId, prevId)\r\n    \r\n    // remove item from old parent\r\n    this.removeItem(id, false)\r\n    \r\n    // change parent\r\n    item[DataListManager.parent] = parent\r\n    \r\n    this._setChildToParent(parent, index, item)\r\n  }\r\n  \r\n  updateItem(id, data) {\r\n    if (!this.hasItem(id)) {\r\n      return\r\n    }\r\n    \r\n    const item = this.getItem(id)\r\n    const convertedData = DataListManager.convertItemKeys(data)\r\n    merge(item, convertedData)\r\n  }\r\n  \r\n  static convertItemKeys(item) {\r\n    // TODO: change after model structure concern\r\n    return Object.entries(item).reduce((acc, [key, value]) => {\r\n      if (/^_|^f_|^[A-Z]_|Click|Error/.test(key) && !/Span$/.test(key)) return acc // ignore temp keys\r\n      \r\n      value = convertValue(value) // TODO: replace to TReeGrid config. convert to number.\r\n      \r\n      set(acc, key, value)\r\n      return acc\r\n    }, {})\r\n  }\r\n}\r\n\r\nexport { DataListManager, DataListManager as default }\r\n","import React, { useEffect } from 'react'\nimport TreeGridComponent from '../../components/TreeGridComponent'\nimport createLayout from './create-layout'\nimport createBody from './create-body'\nimport dataService from '../../db/dataService'\nimport DataListManager from './DataListManager'\nimport last from 'lodash/last'\n\nconst GRID_ID = 'GANTT'\n\nconst { TGAddEvent } = window\n\nconst TreeGridGant = () => {\n  const layout = createLayout()\n  const body = createBody()\n  let dialog = null\n  let inputEl = null\n  \n  useEffect(() => {\n    TGAddEvent('OnDragGanttRun', GRID_ID, (grid, row, col, index, start, newData, oldData, change, dir, XY, keyPrefix, X, Y) => {\n      const date = new Date(newData).toString().substr(0, 21)\n      if (dialog) {\n        inputEl = dialog.Tag.getElementsByTagName(\"input\")[0]\n        inputEl.value = date\n        return\n      }\n      \n      dialog = window.ShowDialog(\n        {\n          Body: `<div style=\"display: flex; align-items: center;\">\n            <input type=\"text\" style=\"width: 140px\" value=\"${date}\">\n            <button class=\"TSDateRight date\" style=\"background-color: transparent;border: 0;width: 20px;height: 20px;padding: 0;cursor: pointer;\"></button>\n            <button class=\"close\" style=\"background-color: transparent;border: 0;width: 20px;height: 20px;padding: 0;cursor: pointer;\">x</button>\n          </div>`\n        },\n        {\n          X, Y: Y + 12\n        }\n      )\n      \n      const buttonEl = dialog.Tag.getElementsByClassName(\"date\")[0]\n      const closeButtonEl = dialog.Tag.getElementsByClassName(\"close\")[0]\n      \n      closeButtonEl.addEventListener(\"click\", () => {\n        dialog.Close();\n        dialog = null\n      })\n      \n      buttonEl.addEventListener(\"click\", () => {\n        window.ShowCalendar(\n          {\n            Date: newData,\n            HeadClose: 1,\n            TimeFormat: 'HH:mm',\n            OnSave(d) {\n              inputEl.value = new Date(d).toString().substr(0, 21)\n            }\n          },\n          {\n            X, Y\n          }\n        )\n      })\n    })\n    \n    TGAddEvent('OnEndDragGanttRun', GRID_ID, (grid, row, col, index, start, newData) => {\n      // dialog.Close()\n      // dialog = null\n    })\n  }, [])\n  \n  const onDataChanged = (newData) => {\n    const dataManager = new DataListManager(dataService.data.PhasesAux, 'Items')\n    \n    newData.forEach(row => {\n      let { events, CanEdit } = row\n      \n      if (!CanEdit) return\n      \n      if (typeof events === 'string') {\n        events = Function(`return ${events}`)()\n      }\n      \n      events.forEach(({ Id, Start, Duration, Text }) => {\n        dataManager.updateItem(Id, {\n          start: +new Date(Start),\n          hours: Duration,\n          name: Text\n        })\n      })\n    })\n    \n    dataService.save('PhasesAux', dataManager.data)\n  }\n  \n  return <TreeGridComponent id={GRID_ID} ganttRunKey={'events'} layout={layout} body={body}\n                            onDataChanged={onDataChanged}/>\n}\n\nexport default TreeGridGant\n","import createLeftCols from './create-left-cols'\nimport createCols from './create-cols'\nimport mergeLayouts from '../../components/TreeGridComponent/utils/merge-layouts'\nimport staticLayout from './static-layout'\nimport createSolid from './create-solid'\nimport dataService from '../../db/dataService'\n\nexport default () => {\n  const dynamicLayout = {\n    LeftCols: createLeftCols(),\n    Cols: createCols(dataService.getStartTime()),\n    Solid: createSolid(dataService.getStartTime())\n  }\n  \n  return mergeLayouts(staticLayout, dynamicLayout)\n}\n","export default (OperationStartDate) => {\r\n  const topBar = {\r\n    id: 'topBar',\r\n    Space: -1,\r\n    Cells: 'OperationStartDate',\r\n    \r\n    // OperationStartDate cell settings\r\n    OperationStartDate,\r\n    OperationStartDateLabel: 'Start operation: ',\r\n    OperationStartDateWidth: 120,\r\n    OperationStartDateFormat: 'yyyy-M-d H:mm',\r\n    OperationStartDateType: 'Date',\r\n    OperationStartDateRecalc: 256,\r\n    OperationStartDateOnChange: 'Grid.Component.props.handleOperationStartDateChange(Grid,Value)'\r\n  }\r\n  \r\n  return [topBar]\r\n}\r\n","export default () => {\n  return [\n    {\n      Name: 'id'\n    },\n    {\n      Name: 'name'\n    },\n    {\n      Name: 'start',\n      Type: 'Date'\n    },\n    {\n      Name: 'end',\n      Type: 'Date'\n    },\n    {\n      Name: 'descendants',\n      Range: 1\n    },\n    {\n      Name: 'ancestors',\n      Range: 1\n    }\n  ]\n}\n","export default (start) => {\n  return [\n    {\n      Name: 'GANTT',\n      Type: 'Gantt',\n      GanttZoom: 'days',\n      GanttRunSave: 2,\n      GanttDataUnits: 'h',\n      GanttStart: \"start\",\n      GanttEnd: \"end\",\n      GanttRunAdjust: 'Shrink',\n      GanttHtml: \"*name*\",\n      GanttTip: \"*name*\",\n      // GanttDescendants: \"descendants\",\n      GanttAncestors: \"ancestors\",\n      GanttTask: \"All,Box\",\n      \n      GanttMarkIncorrectDependencies: \"2\",\n      GanttMarkDisabledDependencies: \"2\",\n      GanttCorrectDependencies: \"0\",\n      GanttDragDependenciesBetween: \"2\",\n      GanttAssignDependencies: \"1\"\n    }\n  ]\n}\n","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport NavBar from './components/NavBar'\r\n\r\nimport TimeTracker from './views/TimeTracker'\r\nimport Companies from './views/Companies'\r\nimport HighchartsGant from './views/HighchartGant'\r\nimport TreeGridGantt from './views/TreeGridGantt'\r\nimport TreeGridGanttV2 from './views/TreeGridGanttV2'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\n\r\n\r\nclass Sample extends Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n        <NavBar/>\r\n        <div className=\"views-container\">\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <TimeTracker/>\r\n            </Route>\r\n            \r\n            <Route path=\"/companies\">\r\n              <Companies/>\r\n            </Route>\r\n            \r\n            <Route path=\"/highcharts-gant\">\r\n              <HighchartsGant/>\r\n            </Route>\r\n            \r\n            <Route path=\"/tree-grid-gant\">\r\n              <TreeGridGantt/>\r\n            </Route>\r\n            \r\n            <Route path=\"/tree-grid-gant-v2\">\r\n              <TreeGridGanttV2/>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sample\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nconst root = document.getElementById('root')\r\nif (root) {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App/>\r\n    </React.StrictMode>,\r\n    root\r\n  );\r\n}\r\n","export default {\n  Cfg: {\n    FocusRect: 1,\n    SelectingCells: 2,\n    SelectingFocus: 1,\n  \n    CopyCols: 0,\n    PasteFocused: 4,\n    \n    ShowDeleted: 0,\n    NoVScroll: 0\n  },\n  Actions: {\n    OnCtrlDragRow: 'DragSelected',\n    OnDragRow: 'FocusCells',\n    OnDel: '!StartEditEmpty' // prevent delete rows on del button pressing\n  },\n  Toolbar: {\n    Cells60Cfg: 'Columns,Help',\n    Cells70Styles: 'Sizes'\n  },\n  Panel: {\n    PanelCopyMenu:\n        'CopyRowBelow,CopyRowsBelow@F,CopyTree,CopyRowsTreeBelow@F,CopySelected@S,CopySelectedTree@S,CopySelectedChildEnd,CopySelectedTreeChildEnd,-,AddRowBelow,AddRowsBelow@2,CopyEmptyBelow,CopyRowsEmptyBelow@2,CopySelectedEmpty,-,AddChildEnd,CopySelectedEmptyChildEnd'\n  },\n  Lang: {\n    Format: {\n      GroupSeparator: ' ',\n      GMT: 0\n    }\n  }\n}\n"],"sourceRoot":""}