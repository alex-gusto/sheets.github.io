{"version":3,"sources":["components/NavBar.js","db/dataService.js","helpers/perfomance.js","views/Handsontable.js","helpers/flat-data.js","views/SpreadJS.js","views/ZingGrid.js","views/WijmoGrid.js","views/TreeDef.js","views/TreeGrid.js","helpers/deep-clone.js","components/TreeGridComponent/utils/convert-key.js","components/TreeGridComponent/utils/global-helpers.js","components/TreeGridComponent/TreeGridComponent.js","components/TreeGridComponent/utils/convert-object-to-flat-keys.js","views/TimeTracker/static-layout.js","components/TreeGridComponent/utils/center-header.js","views/TimeTracker/create-head.js","views/TimeTracker/TimeTrackerGrid/utils/get-prev-event.js","helpers/pick-number.js","views/TimeTracker/TimeTrackerGrid/TimeTrackerGrid.js","views/TimeTracker/TimeTrackerGrid/utils/get-next-event.js","views/TimeTracker/create-left-columns.js","views/TimeTracker/create-columns.js","views/TimeTracker/create-foot.js","views/TimeTracker/create-solid.js","views/TimeTracker/create-rows-def.js","components/TreeGridComponent/utils/merge-layouts.js","views/TimeTracker/migrate-data.js","views/TimeTracker/TimeTracker.js","App.js","index.js"],"names":["NavBar","className","to","exact","path","Component","this","data","Phases","Costs","fn","ts","performance","now","err","console","log","toFixed","SpreadSheetsCon","props","initTable","hot","Handsontable","tableRef","current","dataService","getPhases","nestedRows","colHeaders","rowHeaders","autoRowSize","stretchH","height","width","persistentState","nestedHeaders","label","colspan","columns","type","numericFormat","pattern","allowEmpty","correctFormat","contextMenu","bindRowsWithHeaders","manualRowMove","updateSettings","cells","row","col","prop","classes","readOnly","isTotal","instance","getDataAtRowProp","visualRow","push","start","overriddenStart","lockTimestamp","Date","join","createRef","state","time","setState","lis","document","querySelector","remove","style","color","ref","overflow","flex","fontSize","createFlatter","globalIndex","flatData","newData","groups","forEach","__children","index","count","length","GC","window","columnToLetter","column","temp","letter","String","fromCharCode","SpreadJS","initSpread","spread","Spread","Sheets","Workbook","sheetCount","options","tabStripVisible","tabNavigationVisible","tabEditable","newTabVisible","sheet","getActiveSheet","spreadNS","suspendPaint","isProtected","autoGenerateColumns","setDataSource","setRowCount","SheetArea","colHeader","addSpan","setValue","bindColumn","name","displayName","formatter","size","setColumnCount","Style","backColor","cellPadding","totalRow","getRowCount","addRows","viewport","setStyle","columnsCount","getColumnCount","groupsIndex","map","i","getCell","borderLeft","LineBorder","LineStyle","thin","borderRight","borderTop","borderBottom","columnLetter","startRow","endRow","sumFormula","setFormula","CellRange","locked","rowOutlines","group","expand","direction","Outlines","OutlineDirection","backward","autoFitColumn","resumePaint","setTimeout","assignDataToNestedGrid","cellRef","recordRef","setData","JSON","stringify","ZingGridView","ZingGrid","tabelEl","header","editor","layout","loading","loadByScroll","addEventListener","e","getRowLevel","wjGrid","isGroupRow","level","CostTableView","gridRef","costs","getCosts","filter","initialWorkerGrid","grid","workerGrid","formatItem","addHandler","panel","rowData","rows","colData","test","binding","hasChildren","itemFormatter","r","c","cell","cellType","ColumnHeader","_ts","onCellEditEnding","updateGridStyles","cssClass","isReadOnly","onFilter","value","target","toLowerCase","onMenuItemClicked","selectedValue","cmd","addRow","rowIndex","selection","dataItem","code","days","populatedDays","refresh","removeRow","parentRow","rowLevel","getParentNode","parentRowData","childIndex","findIndex","child","splice","collapseAll","collapseGroupsToLevel","expandAll","maxGroupLevel","onDraggedRow","exportExcel","book","FlexGridXlsxConverter","save","includeColumnHeaders","includeRowHeaders","sheets","saveAsync","rowAdded","deletedRow","deletingRow","filterString","keysToSearch","collectResults","acc","cost","res","key","v","some","includes","costCopy","Object","assign","children","reduce","search","replace","allowResizing","placeholder","marginBottom","onChange","itemsSource","selectionMode","childItemsPath","frozenColumns","allowSorting","allowDragging","allowAddNew","initialized","cellEditEnding","draggedRow","minWidth","dataMap","format","contextMenuOf","selectedValuePath","dropDownCssClass","itemClicked","Cfg","CfgId","ShowDeleted","SuppressCfg","AutoSort","DateStrings","ReloadChanged","MainCol","NoVScroll","Sorting","Paging","PageLength","AutoUpdate","StandardFilter","SaveExpanded","PersistentCfg","Filtered","DebugCalc","Actions","OnRightClickCell","Def","R","Expanded","Cost","CostGroup","CanEdit","Calculated","nameCanEdit","codeCanEdit","populateDailyFormula","DefCols","C","CanFilter","LeftCols","Name","RelWidth","MinWidth","Type","CaseSensitive","Width","Enum","OnChange","Cols","Formula","Header","unit","rate","currency","populateDaily","prior","afterOffhire","NoEscape","Head","Kind","nameFilter","codeFilter","Foot","id","CanDelete","getBody","arr","localStorage","getItem","parse","flat","item","uid","Items","entries","day","setItem","TreeGrid","Grid","isAcc","tagRef","_body","_worker","Worker","populate","Row","Value","SetValue","saveData","updateData","newRowData","postMessage","showCustomMenu","G","self","ShowMenu","OnClick","ReloadBody","Deleted","DeleteRow","Selected","SelectRow","CopyRow","AddRow","event","error","debug","Promise","resolve","Debug","Layout","Data","Upload","Format","Tag","Body","Grids","OnAfterValueChanged","OnSave","GetXmlData","Dispose","obj","replaceFrom","replaceTo","isEmpty","isNotEmpty","isNumber","isNaN","dataManager","defaultProps","onDataChanged","noop","nestedKey","body","DefEmpty","DefParent","TreeGridComponent","$el","prepareBody","subscribeGridEvents","OnCustomAjax","IO","func","Changes","changes","OnGenerateId","uuid","subscribeDataManagerEvents","onDataManagerMessage","unsubscribeDataManagerEvents","removeEventListener","Array","isArray","onDataUpdated","initGrid","merge","Helpers","helpers","deepClone","traverse","convertObjectToFlatKeys","keyAcc","hasOwnProperty","convertKey","isPlainObject","RoundNumbers","RoundNumbersDigits","Size","Undo","RowIndex","SearchLap","FilterLap","SelectingCells","SelectingFocus","FocusRect","FormulaEditing","Validate","ExportType","Toolbar","Cells30Manipulate","Root","AcceptDef","CDef","Panel","Copy","Delete","Select","Move","centerHeader","config","getPrevEvent","_row","GetPrev","pickNumber","args","find","n","TGAddEvent","TGDelEvent","validator","actualHours","nextEvent","getNextEvent","GetNext","nextNotEmpty","currentEmpty","_tftHours","TimeTrackerGrid","createLayout","onValidate","errors","model","set","getEventStart","get","eventRow","getStartOperationDate","getEventEnd","duration","getEventDuration","hours","isUndefined","getPlannedDepth","plannedDepth","getActualDepth","actualDepth","hasActual","getBehindHours","delta","handleOperationStartDateChange","OperationStartDate","dynamicLayout","ExportName","ClassFormula","CanEmpty","Visible","CanHide","CanPrint","CanExport","mainHeader","Pos","afeHours","targetHours","dsvHours","nptHours","wowHours","_unPtHours","_iltHours","_plannedDepth","_actualDepth","_start","_end","behindHours","contractor","comment","experienceLinks","keys","upHeader","Spanned","PosSpan","codeSpan","afeHoursSpan","plannedDepthSpan","startSpan","contractorSpan","createHead","Class","Color","dsvHoursFormula","actualHoursFormula","nptHoursFormula","wowHoursFormula","tftHoursFormula","afeHoursFormula","targetHoursFormula","iltHoursFormula","unPtHoursFormula","_plannedDepthFormula","_actualDepthFormula","_startFormula","_endFormula","behindHoursFormula","Solid","Cells","OperationStartDateLabel","OperationStartDateWidth","OperationStartDateFormat","OperationStartDateType","OperationStartDateRecalc","OperationStartDateOnChange","commonGroupDef","Well","Phase","Event","CalcOrder","createRowsDef","mergeWith","OnDel","Lang","GroupSeparator","objValue","srcValue","concat","mergeLayouts","staticLayout","startDate","wells","defs","addRowDefinitions","ignoreKeys","splitDerrickTypes","main","aux","auxName","auxCode","mainChildren","auxChildren","newKey","camelCase","TimeTracker","attrs","load","toJSON","phases","Wells","Sample","WijmoGrid","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f66ed674.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './NavBar.css'\r\nimport { Link, Route, Switch } from 'react-router-dom'\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"navigationBar\">\r\n                <h3>Navigation</h3>\r\n                <nav className=\"navigationBarList\">\r\n                    <Link to=\"/time-tracker\" className=\"navItem\">Time tracker</Link>\r\n                    <Link to=\"/\" className=\"navItem\">Handsontable</Link>\r\n                    <Link to=\"/spread-js\" className=\"navItem\">Spread JS</Link>\r\n                    <Link to=\"/zing-grid\" className=\"navItem\">Zing Grid</Link>\r\n                    <Link to=\"/wijmo-grid\" className=\"navItem\">Wijmo Grid</Link>\r\n                    <Link to=\"/tree-grid\" className=\"navItem\">Tree Grid</Link>\r\n                </nav>\r\n\r\n                <div className=\"features\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <h4>Handsontable</h4>\r\n                            <p className=\"features-content\">\r\n                                Supports most of the features. Customizable, open-source, good support community, and not bad DOCs.\r\n                                Bad performance.\r\n                            </p>\r\n\r\n                            <ul className=\"features-list\">\r\n                                <li>Copy paste subtable from excel <span className=\"text-green\">+</span></li>\r\n                                <li>Nested rows <span className=\"text-green\">+</span></li>\r\n                                <li>Fixed columns rows <span className=\"text-green\">+</span></li>\r\n                                <li>Remember collapse expand state <span className=\"text-red\">-</span></li>\r\n                                <li>Styling, Read only <span className=\"text-green\">+</span></li>\r\n                                <li>Placeholders <span className=\"text-green\">+</span></li>\r\n                                <li>Tool tips <span className=\"text-green\">+</span></li>\r\n                                <li>PDF export <span className=\"text-blue\">?</span></li>\r\n                                <li>Excel export <span className=\"text-red\">-</span></li>\r\n                                <li>Filtering (eg. for user search, partial sums, pdf export) <span className=\"text-green\">+</span></li>\r\n                                <li>Rotated cells <span className=\"text-green\">+</span></li>\r\n                                <li>Spanned cells <span className=\"text-green\">+</span></li>\r\n                                <li>Validation <span className=\"text-green\">+</span></li>\r\n                                <li>Sums (light weight formulas) <span className=\"text-green\">+</span></li>\r\n                                <li>Sub table selection <span className=\"text-green\">+</span></li>\r\n                                <li>Customisable context menus <span className=\"text-green\">+</span></li>\r\n                                <li>Moving one ore several rows <span className=\"text-green\">+</span></li>\r\n                                <li>Copy cut delete operations <span className=\"text-green\">+</span></li>\r\n                            </ul>\r\n                        </Route>\r\n                        <Route path=\"/spread-js\">\r\n                            <h4>SpreadJS</h4>\r\n                            <p className=\"features-content\">\r\n                                Many features need to be created from scratch. It is Excel in WEB and it works like real excel. Formulas work very well and fast. No need to change DataLayer from Handsontable. Good performance, wide API.\r\n                            </p>\r\n\r\n                            <ul className=\"features-list\">\r\n                                <li>Copy paste subtable from excel <span className=\"text-green\">+</span></li>\r\n                                <li>Nested rows <span className=\"text-green\">+</span></li>\r\n                                <li>Fixed columns rows <span className=\"text-green\">+</span></li>\r\n                                <li>Remember collapse expand state <span className=\"text-blue\">?</span></li>\r\n                                <li>Styling, Read only <span className=\"text-green\">+</span></li>\r\n                                <li>Placeholders <span className=\"text-red\">-</span></li>\r\n                                <li>Tool tips <span className=\"text-blue\">?</span></li>\r\n                                <li>PDF export <span className=\"text-blue\">?</span></li>\r\n                                <li>Excel export <span className=\"text-green\">+</span></li>\r\n                                <li>Filtering (eg. for user search, partial sums, pdf export) <span className=\"text-green\">+</span></li>\r\n                                <li>Rotated cells <span className=\"text-blue\">?</span></li>\r\n                                <li>Spanned cells <span className=\"text-green\">+</span></li>\r\n                                <li>Validation <span className=\"text-green\">+</span></li>\r\n                                <li>Sums (light weight formulas) <span className=\"text-green\">+</span></li>\r\n                                <li>Sub table selection <span className=\"text-green\">+</span></li>\r\n                                <li>Customisable context menus <span className=\"text-green\">+</span></li>\r\n                                <li>Moving one ore several rows <span className=\"text-green\">+</span></li>\r\n                                <li>Copy cut delete operations <span className=\"text-green\">+</span></li>\r\n                            </ul>\r\n                        </Route>\r\n                        <Route path=\"/zing-grid\">\r\n                            <h4>ZingGrid</h4>\r\n\r\n                            <ul className=\"features-list\">\r\n                                <li>Copy paste subtable from excel <span className=\"text-red\">-</span></li>\r\n                                <li>Nested rows <span className=\"text-red\">-</span></li>\r\n                                <li>Fixed columns rows <span className=\"text-red\">-</span></li>\r\n                                <li>Remember collapse expand state <span className=\"text-blue\">?</span></li>\r\n                                <li>Styling, Read only <span className=\"text-green\">+</span></li>\r\n                                <li>Placeholders <span className=\"text-green\">+</span></li>\r\n                                <li>Tool tips <span className=\"text-blue\">?</span></li>\r\n                                <li>PDF export <span className=\"text-blue\">?</span></li>\r\n                                <li>Excel export <span className=\"text-green\">+</span></li>\r\n                                <li>Filtering (eg. for user search, partial sums, pdf export) <span className=\"text-green\">+</span></li>\r\n                                <li>Rotated cells <span className=\"text-blue\">?</span></li>\r\n                                <li>Spanned cells <span className=\"text-green\">+</span></li>\r\n                                <li>Validation <span className=\"text-red\">-</span></li>\r\n                                <li>Sums (light weight formulas) <span className=\"text-red\">-</span></li>\r\n                                <li>Sub table selection <span className=\"text-green\">+</span></li>\r\n                                <li>Customisable context menus <span className=\"text-green\">+</span></li>\r\n                                <li>Moving one ore several rows <span className=\"text-green\">+</span></li>\r\n                                <li>Copy cut delete operations <span className=\"text-red\">-</span></li>\r\n                            </ul>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar\r\n","import data from './data.json';\r\n\r\nclass DataService {\r\n    constructor() {\r\n        this.data = data;\r\n    }\r\n\r\n    getPhases() {\r\n        return this.data.Phases\r\n    }\r\n\r\n    getCosts() {\r\n        return this.data.Costs\r\n    }\r\n}\r\n\r\nexport default new DataService()\r\n","export default function (fn) {\r\n    const ts = performance.now()\r\n    try {\r\n        fn()\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    const te = performance.now()\r\n\r\n    return (te - ts).toFixed(2)\r\n}\r\n","import React, { Component, createRef, Fragment } from 'react';\r\nimport dataService from '../db/dataService'\r\nimport Handsontable from 'handsontable'\r\nimport performance from '../helpers/perfomance'\r\nimport 'handsontable/dist/handsontable.full.css';\r\nimport './handsotable.css'\r\n\r\nclass SpreadSheetsCon extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.tableRef = createRef()\r\n        this.state = {\r\n            time: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const time = performance(this.initTable)\r\n        this.setState({ time })\r\n        const lis = document.querySelector('#hot-display-license-info')\r\n        if (lis) lis.remove()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const lis = document.querySelector('#hot-display-license-info')\r\n        if (lis) lis.remove()\r\n    }\r\n\r\n    initTable = () => {\r\n        this.hot = new Handsontable(this.tableRef.current, {\r\n            data: dataService.getPhases(),\r\n            nestedRows: true,\r\n            colHeaders: true,\r\n            rowHeaders: true,\r\n            autoRowSize: true,\r\n            stretchH: \"all\",\r\n            height: '500px',\r\n            width: '100%',\r\n            persistentState: true,\r\n            nestedHeaders: [\r\n                [\r\n                    {\r\n                        label: 'Identification',\r\n                        colspan: 2\r\n                    },\r\n                    {\r\n                        label: 'Duration [h]',\r\n                        colspan: 7\r\n                    },\r\n                    {\r\n                        label: 'End Depth [mMD]',\r\n                        colspan: 2\r\n                    },\r\n                    {\r\n                        label: 'Timing',\r\n                        colspan: 3\r\n                    },\r\n                    {\r\n                        label: 'Annotation',\r\n                        colspan: 2\r\n                    }\r\n                ],\r\n                [\r\n                    'Code',\r\n                    'Name',\r\n                    'AFE',\r\n                    'Target',\r\n                    'DSV',\r\n                    'Actual',\r\n                    'NPT',\r\n                    'WOW',\r\n                    'TFT',\r\n                    'Planned',\r\n                    'Actual',\r\n                    'Start',\r\n                    'End',\r\n                    'Days -ahead/+behind',\r\n                    'Contractor',\r\n                    'Comment'\r\n                ]\r\n            ],\r\n            columns: [\r\n                { data: 'code' },\r\n                { data: 'name' },\r\n                {\r\n                    data: 'afeHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'targetHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'dsvHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'actualHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'nptHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'wowHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'tftHours',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'plannedDepth',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'actualDepth',\r\n                    type: 'numeric',\r\n                    numericFormat: {\r\n                        pattern: '0,0.00'\r\n                    },\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'start',\r\n                    type: 'date',\r\n                    correctFormat: true,\r\n                    allowEmpty: true\r\n                },\r\n                {\r\n                    data: 'end',\r\n                    type: 'date',\r\n                    correctFormat: true,\r\n                    allowEmpty: true\r\n                },\r\n                {\r\n                    data: 'behindHours',\r\n                    type: 'numeric',\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                {\r\n                    data: 'contractor',\r\n                    type: 'numeric',\r\n                    allowEmpty: true,\r\n                    width: 80\r\n                },\r\n                { data: 'comments' }\r\n\r\n            ],\r\n            contextMenu: true,\r\n            bindRowsWithHeaders: 'strict',\r\n            manualRowMove: true\r\n        })\r\n\r\n        this.hot.updateSettings({\r\n            cells(row, col, prop) {\r\n                const cellProperties = this;\r\n                const classes = [];\r\n                let readOnly = false;\r\n\r\n                const isTotal = this.instance.getDataAtRowProp(this.visualRow, 'isTotal');\r\n                const isGroup = this.instance.getDataAtRowProp(this.visualRow, 'group');\r\n\r\n                if (isGroup) {\r\n                    readOnly = true;\r\n                    // add style for group rows\r\n                    classes.push('group-cell');\r\n                } else if (isTotal) {\r\n                    readOnly = true;\r\n                    // add style for total row\r\n                    classes.push('total-cell');\r\n                } else {\r\n                    classes.push('leaf-cell');\r\n                }\r\n\r\n                if (readOnly) {\r\n                    classes.push('locked-cell');\r\n                }\r\n\r\n                // Lock date styles\r\n                if (!isTotal) {\r\n                    const start = this.instance.getDataAtRowProp(this.visualRow, 'start');\r\n                    const overriddenStart = this.instance.getDataAtRowProp(this.visualRow, 'overriddenStart');\r\n                    const lockTimestamp = +new Date();\r\n\r\n                    if (+new Date(start) < lockTimestamp || +new Date(overriddenStart) < lockTimestamp) {\r\n                        // readOnly = true;\r\n                        classes.push('parked-cell');\r\n                    }\r\n                }\r\n\r\n                cellProperties.readOnly = readOnly;\r\n                cellProperties.className = classes.join(' ')\r\n                return cellProperties;\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h3>Handsontable render performance: <span style={{ color: 'tomato' }}>{this.state.time}ms</span></h3>\r\n\r\n                <div ref={this.tableRef}\r\n                     style={{ overflow: 'hidden', flex: '1 1 auto', fontSize: '11px' }}\r\n                />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SpreadSheetsCon\r\n","function createFlatter() {\r\n    let globalIndex = -1\r\n\r\n    return function flatData(data, newData = [], groups = []) {\r\n        data.forEach(row => {\r\n            newData.push(row)\r\n            globalIndex++\r\n\r\n            if (row.__children) {\r\n                groups.push({\r\n                    index: globalIndex,\r\n                    count: row.__children.length\r\n                })\r\n                flatData(row.__children, newData, groups)\r\n                delete row.__children\r\n            }\r\n        })\r\n\r\n        return { data: newData, groups }\r\n    }\r\n}\r\n\r\n\r\nexport default createFlatter\r\n","import React, { Component, createRef, Fragment } from 'react';\r\nimport dataService from '../db/dataService'\r\nimport performance from '../helpers/perfomance'\r\nimport createFlatter from '../helpers/flat-data'\r\nimport '@grapecity/spread-sheets/styles/gc.spread.sheets.excel2013white.css';\r\n\r\nconst GC = window.GC\r\n\r\nfunction columnToLetter(column) {\r\n    let temp, letter = '';\r\n    while (column > 0) {\r\n        temp = (column - 1) % 26;\r\n        letter = String.fromCharCode(temp + 65) + letter;\r\n        column = (column - temp - 1) / 26;\r\n    }\r\n    return letter;\r\n}\r\n\r\nexport default class SpreadJS extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.tableRef = createRef()\r\n        this.state = {\r\n            time: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            const time = performance(this.initSpread)\r\n            this.setState({ time })\r\n        })\r\n    }\r\n\r\n    initSpread = () => {\r\n        const spread = new GC.Spread.Sheets.Workbook(this.tableRef.current, { sheetCount: 1 });\r\n        spread.options.tabStripVisible = false\r\n        spread.options.tabNavigationVisible = false\r\n        spread.options.tabEditable = true\r\n        spread.options.newTabVisible = false\r\n        const sheet = spread.getActiveSheet()\r\n        const spreadNS = GC.Spread.Sheets;\r\n\r\n        sheet.suspendPaint()\r\n        const flatData = createFlatter()\r\n        const { data, groups } = flatData(dataService.getPhases())\r\n\r\n        sheet.options.isProtected = true\r\n        sheet.autoGenerateColumns = false\r\n        sheet.setDataSource(data)\r\n\r\n        sheet.setRowCount(2, spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 0, 1, 2, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 0, \"Identification\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 2, 1, 6, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 2, \"Duration\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 8, 1, 2, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 8, \"End Depth\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 10, 1, 3, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 10, \"Timing\", spreadNS.SheetArea.colHeader);\r\n\r\n        sheet.addSpan(0, 13, 1, 2, spreadNS.SheetArea.colHeader);\r\n        sheet.setValue(0, 13, \"Annotation\", spreadNS.SheetArea.colHeader);\r\n\r\n        // columns\r\n        sheet.bindColumn(0, { name: 'code', displayName: 'Code' })\r\n        sheet.bindColumn(1, { name: 'name', displayName: 'Name' })\r\n        sheet.bindColumn(2, { name: 'afeHours', displayName: 'AFE', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(3, { name: 'targetHours', displayName: 'Target', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(4, { name: 'dsvHours', displayName: 'DSV', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(5, { name: 'actualHours', displayName: 'Actual', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(6, { name: 'nptHours', displayName: 'NPT', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(7, { name: 'tftHours', displayName: 'TFT', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(8, { name: 'plannedDepth', displayName: 'Planned', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(9, { name: 'actualDepth', displayName: 'Actual', formatter: '0.00', size: 80 })\r\n        sheet.bindColumn(10, { name: 'start', displayName: 'Start', formatter: 'DD-MM-yyyy HH:mm' })\r\n        sheet.bindColumn(11, { name: 'end', displayName: 'End', formatter: 'DD-MM-yyyy HH:mm' })\r\n        sheet.bindColumn(12, { name: 'behindHours', displayName: 'Behind hours', formatter: '0.00', size: 100 })\r\n        sheet.bindColumn(13, { name: 'contractor', displayName: 'Contractor', size: 200 })\r\n        sheet.bindColumn(14, { name: 'comments', displayName: 'Comment', size: 200 })\r\n        sheet.setColumnCount(15)\r\n\r\n        const style = new spreadNS.Style()\r\n        style.backColor = '#f6f6f6'\r\n        style.cellPadding = '0 2'\r\n\r\n        // Total row\r\n        const totalRow = sheet.getRowCount()\r\n        sheet.addRows(sheet.getRowCount(spreadNS.SheetArea.viewport), 1)\r\n        sheet.setStyle(totalRow, 1, style, spreadNS.SheetArea.viewport)\r\n        sheet.setValue(totalRow, 1, 'Total')\r\n\r\n        const columnsCount = sheet.getColumnCount()\r\n        const groupsIndex = groups.map(({ index }) => index + 1)\r\n\r\n        function createTotal(letter) {\r\n            return `${letter}${groupsIndex.join(`,${letter}`)}`\r\n        }\r\n\r\n        groups.forEach(({ index, count }) => {\r\n            let i = columnsCount\r\n            while (i >= 0) {\r\n                sheet.setStyle(index, i, style, spreadNS.SheetArea.viewport)\r\n                const cell = sheet.getCell(index, i, spreadNS.SheetArea.viewport)\r\n                cell\r\n                    .borderLeft(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n                    .borderRight(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n                    .borderTop(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n                    .borderBottom(new spreadNS.LineBorder(\"#ccc\", spreadNS.LineStyle.thin))\r\n\r\n                if (i > 1 && i < 8) {\r\n                    const columnLetter = columnToLetter(i + 1)\r\n                    const startRow = index + 2\r\n                    const endRow = index + count + 1\r\n                    const sumFormula = `=SUM(${columnLetter}${startRow}:${columnLetter}${endRow})`\r\n                    sheet.setFormula(index, i, sumFormula)\r\n                    sheet.setFormula(totalRow, i, `=SUM(${createTotal(columnLetter)})`)\r\n                }\r\n                i--\r\n            }\r\n\r\n            // Prevent lock events\r\n            const row = new spreadNS.CellRange(sheet, index + 1, 0, count, columnsCount)\r\n            row.locked(false)\r\n\r\n            // group events to phases\r\n            sheet.rowOutlines.group(index + 1, count)\r\n            sheet.rowOutlines.expand(0, false)\r\n            sheet.rowOutlines.direction(spreadNS.Outlines.OutlineDirection.backward);\r\n        })\r\n\r\n\r\n        // auto fit\r\n        sheet.autoFitColumn(1)\r\n        sheet.autoFitColumn(10)\r\n        sheet.autoFitColumn(11)\r\n        sheet.resumePaint()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h3>SpreadJS render performance: <span style={{ color: 'tomato' }}>{this.state.time}ms</span></h3>\r\n                <div ref={this.tableRef} style={{ height: '100%', width: '100%' }}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment, createRef } from 'react';\r\nimport dataService from '../db/dataService'\r\nimport ZingGrid from 'zinggrid';\r\nimport './zing-grid.css'\r\nimport createFlatter from '../helpers/flat-data'\r\n\r\n\r\nwindow.assignDataToNestedGrid = (index, cellRef, recordRef) => {\r\n    if (cellRef) {\r\n        cellRef.querySelector('zing-grid').setData(JSON.stringify(index))\r\n    }\r\n}\r\nexport default class ZingGridView extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.tabelEl = createRef()\r\n        this.state = {\r\n            time: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initTable()\r\n    }\r\n\r\n    initTable = () => {\r\n        const ts = window.performance.now()\r\n        const flatData = createFlatter()\r\n        const { data } = flatData(dataService.getPhases())\r\n        const grid = new ZingGrid(this.tabelEl.current, {\r\n            data,\r\n            columns: [\r\n                {\r\n                    index: 'code',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'name'\r\n                },\r\n                {\r\n                    index: 'afeHours',\r\n                    type: 'number',\r\n                    header: 'AFE',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'targetHours',\r\n                    type: 'number',\r\n                    header: 'Target',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'dsvHours',\r\n                    type: 'number',\r\n                    header: 'DSV',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'nptHours',\r\n                    type: 'number',\r\n                    header: 'NPT',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'wowHours',\r\n                    type: 'number',\r\n                    header: 'WOW',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'tftHours',\r\n                    type: 'number',\r\n                    header: 'TFT',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'plannedDepth',\r\n                    type: 'number',\r\n                    header: 'Planned',\r\n                    width: 80\r\n                },\r\n                {\r\n                    index: 'actualDepth',\r\n                    type: 'number',\r\n                    header: 'Actual',\r\n                    width: 80\r\n                }\r\n            ],\r\n            editor: true,\r\n            layout: 'row',\r\n            loading: true,\r\n            height: '600px',\r\n            loadByScroll: true\r\n        });\r\n\r\n        grid.addEventListener('grid:ready', (e) => {\r\n            const te = window.performance.now()\r\n            const time = (te - ts).toFixed(2)\r\n            this.setState({ time })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h3>Zing grid render performance: <span style={{ color: 'tomato' }}>{this.state.time}ms</span></h3>\r\n                <div ref={this.tabelEl}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, createRef } from 'react';\r\nimport './wijmo.css'\r\nimport '@grapecity/wijmo.styles/wijmo.css';\r\nimport { FlexGrid, FlexGridColumn } from \"@grapecity/wijmo.react.grid\";\r\n// import * as wjCore from '@grapecity/wijmo';\r\nimport { FlexGridXlsxConverter } from '@grapecity/wijmo.grid.xlsx';\r\nimport * as wjGrid from '@grapecity/wijmo.grid';\r\nimport { Menu, MenuItem, MenuSeparator } from '@grapecity/wijmo.react.input';\r\n\r\nimport dataService from '../db/dataService'\r\n\r\nfunction isGroupRow(row) {\r\n    return row instanceof wjGrid.GroupRow\r\n}\r\n\r\nfunction getRowLevel(row) {\r\n    return isGroupRow(row) ? row.level : -1\r\n}\r\n\r\nfunction getParentNode(row) {\r\n    let parentRow = null\r\n    const rowLevel = getRowLevel(row);\r\n    if (rowLevel === -1) return\r\n\r\n    let i = row.index\r\n    do {\r\n        i--\r\n        parentRow = row.grid.rows[i]\r\n    } while (getRowLevel(parentRow) >= rowLevel)\r\n\r\n    return parentRow\r\n}\r\n\r\n\r\nclass CostTableView extends Component {\r\n    gridRef = createRef()\r\n    state = {\r\n        costs: dataService.getCosts(),\r\n        filter: '',\r\n        time: 0\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this._ts = window.performance.now()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateGridStyles()\r\n\r\n        this.workerGrid.collapseGroupsToLevel(0)\r\n        this.workerGrid.rowAdded.addHandler(() => {\r\n            this.updateGridStyles()\r\n        })\r\n\r\n        this.workerGrid.deletedRow.addHandler((grid, e) => {\r\n            this.updateGridStyles()\r\n        })\r\n\r\n        this.workerGrid.deletingRow.addHandler((grid, e) => {\r\n            // this.updateGridStyles()\r\n        })\r\n    }\r\n\r\n    initialWorkerGrid = (grid) => {\r\n        this.workerGrid = grid;\r\n        // grid.columnFooters.rows.push(new wjGrid.GroupRow());\r\n        // grid.bottomLeftCells.setCellData(0, 0, 'Σ');\r\n        grid.formatItem.addHandler((grid, e) => {\r\n            if (e.panel !== grid.cells) {\r\n                return\r\n            }\r\n\r\n            const { row, col } = e\r\n            const rowData = grid.rows[row]\r\n            const colData = grid.columns[col]\r\n\r\n            // if (colData.binding === 'rate' && rowData.hasChildren) {\r\n            //     e.cell.textContent = wjCore.getAggregate(1, item.__children, 'rate')\r\n            // }\r\n\r\n            if (/days/.test(colData.binding) && !rowData.hasChildren) {\r\n                // e.cell.textContent = get(item, colData.binding, get(item, colData.binding.replace('days', 'populatedDays')))\r\n            }\r\n        });\r\n\r\n        grid.itemFormatter = (panel, r, c, cell) => {\r\n            if (panel.cellType === wjGrid.CellType.ColumnHeader) {\r\n            }\r\n        }\r\n\r\n        const te = window.performance.now()\r\n        const time = (te - this._ts).toFixed(2)\r\n        this.setState({ time })\r\n    }\r\n\r\n    onCellEditEnding = (grid, e) => {\r\n        console.log('edited')\r\n    }\r\n\r\n    updateGridStyles = () => {\r\n        this.workerGrid.rows.forEach((row) => {\r\n            if (!row.hasChildren) {\r\n                row.cssClass = 'wj-group--bg-white'\r\n            }\r\n            row.isReadOnly = row.hasChildren;\r\n        });\r\n    }\r\n\r\n    onFilter = ({ target: { value } }) => {\r\n        this.setState(() => {\r\n            const filter = value.toLowerCase()\r\n            const costs = dataService.getCosts()\r\n\r\n            return {\r\n                costs: this.filter(filter, costs),\r\n                filter\r\n            }\r\n        }, () => {\r\n            this.updateGridStyles()\r\n        })\r\n    }\r\n\r\n    filter(filterString, costs) {\r\n        if (filterString === '') return costs;\r\n        const keysToSearch = ['name', 'code'];\r\n\r\n        const search = cost => {\r\n            const values = keysToSearch.map(key => cost[key]).filter(v => v);\r\n            if (values.some(v => v.toLowerCase().includes(filterString))) {\r\n                return cost;\r\n            }\r\n\r\n            if (cost.__children && cost.__children.length) {\r\n                const costCopy = Object.assign({}, cost);\r\n                const children = cost.__children.reduce(collectResults, []);\r\n\r\n                if (children.length) {\r\n                    costCopy.__children = children;\r\n                    return costCopy;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        function collectResults(acc, cost) {\r\n            const res = search(cost);\r\n            if (res) acc.push(res);\r\n\r\n            return acc;\r\n        }\r\n\r\n        return costs.reduce(collectResults, []);\r\n    }\r\n\r\n    onMenuItemClicked = ({ selectedValue }) => {\r\n        const cmd = this[selectedValue]\r\n        if (typeof cmd !== 'function') {\r\n            console.log('Context Menu: no cmd found ', selectedValue)\r\n            return\r\n        }\r\n\r\n        cmd()\r\n    }\r\n\r\n    addRow = () => {\r\n        const { row: rowIndex } = this.workerGrid.selection\r\n        const { rows } = this.workerGrid\r\n        const rowData = rows[rowIndex].dataItem\r\n\r\n        this.setState(({ costs }) => {\r\n            if (!rowData.__children) {\r\n                rowData.__children = []\r\n            }\r\n\r\n            rowData.__children.push({ name: '', code: '', days: {}, populatedDays: {} })\r\n\r\n            const newCosts = [...costs]\r\n            return { costs: newCosts }\r\n        }, () => {\r\n            this.workerGrid.refresh()\r\n            this.updateGridStyles()\r\n        })\r\n    }\r\n\r\n    removeRow = () => {\r\n        const { row: rowIndex } = this.workerGrid.selection\r\n        const { rows } = this.workerGrid\r\n        const row = rows[rowIndex]\r\n        const parentRow = getParentNode(row)\r\n\r\n        if (parentRow) {\r\n            this.setState(({ costs }) => {\r\n                const parentRowData = parentRow.dataItem\r\n                const rowData = row.dataItem\r\n                const childIndex = parentRowData.__children.findIndex(child => child === rowData)\r\n\r\n                if (childIndex >= 0) {\r\n                    parentRowData.__children.splice(childIndex, 1)\r\n                }\r\n\r\n                return { costs: [...costs] }\r\n            }, () => {\r\n                this.workerGrid.refresh()\r\n                this.updateGridStyles()\r\n            })\r\n        }\r\n    }\r\n\r\n    collapseAll = () => {\r\n        this.workerGrid.collapseGroupsToLevel(0)\r\n    }\r\n\r\n    expandAll = () => {\r\n        this.workerGrid.collapseGroupsToLevel(this.workerGrid.rows.maxGroupLevel + 1)\r\n    }\r\n\r\n\r\n    onDraggedRow = (grid, e) => {\r\n        console.log(e)\r\n    }\r\n\r\n    exportExcel = () => {\r\n        const book = FlexGridXlsxConverter.save(this.workerGrid, {\r\n            includeColumnHeaders: true,\r\n            includeRowHeaders: true\r\n        })\r\n\r\n        book.sheets[0].name = 'FlexGrid Data';\r\n        book.saveAsync('FlexGrid-Export.xlsx');\r\n    }\r\n\r\n    render() {\r\n        const { costs, filter, time } = this.state\r\n        const columns = ['days.2015-06-22', 'days.2015-06-27', 'days.2015-07-05', 'days.2015-07-11'].map((key) =>\r\n            <FlexGridColumn\r\n                binding={key}\r\n                header={key.replace('days.', '')}\r\n                key={key}\r\n                allowResizing={false}></FlexGridColumn>)\r\n\r\n\r\n        return (\r\n            <div className=\"cost-view\">\r\n                <h3>Wijmo Grid render performance: <span style={{ color: 'tomato' }}>{time}ms</span></h3>\r\n\r\n                <input type=\"text\" value={filter}\r\n                       placeholder=\"Filter\"\r\n                       className=\"form-control\" style={{ marginBottom: '20px' }}\r\n                       onChange={this.onFilter}/>\r\n                <FlexGrid\r\n                    ref={this.gridRef}\r\n                    itemsSource={costs}\r\n                    selectionMode=\"Row\"\r\n                    autoGenerateColumns={false}\r\n                    childItemsPath=\"__children\"\r\n                    frozenColumns={7}\r\n                    isReadOnly={false}\r\n                    allowSorting={false}\r\n                    allowDragging=\"Rows\"\r\n                    allowAddNew={true}\r\n                    // allowDelete={true}\r\n                    initialized={this.initialWorkerGrid}\r\n                    cellEditEnding={this.onCellEditEnding}\r\n                    draggedRow={this.onDraggedRow}\r\n                >\r\n                    <FlexGridColumn binding=\"name\" header=\"Name\" width=\"2*\" minWidth={200}\r\n                                    isReadOnly={false}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"code\" header=\"Code\"></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"type\" header=\"Type\"\r\n                                    dataMap={['tangible', 'intangible', 'consumable']}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"unit\" header=\"Unit\"\r\n                                    dataMap={['day rate', 'lump sum', 'unit cost', 'depth based']}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"rate\" header=\"Rate\"></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"currency\" header=\"Currency\"\r\n                                    dataMap={[\"AUD\", \"EUR\", \"GBP\", \"NOK\", \"USD\"]}></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"populateDaily\" header=\"Populate Daily\" format=\"n*\"></FlexGridColumn>\r\n                    <FlexGridColumn binding=\"prior\" header=\"Before onhire\"></FlexGridColumn>\r\n                    {columns}\r\n                    <FlexGridColumn binding=\"afterOffhire\" header=\"After offhire\"></FlexGridColumn>\r\n                </FlexGrid>\r\n\r\n                <Menu contextMenuOf={this.gridRef}\r\n                      header=\"Context Menu\"\r\n                      selectedValuePath=\"cmd\"\r\n                      dropDownCssClass=\"ctx-menu\"\r\n                      itemClicked={this.onMenuItemClicked}\r\n                >\r\n                    <MenuItem cmd=\"addRow\">\r\n                        Add row\r\n                    </MenuItem>\r\n                    <MenuItem cmd=\"removeRow\">\r\n                        Remove row\r\n                    </MenuItem>\r\n                    <MenuSeparator></MenuSeparator>\r\n                    <MenuItem cmd=\"collapseAll\">\r\n                        Collapse all\r\n                    </MenuItem>\r\n                    <MenuItem cmd=\"expandAll\">Expand all</MenuItem>\r\n                    <MenuSeparator></MenuSeparator>\r\n                    <MenuItem cmd=\"exportExcel\">Export Excel</MenuItem>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CostTableView\r\n","export default {\r\n    Cfg: {\r\n        CfgId: 'Costs',\r\n        ShowDeleted: \"0\",\r\n        SuppressCfg: '0',\r\n        AutoSort: \"0\",\r\n        DateStrings: '1',\r\n        ReloadChanged: '3',\r\n        MainCol: 'name',\r\n        NoVScroll: 0,\r\n        Sorting: 0,\r\n        Paging: 2,\r\n        PageLength: 1,\r\n        AutoUpdate: 1,\r\n        StandardFilter: 3,\r\n        SaveExpanded: 1,\r\n        PersistentCfg: 2,\r\n        Filtered: 0,\r\n        DebugCalc: 1\r\n    },\r\n    Actions: {\r\n        OnRightClickCell: 'Grid.Component.showCustomMenu(Row,Col)' // Custom event handler, shows the calling method of the framework component; Shows some custom popup menu on right click to any cell\r\n    },\r\n    Def: {\r\n        R: {\r\n            Expanded: 1\r\n        },\r\n        Cost: {},\r\n        CostGroup: {\r\n            CanEdit: 0,\r\n            Calculated: 1,\r\n            nameCanEdit: 1,\r\n            codeCanEdit: 1,\r\n            populateDailyFormula: 'sum()'\r\n        }\r\n    },\r\n    DefCols: {\r\n        C: {\r\n            CanFilter: 0\r\n        }\r\n    },\r\n    LeftCols: [\r\n        { Name: 'name', RelWidth: 1, MinWidth: 250, Type: 'Text', CanFilter: 1, CaseSensitive: 0 },\r\n        { Name: 'code', CanFilter: 1, CaseSensitive: 0 },\r\n        {\r\n            Name: 'type', Width: '80',\r\n            Type: 'Enum',\r\n            Enum: ['|tangible', 'intangible', 'consumable'].join('|')\r\n        },\r\n        {\r\n            Name: 'unit',\r\n            Width: '90',\r\n            Type: 'Enum',\r\n            Enum: ['|day rate', 'lump sum', 'unit cost', 'depth based'].join('|')\r\n        },\r\n        { Name: 'rate', Width: '90' },\r\n        { Name: 'currency', Width: '90', Type: 'Enum', Enum: [\"|AUD\", \"EUR\", \"GBP\", \"NOK\", \"USD\"].join('|') },\r\n        { Name: 'populateDaily', Width: '90', OnChange: \"Grid.Component.populate(Grid, Row, Value)\" }\r\n    ],\r\n    Cols: [\r\n        { Name: 'prior' },\r\n        {\r\n            Name: 'day-2016-06-13',\r\n            Formula: 'day-2016-06-13 ? day-2016-06-13 : Get(Row, \"populatedDay-2016-06-13\")',\r\n            CanEdit: 1\r\n        },\r\n        {\r\n            Name: 'day-2016-06-13_1',\r\n            Formula: 'day-2016-06-13_1 ? day-2016-06-13_1 : Get(Row, \"populatedDay-2016-06-13_1\")',\r\n            CanEdit: 0\r\n        },\r\n        {\r\n            Name: 'X',\r\n            Formula: 'Grid.Component.isAcc ? day-2016-06-13 + day-2016-06-13_1 : day-2016-06-13_1',\r\n            OnChange: 'Grid.SetValue(Row,\"day-2016-06-13_1\",Value,1)',\r\n            // Formula: 'day-2016-06-13_1 ? day-2016-06-13_1 : Get(Row, \"populatedDay-2016-06-13_1\")',\r\n            CanEdit: 1\r\n        },\r\n        {\r\n            Name: 'day-2016-06-14',\r\n            CanEdit: 0\r\n        },\r\n        {\r\n            Name: 'Y',\r\n            Formula: 'Grid.Component.isAcc ? X + day-2016-06-14 : day-2016-06-14',\r\n            OnChange: 'Grid.SetValue(Row,\"day-2016-06-14\",Value,1)',\r\n            // Formula: 'day-2016-06-13_1 ? day-2016-06-13_1 : Get(Row, \"populatedDay-2016-06-13_1\")',\r\n            CanEdit: 1\r\n        },\r\n        {\r\n            Name: 'day-2016-06-14_1',\r\n            // Formula: 'day-2016-06-14_1 ? day-2016-06-14_1 : Get(Row, \"populatedDay-2016-06-14_1\")',\r\n            CanEdit: 1\r\n        },\r\n        {\r\n            Name: 'day-2016-06-15',\r\n            // Formula: 'day-2016-06-15 ? day-2016-06-15 : Get(Row, \"populatedDay-2016-06-15\")',\r\n            CanEdit: 1\r\n        },\r\n        { Name: 'afterOffhire' }\r\n    ],\r\n    Header: {\r\n        name: \"Name\",\r\n        code: \"Code\",\r\n        type: \"Type\",\r\n        unit: \"Unit\",\r\n        rate: \"Rate\",\r\n        currency: \"Currency\",\r\n        populateDaily: \"Populate Daily\",\r\n        prior: \"Before onhire\",\r\n        'day-2016-06-13': \"2016-06-13\",\r\n        'day-2016-06-13_1': \"2016-06-13/1\",\r\n        'day-2016-06-14': \"2016-06-14\",\r\n        'day-2016-06-14_1': \"2016-06-14/1\",\r\n        'day-2016-06-15': \"<span class='vertical-lr'>2016-06-15</span>\",\r\n        afterOffhire: \"After offhire\",\r\n        NoEscape: 1\r\n    },\r\n    // Root: { CDef: 'Node' },\r\n    Head: [\r\n        {\r\n            Kind: 'Filter',\r\n            nameFilter: 11,\r\n            codeFilter: 11\r\n        }\r\n    ],\r\n    Foot: [\r\n        {\r\n            id: 'Fix1',\r\n            CanDelete: '0',\r\n            CanEdit: '0',\r\n            Calculated: '1',\r\n            name: \"Total income\",\r\n            populateDailyFormula: 'sum()'\r\n        }\r\n    ]\r\n}\r\n","import React, { Component, createRef, Fragment } from 'react';\r\nimport layout from './TreeDef'\r\nimport dataService from '../db/dataService'\r\nimport uid from 'uid'\r\n// import './tree-grid.css'\r\n\r\nconst LS_KEY = `data-2`\r\n\r\nfunction migrateData(arr) {\r\n    arr = arr || dataService.getCosts() || []\r\n\r\n    function flat(item) {\r\n        item.id = uid()\r\n        if (item.__children && item.__children.length) {\r\n            item.Def = 'CostGroup'\r\n            item.Items = item.__children.map(flat)\r\n        }\r\n\r\n        const days = Object.entries(item.days)\r\n        if (days.length) {\r\n            days.forEach(([day, value]) => {\r\n                item[`day-${day.replace('/', '_')}`] = value\r\n            })\r\n        }\r\n\r\n        if (item.populatedDays) {\r\n            const populatedDays = Object.entries(item.populatedDays)\r\n            if (populatedDays.length) {\r\n                populatedDays.forEach(([day, value]) => {\r\n                    item[`populatedDay-${day.replace('/', '_')}`] = value\r\n                })\r\n            }\r\n        }\r\n\r\n        // item.Def = 'Cost'\r\n        delete item.__children\r\n        delete item.group\r\n        delete item.days\r\n        delete item.populatedDays\r\n\r\n        return item\r\n    }\r\n\r\n    return arr.map(flat)\r\n}\r\n\r\nconst getBody = () => {\r\n    let data = window.localStorage.getItem(LS_KEY)\r\n    if (data) return JSON.parse(data)\r\n\r\n    data = migrateData()\r\n    window.localStorage.setItem(LS_KEY, JSON.stringify(data))\r\n\r\n    return data\r\n}\r\n\r\nclass TreeGrid extends Component {\r\n    Grid = null\r\n    isAcc = false\r\n    tagRef = createRef()\r\n    _body = getBody()\r\n    _worker = new Worker(\"/sheets.github.io/worker.js\")\r\n\r\n    componentDidMount() {\r\n        this._worker.addEventListener('message', (e) => {\r\n            const [event, newData] = e.data\r\n\r\n            switch (event) {\r\n                case 'updated':\r\n                    this.saveData(newData)\r\n                    break\r\n                case 'error':\r\n                    console.error('Worker error: ', newData)\r\n                    break\r\n                default:\r\n                    console.debug('Worker: event not found!')\r\n            }\r\n        })\r\n\r\n        new Promise(resolve => {\r\n            this.Grid = window.TreeGrid({\r\n                Debug: 'problem',\r\n                DebugCalc: 1,\r\n                Layout: {\r\n                    Data: layout\r\n                },\r\n                Upload: {\r\n                    Format: 'JSON',\r\n                    Type: ['Changes'],\r\n                    Tag: 'grid'\r\n                },\r\n                Data: {\r\n                    Data: {\r\n                        Body: [\r\n                            this._body\r\n                        ]\r\n                    }\r\n                }\r\n            }, this.tagRef.current, { Component: this });\r\n\r\n            window.Grids.OnAfterValueChanged = this.updateData\r\n            window.Grids.OnSave = (grid, row) => {\r\n                console.log(grid.GetXmlData())\r\n            }\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.Grid.Dispose()\r\n    }\r\n\r\n    populate = (Grid, Row, Value) => {\r\n        ['2016-06-13', '2016-06-13_1', '2016-06-14', '2016-06-14_1', '2016-06-15'].forEach(key => {\r\n            Grid.SetValue(Row, `populatedDay-${key}`, Value, 1)\r\n        })\r\n    }\r\n\r\n    saveData = (newData) => {\r\n        window.localStorage.setItem(LS_KEY, JSON.stringify(newData))\r\n        this._body = newData\r\n    }\r\n\r\n    updateData = (grid, row, col) => {\r\n        const newRowData = { id: row.id }\r\n        newRowData[col] = row[col]\r\n        this._worker.postMessage(['change', newRowData, this._body])\r\n    }\r\n\r\n    showCustomMenu = (row, col) => {\r\n        var G = this.Grid;\r\n        const self = this\r\n        this.Grid.ShowMenu(row, col, {\r\n            Items: [\r\n                {\r\n                    Name: self.isAcc ? \"Individual\" : \"Accumulative\",\r\n                    OnClick() {\r\n                        self.isAcc = !self.isAcc\r\n                        G.ReloadBody(() => {\r\n                            console.log('done')\r\n                        })\r\n                    }\r\n                },\r\n                {\r\n                    Name: row.Deleted ? \"Undelete row\" : \"Delete row\",\r\n                    OnClick: function () {\r\n                        G.DeleteRow(row, row.Deleted ? 3 : 1);\r\n                    }\r\n                },\r\n                {\r\n                    Name: row.Selected ? \"Deselect row\" : \"Select row\",\r\n                    OnClick: function () {\r\n                        G.SelectRow(row);\r\n                    }\r\n                },\r\n                {\r\n                    Name: \"Copy row\",\r\n                    OnClick: function () {\r\n                        G.CopyRow(row, null, row, 1, 0);\r\n                    }\r\n                },\r\n                {\r\n                    Name: \"Add new row\",\r\n                    OnClick: function () {\r\n                        G.AddRow(null, row, 1);\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n        return 1;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <div ref={this.tagRef}/>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TreeGrid\r\n","export default (obj) => JSON.parse(JSON.stringify(obj))\r\n","// days.2020-02-01/1 => day_2020-02-01__1\r\n// populatedDays.2020-02-01/1 => populatedDay_2020-02-01__1\r\nexport default (key, replaceFrom = '', replaceTo = '') => key\r\n    .replace(replaceFrom, replaceTo)\r\n    .replace(/\\//g, '__')\r\n    .replace(/\\./g, '_')\r\n","export default {\r\n    isEmpty: v => v === '',\r\n    isNotEmpty: v => v !== '',\r\n    isNumber: v => typeof v === 'number' && !isNaN(v)\r\n}\r\n","/**\r\n * TreeGrid component\r\n * http://www.treegrid.com/TreeGrid5_6/Doc/TreeGridFAQ.htm\r\n *\r\n */\r\nimport React, { Component, createRef } from 'react';\r\nimport noop from 'lodash/noop'\r\nimport PropTypes from 'prop-types'\r\nimport deepClone from '../../helpers/deep-clone'\r\nimport { v4 as uuid } from 'uuid/wrapper.mjs'\r\nimport convertObjectToFlatKeys from './utils/convert-object-to-flat-keys'\r\nimport merge from 'lodash/merge'\r\nimport helpers from './utils/global-helpers'\r\n\r\nconst { TreeGrid, Grids } = window\r\nconst dataManager =  new Worker(\"/sheets.github.io/ManageData.worker.js\")\r\n\r\n\r\nconst propTypes = {\r\n    // events\r\n    onDataChanged: PropTypes.func,\r\n\r\n    // data\r\n    body: PropTypes.array,\r\n    layout: PropTypes.object,\r\n    nestedKey: PropTypes.string,\r\n\r\n    // rows defaults http://www.treegrid.com/Doc/RowDefaults.htm\r\n    Def: PropTypes.string,\r\n    DefEmpty: PropTypes.string,\r\n    DefParent: PropTypes.string\r\n}\r\n\r\nconst defaultProps = {\r\n    onDataChanged: noop,\r\n    nestedKey: '__children',\r\n    body: [],\r\n    Def: 'R',\r\n    DefEmpty: 'R',\r\n    DefParent: 'R'\r\n}\r\n\r\nclass TreeGridComponent extends Component {\r\n    static propTypes = propTypes\r\n    static defaultProps = defaultProps\r\n\r\n    $el = createRef()\r\n    grid = null\r\n    #TreeGridUpdatedCallback = noop\r\n    #gridBody = this.prepareBody(this.props.body)\r\n\r\n    componentDidMount() {\r\n        this.subscribeDataManagerEvents()\r\n        this.initGrid()\r\n        this.subscribeGridEvents()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.unsubscribeDataManagerEvents()\r\n\r\n        if (!this.grid) return\r\n        this.grid.Dispose()\r\n    }\r\n\r\n    initGrid() {\r\n        const Data = merge({}, this.props.layout)\r\n\r\n        this.grid = TreeGrid(\r\n            {\r\n                Debug: 'Problem',\r\n                Layout: {\r\n                    Data\r\n                },\r\n                Upload: {\r\n                    Format: 'JSON',\r\n                    Type: ['Changes'],\r\n                    Tag: 'grid'\r\n                },\r\n                Data: {\r\n                    Data: {\r\n                        Body: [this.#gridBody]\r\n                    }\r\n                }\r\n            },\r\n\r\n            // root element\r\n            this.$el.current,\r\n\r\n            // inject to Grid\r\n            {\r\n                Component: this,\r\n                Helpers: helpers\r\n            }\r\n        );\r\n    }\r\n\r\n    subscribeGridEvents = () => {\r\n        Grids.OnCustomAjax = (G, IO, data, func) => {\r\n            if (this.grid === G) {\r\n                const { body, nestedKey } = this.props\r\n                const { Changes } = JSON.parse(data)\r\n\r\n                this.#TreeGridUpdatedCallback = func // TODO: weak place. need to rethink architecture of communication with TreeGrid\r\n                dataManager.postMessage(['update', { changes: Changes, data: body, nestedKey }])\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        // add custom id generator\r\n        Grids.OnGenerateId = () => uuid()\r\n    }\r\n\r\n    subscribeDataManagerEvents = () => {\r\n        dataManager.addEventListener('message', this.onDataManagerMessage)\r\n    }\r\n\r\n    unsubscribeDataManagerEvents = () => {\r\n        dataManager.removeEventListener('message', this.onDataManagerMessage)\r\n    }\r\n\r\n    onDataManagerMessage = (e) => {\r\n        if (!Array.isArray(e.data)) return\r\n\r\n        const [event, data] = e.data\r\n\r\n        switch (event) {\r\n            case 'updated':\r\n                this.onDataUpdated(data.data)\r\n                break\r\n            case 'error':\r\n                console.error('Worker error: ', data.data)\r\n                break\r\n            default:\r\n                console.debug('Worker: event not found!')\r\n        }\r\n    }\r\n\r\n    onDataUpdated(newData) {\r\n        this.props.onDataChanged(newData)\r\n\r\n        this.#TreeGridUpdatedCallback(0, {\r\n            IO: {},\r\n            Changes: []\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Data  format http://www.treegrid.com/Doc/DataFormats.htm#JSONFormat\r\n     * @param arr\r\n     * @returns {{}[]}\r\n     */\r\n    prepareBody(arr) {\r\n        const { nestedKey, Def, DefParent, DefEmpty } = this.props\r\n\r\n        function traverse(item) {\r\n            if (item[nestedKey] && item[nestedKey].length) {\r\n                item.Def = item.Def || DefParent\r\n                item.Items = item[nestedKey].map(traverse)\r\n                if (nestedKey !== 'Items') delete item[nestedKey]\r\n            } else {\r\n                item.Def = item.Def || Def\r\n            }\r\n\r\n            item.DefParent = item.DefParent || DefParent\r\n            item.DefEmpty = item.DefEmpty || DefEmpty\r\n\r\n            return convertObjectToFlatKeys(item)\r\n        }\r\n\r\n        return deepClone(arr).map(traverse)\r\n    }\r\n\r\n    render() {\r\n        return <div ref={this.$el} style={{ height: '100%' }}/>\r\n    }\r\n}\r\n\r\nexport default TreeGridComponent\r\n","import isPlainObject from 'lodash/isPlainObject'\r\nimport convertKey from './convert-key'\r\n\r\n/**\r\n * Convert Object to one level paths. {test: {test:1}} => test_test: 1\r\n * @param item {Object}\r\n * @param keyAcc\r\n * @param acc\r\n * @returns {{}}\r\n */\r\nexport default function convertObjectToFlatKeys(item, keyAcc = '', acc = {}) {\r\n    for (let key in item) {\r\n        if (item.hasOwnProperty(key)) {\r\n            let path = keyAcc ? `${keyAcc}_${convertKey(key)}` : convertKey(key)\r\n\r\n            if (isPlainObject(item[key])) {\r\n                convertObjectToFlatKeys(item[key], path, acc)\r\n            } else {\r\n                acc[path] = item[key]\r\n            }\r\n        }\r\n    }\r\n\r\n    return acc\r\n}\r\n","export default {\r\n    Cfg: {\r\n        id: 'TimeTracker',\r\n        ShowDeleted: \"0\",\r\n        AutoSort: \"0\",\r\n        DateStrings: '1',\r\n        ReloadChanged: '3',\r\n        MainCol: 'name',\r\n        NoVScroll: 0,\r\n        Sorting: 0,\r\n        Paging: 2,\r\n        PageLength: 1,\r\n        AutoUpdate: 1,\r\n        StandardFilter: 3,\r\n        SaveExpanded: 1,\r\n        PersistentCfg: 2,\r\n        Filtered: 0,\r\n        RoundNumbers: 1,\r\n        RoundNumbersDigits: 2,\r\n        Size: 'Small',\r\n        Undo: 32,\r\n        RowIndex: \"Pos\",\r\n        SearchLap: 1,\r\n        FilterLap: 1,\r\n        SelectingCells: 1,\r\n        SelectingFocus: 1,\r\n        FocusRect: 2,\r\n        FormulaEditing: 1,\r\n        Validate: 'Changed,Messages',\r\n        // CfgId: 'Costs',\r\n        ExportType: 'Expanded,Outline,Indent,ForceBorder,TextType,Strings,FixedRows,Size'\r\n    },\r\n    Toolbar: {\r\n        Cells30Manipulate: \"Undo,Redo,Add,AddChild,Calc,Outdent,Indent,ExpandAll,CollapseAll\"\r\n    },\r\n    Def: {\r\n        R: {\r\n            Expanded: 1\r\n        }\r\n    },\r\n    DefCols: {\r\n        C: {\r\n            CanFilter: 0\r\n        }\r\n    },\r\n    Root: {\r\n        AcceptDef: 'Well',\r\n        CDef: 'Well'\r\n    },\r\n    Panel: {\r\n        Copy: 1,\r\n        Delete: 1,\r\n        Select: 1,\r\n        Move: 1\r\n    }\r\n}\r\n","export default function centerHeader(key, config) {\r\n    config[`${key}Align`] = 'Center'\r\n}\r\n","import centerHeader from '../../components/TreeGridComponent/utils/center-header'\r\n\r\nexport default () => {\r\n    const mainHeader = {\r\n        Pos: 'Pos',\r\n        name: \"Name\",\r\n        code: \"Code\",\r\n        afeHours: 'AFE',\r\n        targetHours: 'Target',\r\n        dsvHours: 'DSV',\r\n        actualHours: 'Actual',\r\n        nptHours: 'NPT',\r\n        wowHours: 'WOW',\r\n        _tftHours: 'TFT',\r\n        _unPtHours: 'UN-PT',\r\n        _iltHours: 'ILT',\r\n        _plannedDepth: 'Planned',\r\n        _actualDepth: 'Actual',\r\n        _start: 'Start',\r\n        _end: 'End',\r\n        behindHours: 'Days -ahead/+behind',\r\n        contractor: 'Contractor',\r\n        comment: 'Comment',\r\n        experienceLinks: 'Ex Links'\r\n    }\r\n\r\n    // set align for header' key\r\n    // http://www.treegrid.com/Doc/ColBasics.htm#HeaderCellvalue\r\n    Object.keys(mainHeader).forEach((key) => centerHeader(key, mainHeader))\r\n\r\n    mainHeader.id = 'Header'\r\n\r\n    const upHeader = {\r\n        code: 'Identification',\r\n        afeHours: 'Duration [h]',\r\n        plannedDepth: 'End Depth [mMD]',\r\n        start: 'Timing',\r\n        contractor: 'Annotation'\r\n    }\r\n\r\n    Object.keys(upHeader).forEach((key) => centerHeader(key, upHeader))\r\n\r\n    // merge spanning\r\n    Object.assign(upHeader, {\r\n        Kind: 'Header',\r\n        Spanned: 1,\r\n        Pos: '',\r\n        PosSpan: 2,\r\n        codeSpan: 2,\r\n        afeHoursSpan: 10,\r\n        plannedDepthSpan: 4,\r\n        startSpan: 5,\r\n        contractorSpan: 3\r\n    })\r\n\r\n    return [\r\n        upHeader,\r\n        mainHeader\r\n    ]\r\n}\r\n","export default function getPrevEvent(grid, row) {\r\n    const _row = grid.GetPrev(row)\r\n\r\n    if (!_row) return\r\n\r\n    if (_row.Def.Name !== 'Event') {\r\n        return getPrevEvent(grid, _row)\r\n    }\r\n\r\n    return _row\r\n}\r\n","import isNumber from 'lodash/isNumber'\r\nimport isNaN from 'lodash/isNaN'\r\n\r\nexport default function pickNumber(...args) {\r\n    return args.find(n => isNumber(n) && !isNaN(n));\r\n};\r\n","import React, { Component } from 'react';\r\nimport TreeGridComponent from '../../../components/TreeGridComponent'\r\nimport deepClone from '../../../helpers/deep-clone'\r\n\r\n// Layout\r\nimport mergeLayouts from '../../../components/TreeGridComponent/utils/merge-layouts'\r\nimport staticLayout from '../static-layout'\r\nimport createColumns from '../create-columns'\r\nimport createLeftColumns from '../create-left-columns'\r\nimport createHead from '../create-head'\r\nimport createFoot from '../create-foot'\r\nimport createSolid from '../create-solid'\r\nimport createRowsDef from '../create-rows-def'\r\n\r\n// Utils\r\nimport getNextEvent from './utils/get-next-event'\r\nimport getPrevEvent from './utils/get-prev-event'\r\nimport pickNumber from '../../../helpers/pick-number'\r\nimport isUndefined from 'lodash/isUndefined'\r\n\r\nconst { TGAddEvent, TGDelEvent } = window\r\n\r\n// TODO: need revision\r\nconst validator = {\r\n    actualHours(grid, row, col) {\r\n        if (row.Def.Name !== 'Event') return\r\n\r\n        const nextEvent = getNextEvent(grid, row)\r\n        if (!nextEvent) return 0\r\n\r\n        const nextNotEmpty = grid.Helpers.isNotEmpty(nextEvent[col])\r\n        const currentEmpty = grid.Helpers.isEmpty(row[col])\r\n\r\n        if (nextNotEmpty && currentEmpty) {\r\n            return 1\r\n        }\r\n\r\n        return 0\r\n    },\r\n    _tftHours(grid, row, col) {\r\n        if (row[col] < 0) {\r\n            return 1\r\n        }\r\n\r\n        return 0\r\n    }\r\n}\r\n\r\nclass TimeTrackerGrid extends Component {\r\n    static nestedKey = 'Items'\r\n    layout = this.createLayout()\r\n\r\n    state = {\r\n        body: this.prepareBody()\r\n    }\r\n\r\n    componentDidMount() {\r\n        TGAddEvent(\"OnValidate\", \"TimeTracker\", this.onValidate);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        TGDelEvent(\"OnValidate\", \"TimeTracker\", this.onValidate);\r\n    }\r\n\r\n    createLayout() {\r\n        const { model } = this.props\r\n        const OperationStartDate = model.get('OperationStartDate')\r\n        const dynamicLayout = {\r\n            Cfg: {\r\n                ExportName: `${model.get('Name')}.time-tracker`\r\n            }\r\n        }\r\n\r\n        dynamicLayout.LeftCols = createLeftColumns()\r\n\r\n        dynamicLayout.Cols = createColumns()\r\n\r\n        dynamicLayout.Head = createHead()\r\n\r\n        dynamicLayout.Foot = createFoot()\r\n\r\n        dynamicLayout.Solid = createSolid({ OperationStartDate })\r\n\r\n        dynamicLayout.Def = createRowsDef()\r\n\r\n        return mergeLayouts(staticLayout, dynamicLayout)\r\n    }\r\n\r\n    getStartOperationDate() {\r\n        const startDate = this.props.model.get('OperationStartDate')\r\n\r\n        return +new Date(startDate) || +new Date()\r\n    }\r\n\r\n    prepareBody() {\r\n        const { model } = this.props\r\n        const wells = deepClone(model.get('Wells') || [])\r\n        const defs = ['Well', 'Phase', 'Event']\r\n\r\n        function addRowDefinitions(row, level = 0) {\r\n            row.Def = defs[level]\r\n\r\n            if (row.Items) {\r\n                row.Items.forEach(row => addRowDefinitions(row, level + 1))\r\n            }\r\n        }\r\n\r\n        wells.forEach(row => addRowDefinitions(row, 0))\r\n        console.log(wells)\r\n        return wells\r\n    }\r\n\r\n    onValidate = (grid, row, col, err, errors) => {\r\n        if (validator[col]) {\r\n            return validator[col](grid, row, col)\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    onDataChanged = (newData) => {\r\n        this.setState(\r\n            { body: newData },\r\n            () => {\r\n                this.props.model.set('Wells', newData)\r\n            }\r\n        )\r\n    }\r\n\r\n    getEventStart = (grid, row, get) => {\r\n        const eventRow = getPrevEvent(grid, row)\r\n\r\n        if (eventRow) {\r\n            return get(eventRow, '_end')\r\n        }\r\n\r\n        return this.getStartOperationDate()\r\n    }\r\n\r\n    getEventEnd = (start, duration) => {\r\n        if (start && typeof duration === 'number') {\r\n            return start + duration\r\n        }\r\n\r\n        return ''\r\n    }\r\n\r\n    getEventDuration = (...args) => {\r\n        const hours = pickNumber(...args)\r\n\r\n        if (isUndefined(hours)) return ''\r\n\r\n        return 60 * 60 * 1000 * hours // to milliseconds\r\n    }\r\n\r\n    getPlannedDepth = (grid, row, get, plannedDepth) => {\r\n        if (grid.Helpers.isNotEmpty(plannedDepth)) return plannedDepth\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        if (eventRow) {\r\n            return get(eventRow, '_plannedDepth')\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    getActualDepth = (grid, row, get, actualDepth) => {\r\n        if (grid.Helpers.isNotEmpty(actualDepth)) return actualDepth\r\n\r\n        if (!this.hasActual(grid, row)) return ''\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        if (eventRow) {\r\n            return get(eventRow, '_actualDepth')\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    getBehindHours = (grid, row, get, delta) => {\r\n        if (!this.hasActual(grid, row)) return ''\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        const prevDelta = eventRow ? get(eventRow, 'behindHours') : 0\r\n\r\n        return prevDelta + delta\r\n    }\r\n\r\n    hasActual = (grid, row) => {\r\n        return grid.Helpers.isNotEmpty(row.actualHours)\r\n    }\r\n\r\n    handleOperationStartDateChange = (grid, value) => {\r\n        this.props.model.set('OperationStartDate', value)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"time-grid-view\">\r\n            <TreeGridComponent\r\n                layout={this.layout}\r\n                body={this.state.body}\r\n                nestedKey={TimeTrackerGrid.nestedKey}\r\n                onDataChanged={this.onDataChanged}\r\n                getBehindHours={this.getBehindHours}\r\n                getActualDepth={this.getActualDepth}\r\n                getPlannedDepth={this.getPlannedDepth}\r\n                getEventEnd={this.getEventEnd}\r\n                getEventStart={this.getEventStart}\r\n                getEventDuration={this.getEventDuration}\r\n                handleOperationStartDateChange={this.handleOperationStartDateChange}\r\n                {...this.props}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default TimeTrackerGrid\r\n","export default function getNextEvent(grid, row) {\r\n    const _row = grid.GetNext(row)\r\n\r\n    if (!_row) return\r\n\r\n    if (_row.Def.Name !== 'Event') {\r\n        return getNextEvent(grid, _row)\r\n    }\r\n\r\n    return _row\r\n}\r\n","export default () => {\r\n    return [\r\n        {\r\n            Name: 'code',\r\n            CanFilter: 1,\r\n            MinWidth: 60,\r\n            CaseSensitive: 0\r\n        },\r\n        {\r\n            Name: 'name',\r\n            RelWidth: 1,\r\n            MinWidth: 250,\r\n            Type: 'Text',\r\n            CanFilter: 1,\r\n            ClassFormula: 'afeHours === \"\" && \"text-primary\"',\r\n            CaseSensitive: 0\r\n        }\r\n    ]\r\n}\r\n","export default () => {\r\n    const cols = [\r\n        {\r\n            Name: 'afeHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'targetHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'dsvHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'actualHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'nptHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: 'wowHours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: '_tftHours',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Type: 'Float',\r\n            Formula: 'actualHours - nptHours - wowHours'\r\n        },\r\n        {\r\n            Name: 'unPtHours',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_unPtHours',\r\n            CanEmpty: 1,\r\n            CanEdit: 1,\r\n            OnChange: 'Grid.SetValue(Row, \"unPtHours\", Value, 1)',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Formula: 'Grid.Helpers.isEmpty(afeHours) ? actualHours : \"\"',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: '_iltHours',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Type: 'Float',\r\n            CanEmpty: 1,\r\n            Formula: 'actualHours ? _tftHours - targetHours : \"\"'\r\n        },\r\n        {\r\n            Name: 'plannedDepth',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_plannedDepth',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Type: 'Float',\r\n            CanEdit: 1,\r\n            CanEmpty: 1,\r\n            OnChange: 'Grid.SetValue(Row, \"plannedDepth\", Value, 1)',\r\n            ClassFormula: 'Grid.Helpers.isEmpty(plannedDepth) && \"TSClassReadOnly\"',\r\n            Formula: 'Grid.Component.props.getPlannedDepth(Grid, Row, Get, plannedDepth)'\r\n        },\r\n        {\r\n            Name: 'actualDepth',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_actualDepth',\r\n            MinWidth: 80,\r\n            Format: ',0.00',\r\n            Type: 'Float',\r\n            CanEdit: 1,\r\n            CanEmpty: 1,\r\n            OnChange: 'Grid.SetValue(Row, \"actualDepth\", Value, 1)',\r\n            ClassFormula: 'Grid.Helpers.isEmpty(actualDepth) && \"TSClassReadOnly\"',\r\n            Formula: 'Grid.Component.props.getActualDepth(Grid, Row, Get, actualDepth)'\r\n        },\r\n        {\r\n            Name: '_eventDuration',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0,\r\n            Formula: 'Grid.Component.props.getEventDuration(actualHours, dsvHours)'\r\n        },\r\n        {\r\n            Name: 'start',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_start',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            CanEdit: 1,\r\n            OnChange: `Grid.SetValue(Row, \"start\", Value, 1)`,\r\n            ClassFormula: 'Grid.Helpers.isEmpty(start) && \"TSClassReadOnly\"',\r\n            Formula: 'start ? start : Grid.Component.props.getEventStart(Grid, Row, Get)',\r\n            MinWidth: 120\r\n        },\r\n        {\r\n            Name: '_end',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            MinWidth: 120,\r\n            Formula: 'Grid.Component.props.getEventEnd(_start, _eventDuration)'\r\n        },\r\n        {\r\n            Name: 'deltaAfeActual',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0,\r\n            Formula: '(Grid.Helpers.isNotEmpty(afeHours) ? actualHours - afeHours : actualHours) / 24'\r\n        },\r\n        {\r\n            Name: 'behindHours',\r\n            MinWidth: 80,\r\n            Type: 'Float',\r\n            CanEmpty: 1,\r\n            Format: '+,0.0; -,0.0; 0',\r\n            Formula: 'Grid.Component.props.getBehindHours(Grid, Row, Get, deltaAfeActual)'\r\n        },\r\n        {\r\n            Name: 'contractor',\r\n            MinWidth: 120\r\n        },\r\n        {\r\n            Name: 'comment',\r\n            MinWidth: 120\r\n        },\r\n        {\r\n            Name: 'experienceLinks',\r\n            MinWidth: 80\r\n        }\r\n    ]\r\n\r\n    return cols\r\n}\r\n","export default () => {\r\n    const total = {\r\n        id: 'Total',\r\n        Class: 'time-grid-total',\r\n        Color: '#D0E6F5',\r\n        CanDelete: 0,\r\n        CanEdit: 0,\r\n        Calculated: 1,\r\n        code: \"SUM\",\r\n\r\n        // calculations\r\n        dsvHoursFormula: 'sum()',\r\n        actualHoursFormula: 'sum()',\r\n        nptHoursFormula: 'sum()',\r\n        wowHoursFormula: 'sum()',\r\n        tftHoursFormula: 'sum()',\r\n        afeHoursFormula: 'sum()',\r\n        targetHoursFormula: 'sum()',\r\n        iltHoursFormula: 'sum()',\r\n        unPtHoursFormula: 'sum()',\r\n        _plannedDepthFormula: '',\r\n        _actualDepthFormula: '',\r\n        _startFormula: '',\r\n        _endFormula: 'Grid.GetLast() ? Get(Grid.GetLast(), \"_end\") : \"\"',\r\n        behindHoursFormula: 'calc(\"behindHours ? behindHours : Result\")',\r\n    }\r\n\r\n    return [total]\r\n}\r\n","export default ({ OperationStartDate }) => {\r\n    const topBar = {\r\n        id: 'topBar',\r\n        Kind: 'Topbar',\r\n        Cells: 'OperationStartDate',\r\n\r\n        // OperationStartDate cell settings\r\n        OperationStartDate,\r\n        OperationStartDateLabel: 'Start operation',\r\n        OperationStartDateWidth: 120,\r\n        OperationStartDateFormat: 'yyyy-M-d H:mm',\r\n        OperationStartDateType: 'Date',\r\n        OperationStartDateRecalc: 256,\r\n        OperationStartDateOnChange: 'Grid.Component.props.handleOperationStartDateChange(Grid,Value)'\r\n    }\r\n\r\n    return [topBar]\r\n}\r\n","export default () => {\r\n    const commonGroupDef = {\r\n        CanEdit: 0,\r\n        Calculated: 1,\r\n\r\n        nameCanEdit: 1,\r\n        codeCanEdit: 1,\r\n\r\n        // calculations\r\n        dsvHoursFormula: 'sum()',\r\n        actualHoursFormula: 'sum()',\r\n        wowHoursFormula: 'sum()',\r\n        nptHoursFormula: 'sum()',\r\n        tftHoursFormula: 'sum()',\r\n        afeHoursFormula: 'sum()',\r\n        targetHoursFormula: 'sum()',\r\n        iltHoursFormula: 'sum()',\r\n        unPtHoursFormula: 'sum()',\r\n        _plannedDepthFormula: 'calc(\"_plannedDepth ? _plannedDepth : Result\")',\r\n        _actualDepthFormula: 'calc(\"_actualDepth ? _actualDepth : Result\")',\r\n        _startFormula: 'Row.firstChild ? Get(Row.firstChild, \"_start\") : \"\"',\r\n        _endFormula: 'Row.lastChild ? Get(Row.lastChild, \"_end\") : \"\"',\r\n        behindHoursFormula: 'calc(\"behindHours ? behindHours : Result\")'\r\n    }\r\n\r\n    const Well = {\r\n        CDef: 'Phase',\r\n        AcceptDef: 'Phase',\r\n\r\n        Class: 'time-grid-well',\r\n        Color: '#d7d7d7',\r\n\r\n        ...commonGroupDef\r\n    }\r\n\r\n    const Phase = {\r\n        CDef: 'Event',\r\n        AcceptDef: 'Event',\r\n\r\n        Class: 'time-grid-phase',\r\n        Color: '#f0f0f0',\r\n\r\n        ...commonGroupDef\r\n    }\r\n\r\n    const eventCalcOrder = [\r\n        'nameClass',\r\n        'deltaAfeActual',\r\n        'behindHours',\r\n        '_tftHours',\r\n        '_unPtHours',\r\n        '_iltHours',\r\n        '_plannedDepth',\r\n        '_plannedDepthClass',\r\n        '_actualDepth',\r\n        '_actualDepthClass',\r\n        '_eventDuration',\r\n        '_start',\r\n        '_startClass',\r\n        '_end'\r\n    ]\r\n\r\n    const Event = {\r\n        AcceptDef: '',\r\n\r\n        CalcOrder: eventCalcOrder.join()\r\n    }\r\n\r\n    return { Well, Phase, Event }\r\n}\r\n","import mergeWith from 'lodash/mergeWith'\r\n\r\nexport default function (...args) {\r\n    return mergeWith(\r\n        {\r\n            Actions: {\r\n                OnDel: '!StartEditEmpty' // prevent delete rows on del button pressing\r\n            },\r\n            Lang: {\r\n                Format: {\r\n                    GroupSeparator: ' '\r\n                }\r\n            }\r\n        },\r\n        ...args,\r\n        function (objValue, srcValue) {\r\n            if (Array.isArray(objValue)) {\r\n                return srcValue.concat(objValue)\r\n            }\r\n        }\r\n    )\r\n}\r\n","import { v4 as uuid } from 'uuid/wrapper.mjs'\r\nimport camelCase from 'lodash/camelCase'\r\n\r\nconst ignoreKeys = ['uid', '__children', 'derivedActualDepth', 'derivedPlannedDepth', 'overriddenStart', 'iltHours', 'tftHours', 'behindHours', 'end', 'actualHoursValidation']\r\n\r\nfunction splitDerrickTypes(acc, item) {\r\n    const main = {\r\n        id: item.uid || item.id || uuid(),\r\n        name: item.name,\r\n        code: item.code\r\n    }\r\n    const aux = {\r\n        id: uuid(),\r\n        name: item.auxName,\r\n        code: item.auxCode\r\n    }\r\n\r\n    acc[0].push(main)\r\n    acc[1].push(aux)\r\n\r\n    if (item.__children && item.__children.length) {\r\n        const [mainChildren, auxChildren] = item.__children.reduce(splitDerrickTypes, [[], []])\r\n\r\n        main.Items = mainChildren\r\n        aux.Items = auxChildren\r\n\r\n        return acc\r\n    }\r\n\r\n    Object.entries(item).forEach(([key, value]) => {\r\n        if (ignoreKeys.includes(key)) return\r\n\r\n        if (/^aux/.test(key)) {\r\n            const newKey = camelCase(key.replace('aux', ''))\r\n            aux[newKey] = value\r\n            return\r\n        }\r\n\r\n        if (key === 'start' && (value || item.overriddenStart)) {\r\n            main[key] = +new Date(value || item.overriddenStart)\r\n            return\r\n        }\r\n\r\n        main[key] = value\r\n    })\r\n\r\n    return acc\r\n}\r\n\r\nexport default (phases) => {\r\n    if (!phases) return [[], []]\r\n\r\n    return phases.reduce(splitDerrickTypes, [[], []])\r\n}\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport TimeTrackerGrid from './TimeTrackerGrid'\r\nimport migrateData from './migrate-data'\r\nimport dataService from '../../db/dataService'\r\n\r\nconst version = 'phases-v2'\r\n\r\n\r\nclass TimeTracker extends Component {\r\n    model = {\r\n        attrs: {},\r\n        set(key, v) {\r\n            this.attrs[key] = v\r\n            this.save()\r\n        },\r\n        get(key) {\r\n            return this.attrs[key]\r\n        },\r\n        load(v) {\r\n            this.attrs = v\r\n        },\r\n        save() {\r\n            window.localStorage.setItem(version, this.toJSON())\r\n        },\r\n        toJSON() {\r\n            return JSON.stringify(this.attrs)\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        const attrs = window.localStorage.getItem(version)\r\n        if (attrs) {\r\n            this.model.load(JSON.parse(attrs))\r\n        } else {\r\n            const [Phases] = migrateData(dataService.getPhases())\r\n            const Wells = [{\r\n                name: 'Well #1',\r\n                Items: Phases\r\n            }]\r\n\r\n            this.model.load({ Wells })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <TimeTrackerGrid model={this.model}/>\r\n    }\r\n}\r\n\r\nexport default TimeTracker\r\n","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport NavBar from './components/NavBar'\r\nimport Handsontable from './views/Handsontable'\r\nimport SpreadJS from './views/SpreadJS'\r\nimport ZingGrid from './views/ZingGrid'\r\nimport WijmoGrid from './views/WijmoGrid'\r\nimport TreeGrid from './views/TreeGrid'\r\nimport TimeTracker from './views/TimeTracker'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\n\r\n\r\nclass Sample extends Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <NavBar/>\r\n                <div className=\"views-container\">\r\n                    <Switch>\r\n                        <Route path=\"/time-tracker\">\r\n                            <TimeTracker/>\r\n                        </Route>\r\n\r\n                        <Route exact path=\"/\">\r\n                            <Handsontable/>\r\n                        </Route>\r\n                        <Route path=\"/spread-js\">\r\n                            <SpreadJS/>\r\n                        </Route>\r\n                        <Route path=\"/zing-grid\">\r\n                            <ZingGrid/>\r\n                        </Route>\r\n                        <Route path=\"/wijmo-grid\">\r\n                            <WijmoGrid/>\r\n                        </Route>\r\n\r\n                        <Route path=\"/tree-grid\">\r\n                            <TreeGrid/>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </HashRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sample\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}