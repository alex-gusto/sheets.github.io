{"version":3,"sources":["components/TreeGridComponent/config lazy /^/.*$/ groupOptions: {} namespace object","components/NavBar.js","helpers/deep-clone.js","components/TreeGridComponent/utils/global-helpers.js","components/TreeGridComponent/TreeGridComponent.js","components/TreeGridComponent/utils/merge-layouts.js","views/TimeTracker/static-layout.js","views/TimeTracker/create-head.js","views/TimeTracker/TimeTrackerGrid/utils/get-prev-event.js","helpers/pick-number.js","components/TreeGridComponent/validator/ChangesHolder.js","components/TreeGridComponent/validator/BaseValidator.js","views/TimeTracker/TimeTrackerGrid/TimeTrackerGrid.js","views/TimeTracker/create-left-columns.js","views/TimeTracker/create-columns.js","components/TreeGridComponent/utils/center-header.js","views/TimeTracker/create-foot.js","views/TimeTracker/create-solid.js","views/TimeTracker/create-rows-def.js","db/dataService.js","views/TimeTracker/TimeTracker.js","views/Companies/static-layout.js","views/Companies/constants.js","views/Companies/create-head.js","views/Companies/create-foot.js","views/Companies/create-layout.js","views/Companies/create-columns.js","views/Companies/create-left-columns.js","views/Companies/Companies.jsx","views/HighchartGant/HighchartGant.jsx","views/TreeGridGantt/static-layout.js","views/TreeGridGantt/create-body.js","views/TreeGridGantt/DataListManager.js","views/TreeGridGantt/TreeGridGantt.jsx","views/TreeGridGantt/create-layout.js","views/TreeGridGantt/create-solid.js","views/TreeGridGantt/create-left-cols.js","views/TreeGridGantt/create-cols.js","App.js","index.js","components/TreeGridComponent/config/default-layout.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","NavBar","className","to","Component","obj","JSON","parse","stringify","isEmpty","v","isNotEmpty","isNumber","isNaN","window","TreeGrid","Grids","OnCustomAjax","G","IO","data","func","Url","res","default","catch","err","OnDataChanged","GetChanges","defaultProps","onDataChanged","noop","nestedKey","body","Def","DefEmpty","DefParent","Validator","TreeGridComponent","$el","createRef","grid","gridBody","prepareBody","props","dataManager","Worker","subscribeGridEvents","Changes","ganttRunKey","validChanges","errors","validate","hasErrors","length","Result","AcceptChanges","addEventListener","onDataManagerMessage","removeEventListener","postMessage","changes","Array","isArray","event","console","error","debug","this","initGrid","terminate","Dispose","layout","Data","merge","Debug","Layout","Upload","Format","Flags","Type","Body","current","Helpers","helpers","arr","traverse","item","Items","ref","style","height","width","args","mergeWith","defaultLayout","objValue","srcValue","concat","Cfg","ShowDeleted","AutoSort","DateStrings","ReloadChanged","MainCol","NoVScroll","Sorting","AutoUpdate","StandardFilter","SaveExpanded","PersistentCfg","Filtered","RoundNumbers","RoundNumbersDigits","Size","Undo","RowIndex","SearchLap","FilterLap","Validate","Sync","SyncId","ExportType","Toolbar","Cells30Manipulate","R","Expanded","DefCols","C","CanFilter","Root","AcceptDef","CDef","Panel","Copy","Delete","Select","Move","MenuPrint","Attribute","HideUnused","getPrevEvent","row","_row","GetPrev","Name","pickNumber","find","n","ChangesHolder","_changes","key","message","change","getChange","messages","getMessages","push","getErrorKey","addError","values","reduce","acc","entries","forEach","value","m","BaseValidator","invalidChanges","rules","GetRowById","fn","rule","cb","forEachRule","call","getChanges","TimeTrackerGrid","createLayout","getEventStart","get","eventRow","OperationStartDate","getEventEnd","start","duration","getEventDuration","hours","isUndefined","getPlannedDepth","plannedDepth","getActualDepth","actualDepth","hasActual","getBehindHours","delta","actualHours","isAux","DerrickType","dynamicLayout","MinWidth","CaseSensitive","RelWidth","Cols","CanEmpty","EditFormat","Visible","CanHide","CanPrint","CanExport","Formula","CanEdit","OnChange","ClassFormula","createColumns","Head","mainHeader","Pos","name","_start","_end","config","centerHeader","createHead","Foot","Color","CanDelete","Calculated","hoursFormula","_startFormula","_endFormula","Solid","Cells","OperationStartDateRecalc","Space","Tag","OperationStartDateLabel","OperationStartDateWidth","OperationStartDateFormat","OperationStartDateType","OperationStartDateOnChange","createSolid","commonGroupDef","nameCanEdit","codeCanEdit","Well","Class","Phase","Event","CalcOrder","join","createRowsDef","mergeLayouts","staticLayout","getFromLS","days","getDays","DataService","instance","saveToLS","localStorage","setItem","getItem","Phases","PhasesAux","Companies","Costs","totalDuration","sum","s","getStartTime","date","moment","format","TimeTracker","newData","setState","dataService","save","handleOperationStartDateChange","handleDerrickTypeChange","state","prepareState","getPhases","getPhasesAux","wells","deepClone","defs","reCalc","addRowDefinitions","level","Recalc","Dragging","HideZero","PrintPageOrientation","PrintPageSize","ColPaging","Alternate","Comment","CanCopy","CanSelect","CanDrag","Cells20Data","Cells60Cfg","MenuExport","COLS","daysHeader","Kind","Spanned","nameAlign","companiesHeader","commentRow","nameVertAlign","nameRowSpan","day","colName","assign","replaceAll","col","toUpperCase","comments","from","rowIndex","random","log","toComment","fromComment","createFoot","LeftCols","Width","flat","useMemo","getCompanies","require","Highcharts","HighchartGant","today","Date","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","getTime","prevEvent","events","collectEvents","ac","end","y","useState","title","text","xAxis","currentDateIndicator","yAxis","categories","plotOptions","series","dragDrop","draggableX","dragMinY","dragMaxY","dragPrecisionX","dataLabels","enabled","allowPointSelect","point","drag","options","containerProps","highcharts","constructorType","FastGantt","GanttStyle","Zoom","GanttUnits","GanttWidth","GanttDragUnits","GanttChartRound","GanttHeader1","GanttHeader2","GanttHeader3","Cells05","ZoomType","ZoomWidth","CLASSES","DataListManager","dataClone","flatArrById","list","parent","nextParent","i","hasChildren","next","prev","indexWithinParent","set","Map","nextId","prevId","index","_getParentArr","splice","_updateIndexWithinParent","has","isTotally","hasItem","delete","parentId","moveItem","_getFutureIndex","convertedItem","convertItemKeys","_setChildToParent","removeItem","convertedData","test","convertValue","Symbol","TGAddEvent","TreeGridGant","GanttZoom","GanttRunSave","GanttDataUnits","GanttRun","GanttRunAdjust","GanttRunTip","settings","collector","Text","Id","Start","End","eventsMain","eventsAux","Tip","createBody","dialog","useEffect","oldData","dir","XY","keyPrefix","X","Y","toString","substr","getElementsByTagName","ShowDialog","Close","Function","Duration","updateItem","Sample","path","exact","TreeGridGantt","root","document","getElementById","ReactDOM","render","StrictMode","FocusRect","SelectingCells","SelectingFocus","CopyCols","PasteFocused","Actions","OnCtrlDragRow","OnDragRow","OnDel","Cells70Styles","PanelCopyMenu","Lang","GroupSeparator","GMT"],"mappings":"2FAAA,IAAIA,EAAM,CACT,aAAc,CACb,GACA,GAED,gBAAiB,CAChB,GACA,GAED,SAAU,CACT,GACA,GAED,YAAa,CACZ,GACA,GAED,mBAAoB,CACnB,IAED,sBAAuB,CACtB,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAON,QAAQQ,IAAIF,EAAIG,MAAM,GAAGd,IAAIG,EAAoBK,IAAID,MAAK,WAChE,OAAOJ,EAAoBS,MAG7BX,EAAoBc,KAAO,WAC1B,OAAOC,OAAOD,KAAKf,IAEpBC,EAAoBW,GAAK,IACzBK,EAAOC,QAAUjB,G,iICpBFkB,E,uKAhBX,OACE,yBAAKC,UAAU,iBACb,0CACA,yBAAKA,UAAU,qBACb,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,WAAvB,gBACA,kBAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,WAAhC,aACA,kBAAC,IAAD,CAAMC,GAAG,mBAAmBD,UAAU,WAAtC,oBACA,kBAAC,IAAD,CAAMC,GAAG,kBAAkBD,UAAU,WAArC,wB,GATWE,a,eCJN,WAACC,GAAD,OAASC,KAAKC,MAAMD,KAAKE,UAAUH,K,yCCAnC,GACXI,QAAS,SAAAC,GAAC,MAAU,KAANA,GACdC,WAAY,SAAAD,GAAC,MAAU,KAANA,GACjBE,SAAU,SAAAF,GAAC,MAAiB,kBAANA,IAAmBG,MAAMH,K,ECQvBI,OAApBC,E,EAAAA,S,EAAUC,MAEZC,aAAe,SAACC,EAAGC,EAAIC,EAAMC,GASjC,OARIF,EAAGG,IACL,OAAO,YAAYH,EAAGG,MACnBjC,MAAK,gBAAYkC,EAAZ,EAAGC,QAAH,OAAsBH,EAAK,EAAGE,MACnCE,OAAM,SAAAC,GAAG,OAAIA,KAEhBR,EAAES,cAAcT,EAAGZ,KAAKC,MAAMW,EAAEU,cAAeP,IAG1C,GAuBT,IAAMQ,EAAe,CACnBC,cAAeC,IACfC,UAAW,QACXC,KAAM,GACNC,IAAK,IACLC,SAAU,IACVC,UAAW,IACXC,UAAW,MAGPC,E,4MAKJC,IAAMC,sB,EAENC,KAAO,K,EAGPC,SAAW,EAAKC,YAAY,EAAKC,MAAMX,M,EAEvCY,YAAc,IAAIC,OAAO,0C,EAczBC,oBAAsB,WACpB,EAAKN,KAAKd,cAAgB,SAACT,EAAD,EAAiBG,GAAU,IAArB2B,EAAoB,EAApBA,QAAoB,EACE,EAAKJ,MAAjDX,EAD0C,EAC1CA,KAAMD,EADoC,EACpCA,UAAwBK,GADY,EACzBY,YADyB,EACZZ,WAClCa,EAAe,GACfC,EAAS,GAEb,GAAId,EAAW,CACb,IADa,EACK,IAAIA,EAAUnB,GACIkC,SAASJ,GAFhC,mBAEXE,EAFW,KAEGC,EAFH,KAKf,IAAME,EAAYF,EAAOG,OAQzB,GAPAjC,EAAK,EAAG,CACNF,GAAI,CACFoC,OAAQF,GAAa,EAAI,GAE3BL,QAASK,EAAYF,EAASD,KAG5BG,EAAJ,CACAnC,EAAEsC,gBAQF,EAAKX,YAAYY,iBAAiB,WANL,SAAvBC,IAAqC,IAAD,GACxC,KAAKA,qBAAL,mBAEA,EAAKb,YAAYc,oBAAoB,UAAWD,MAIlD,EAAKb,YAAYe,YAAY,CAAC,SAAU,CAAEC,QAASb,EAAS5B,KAAMa,EAAMD,kB,EAI5E0B,qBAAuB,SAAApE,GACrB,GAAKwE,MAAMC,QAAQzE,EAAE8B,MAArB,CAD0B,IAGlBU,EAAkB,EAAKc,MAAvBd,cAHkB,cAIJxC,EAAE8B,KAJE,GAInB4C,EAJmB,KAIZ5C,EAJY,KAM1B,OAAQ4C,GACN,IAAK,UACHlC,EAAcV,EAAKA,MACnB,MACF,IAAK,QAEH6C,QAAQC,MAAM,iBAAkB9C,EAAKA,MACrC,MACF,QAEE6C,QAAQE,MAAM,+B,kEA5DlBC,KAAKC,WACLD,KAAKrB,wB,6CAILqB,KAAKvB,YAAYyB,YAEZF,KAAK3B,MACV2B,KAAK3B,KAAK8B,Y,iCAwDA,IAAD,EACcH,KAAKxB,MAApB4B,EADC,EACDA,OAAQ9E,EADP,EACOA,GACV+E,EAAOC,IAAM,GAAIF,GAEvBJ,KAAK3B,KAAO1B,EACV,CACE4D,MAA2D,EAC3DjF,KACAkF,OAAQ,CACNH,QAEFI,OAAQ,CACNC,OAAQ,OACRC,MAAO,UACPC,KAAM,sBAERP,KAAM,CACJA,KAAM,CACJQ,KAAM,CAACb,KAAK1B,aAMlB0B,KAAK7B,IAAI2C,QAGT,CACE9E,UAAWgE,KACXe,QAASC,M,kCAUHC,GAAM,IAAD,EACiCjB,KAAKxB,MAA7CZ,EADO,EACPA,UAAWE,EADJ,EACIA,IAAKE,EADT,EACSA,UAAWD,EADpB,EACoBA,SAgBnC,OAAOkD,EAAIvG,KAdX,SAASwG,EAASC,GAWhB,OAVIA,EAAKvD,IAAcuD,EAAKvD,GAAWsB,QACrCiC,EAAKrD,IAAMqD,EAAKrD,KAAOE,EACvBmD,EAAKC,MAAQD,EAAKvD,GAAWlD,IAAIwG,IAEjCC,EAAKrD,IAAMqD,EAAKrD,KAAOA,EAGzBqD,EAAKnD,UAAYmD,EAAKnD,WAAaA,EACnCmD,EAAKpD,SAAWoD,EAAKpD,UAAYA,EAE1BoD,O,+BAOT,OACE,yBACEE,IAAKrB,KAAK7B,IACVmD,MAAO,CACLC,OAAQ,OACRC,MAAO,c,GAhJexF,aAA1BkC,EAGGT,aAAeA,EAoJTS,Q,yBC3MA,aAAoB,IAAD,uBAANuD,EAAM,yBAANA,EAAM,gBAC9B,OAAOC,IAAS,WAAT,GACH,GACAC,WAFG,OAGAF,EAHA,CAIH,SAAUG,EAAUC,GAChB,GAAInC,MAAMC,QAAQiC,GACd,OAAOC,EAASC,OAAOF,QCVxB,GACXG,IAAK,CACDC,YAAa,IACbC,SAAU,IACVC,YAAa,IACbC,cAAe,IACfC,QAAS,OACTC,UAAW,EACXC,QAAS,EACTC,WAAY,EACZC,eAAgB,EAChBC,aAAc,EACdC,cAAe,EACfC,SAAU,EACVC,aAAc,EACdC,mBAAoB,EACpBC,KAAM,QACNC,KAAM,GACNC,SAAU,MACVC,UAAW,EACXC,UAAW,EACXC,SAAU,mBACVC,KAAM,YACNC,OAAQ,cAERC,WAAY,uEAEhBC,QAAS,CACLC,kBAAmB,oEAEvB1F,IAAK,CACD2F,EAAG,CACCC,SAAU,IAGlBC,QAAS,CACLC,EAAG,CACCC,UAAW,IAGnBC,KAAM,CACFC,UAAW,OACXC,KAAM,QAEVC,MAAO,CACHC,KAAM,EACNC,OAAQ,EACRC,OAAQ,EACRC,KAAM,GAEVC,UAAW,CACPlD,MAAO,yFACPmD,UAAW,WACXC,WAAY,MCnDL,I,QCFA,SAASC,EAAapG,EAAMqG,GACvC,IAAMC,EAAOtG,EAAKuG,QAAQF,GAE1B,GAAKC,EAEL,MAAsB,UAAlBA,EAAK7G,IAAI+G,KACFJ,EAAapG,EAAMsG,GAGvBA,E,sCCNI,SAASG,IAAqB,IAAD,uBAANrD,EAAM,yBAANA,EAAM,gBACxC,OAAOA,EAAKsD,MAAK,SAAAC,GAAC,OAAIxI,IAASwI,KAAOvI,IAAMuI,M,6BC8CjCC,E,iDAjDbC,SAAW,G,sDAUD5J,GAMR,OALY0E,KAAKkF,SAAS5J,KAExB0E,KAAKkF,SAAS5J,GAAM,CAAEA,OAGjB0E,KAAKkF,SAAS5J,K,+BAGdA,EAAI6J,EAAKC,GAChB,IAAMC,EAASrF,KAAKsF,UAAUhK,GAExBiK,EAAWN,EAAcO,YAAYH,EAAQF,GACnDI,EAASE,KAAKL,GAEdC,EAAOJ,EAAcS,YAAYP,IAAQI,I,kCAG/BjK,EAAI6J,GACdnF,KAAK2F,SAASrK,EAAI6J,EAAK,M,mCAIvB,OAAOzJ,OAAOkK,OAAO5F,KAAKkF,UAAUW,QAAO,SAACC,EAAK/G,GAC/C,IAAMsG,EAAS,GAUf,OARA3J,OAAOqK,QAAQhH,GAAQiH,SAAQ,YAAmB,IAAD,mBAAhBb,EAAgB,KAAXc,EAAW,KAC3CvG,MAAMC,QAAQsG,GAChBZ,EAAOF,GAAOc,EAAMlB,MAAK,SAAAmB,GAAC,OAAIA,MAAM,GAEpCb,EAAOF,GAAOc,KAIZ,GAAN,mBAAWH,GAAX,CAAgBT,MACf,O,mCA3CcF,GACjB,MAAM,GAAN,OAAUA,EAAV,W,kCAGiBE,EAAQF,GACzB,OAAOE,EAAOJ,EAAcS,YAAYP,KAAS,O,KCiCtCgB,E,WAhCb,WAAY9H,GACV,GADiB,yBANnBS,aAAe,KAMG,KAJlBsH,eAAiB,KAIC,KAFlBC,MAAQ,IAGDhI,EACH,MAAM,IAAIlD,MAAM,yCAGlB6E,KAAK3B,KAAOA,E,oDAGN/C,GACN,OAAO0E,KAAK3B,KAAKiI,WAAWhL,K,kCAGlBiL,GACV7K,OAAOqK,QAAQ/F,KAAKqG,OAAOL,SAAQ,mCAAEQ,EAAF,KAAQC,EAAR,YAAgBF,EAAGC,EAAMC,Q,+BAGrDhH,GAAU,IAAD,OAYhB,OAXAO,KAAKlB,aAAe,IAAImG,EACxBjF,KAAKoG,eAAiB,IAAInB,EAE1BxF,EAAQuG,SAAQ,SAAAX,GACd,EAAKqB,aAAY,SAACvB,EAAKoB,GACjBpB,KAAOE,GACTkB,EAAGI,KAAK,EAAMtB,SAKb,CAACrF,KAAKlB,aAAa8H,aAAc5G,KAAKoG,eAAeQ,kB,KCoFjDC,E,4MApGXzG,OAAS,EAAK0G,e,EAqBdC,cAAgB,SAAC1I,EAAMqG,EAAKsC,GACxB,IAAMC,EAAWxC,EAAapG,EAAMqG,GAEpC,OAAIuC,EACOD,EAAIC,EAAU,QAGlB,EAAKzI,MAAM0I,oB,EAGtBC,YAAc,SAACC,EAAOC,GAClB,OAAID,GAA6B,kBAAbC,EACTD,EAAQC,EAGZ,I,EAGXC,iBAAmB,WACf,IAAMC,EAAQzC,EAAU,WAAV,aAEd,OAAI0C,IAAYD,GAAe,GAExB,KAAiBA,G,EAG5BE,gBAAkB,SAACpJ,EAAMqG,EAAKsC,EAAKU,GAC/B,GAAIrJ,EAAK0C,QAAQxE,WAAWmL,GAAe,OAAOA,EAElD,IAAMT,EAAWxC,EAAapG,EAAMqG,GACpC,OAAIuC,EACOD,EAAIC,EAAU,iBAGlB,G,EAGXU,eAAiB,SAACtJ,EAAMqG,EAAKsC,EAAKY,GAC9B,GAAIvJ,EAAK0C,QAAQxE,WAAWqL,GAAc,OAAOA,EAEjD,IAAK,EAAKC,UAAUxJ,EAAMqG,GAAM,MAAO,GAEvC,IAAMuC,EAAWxC,EAAapG,EAAMqG,GACpC,OAAIuC,EACOD,EAAIC,EAAU,gBAGlB,G,EAGXa,eAAiB,SAACzJ,EAAMqG,EAAKsC,EAAKe,GAC9B,IAAK,EAAKF,UAAUxJ,EAAMqG,GAAM,MAAO,GAEvC,IAAMuC,EAAWxC,EAAapG,EAAMqG,GAGpC,OAFkBuC,EAAWD,EAAIC,EAAU,eAAiB,GAEzCc,G,EAGvBF,UAAY,SAACxJ,EAAMqG,GACf,OAAOrG,EAAK0C,QAAQxE,WAAWmI,EAAIsD,c,6DA/EvB,IAAD,EACwChI,KAAKxB,MAAhD0I,EADG,EACHA,mBAAoBe,EADjB,EACiBA,MAAOC,EADxB,EACwBA,YAC7BC,EAAgB,CAEtBA,SC1BG,CACH,CACItD,KAAM,OACNhB,UAAW,EACXuE,SAAU,GACVC,cAAe,GAEnB,CACIxD,KAAM,OACNyD,SAAU,EACVF,SAAU,IACVvE,UAAW,EACXwE,cAAe,KD0BnB,OAVAF,EAAcI,KE7BP,YAAe,EAAZN,MA6Cd,MA5Ca,CACT,CACIpD,KAAM,QACNuD,SAAU,GACVI,SAAU,EACV9H,OAAQ,QACR+H,WAAY,GACZ7H,KAAM,SAEV,CACIiE,KAAM,iBACNjE,KAAM,QACN8H,QAAS,EACTC,QAAS,EACTC,SAAU,EACVC,UAAW,EACXC,QAAS,gDAEb,CACIjE,KAAM,QACN6D,QAAS,EACTC,QAAS,EACTC,SAAU,EACVC,UAAW,GAEf,CACIhE,KAAM,SACNnE,OAAQ,gBACRE,KAAM,OACNmI,QAAS,EACTC,SAAS,wCACTC,aAAc,mDACdH,QAAS,qEACTV,SAAU,KAEd,CACIvD,KAAM,OACNnE,OAAQ,gBACRE,KAAM,OACNwH,SAAU,IACVU,QAAS,6DFZQI,CAAc,CAAEjB,UAErCE,EAAcgB,KL7BP,WACX,IAAMC,EAAa,CACfC,IAAK,MACLC,KAAM,OACNlO,KAAM,OACNmM,MAAO,QACPgC,OAAQ,QACRC,KAAM,OASV,OAJA9N,OAAOD,KAAK2N,GAAYpD,SAAQ,SAACb,GAAD,OQdrB,SAAsBA,EAAKsE,GACtCA,EAAO,GAAD,OAAItE,EAAJ,UAAkB,SRaiBuE,CAAavE,EAAKiE,MAE3DA,EAAW9N,GAAK,SAET,CACH8N,GKYqBO,GAErBxB,EAAcyB,KIlBX,CAdO,CACVtO,GAAI,QACJuO,MAAO,UACPC,UAAW,EACXf,QAAS,EACTgB,WAAY,EACZ3O,KAAM,MAGN4O,aAAc,QACdC,cAAe,GACfC,YAAa,sDJuBb/B,EAAcgC,MKnCP,YAAiD,IAA9CjD,EAA6C,EAA7CA,mBAA6C,EAAzBgB,YA8BlC,OA9B2D,EAAZD,MA8BhC,CARG,CACd3M,GAAI,YACJoN,QAAS,EACT0B,MAAO,qBACPlD,qBACAmD,yBAA0B,MAGD,CA7Bd,CACX/O,GAAI,SACJgP,OAAQ,EACRC,IAAK,iBACLH,MAAO,qBAGPlD,qBACAsD,wBAAyB,oBACzBC,wBAAyB,IACzBC,yBAA0B,gBAC1BC,uBAAwB,OACxBN,yBAA0B,IAC1BO,2BAA4B,oELqBNC,CAAY,CAAE3D,qBAAoBe,QAAOC,gBAE/DC,EAAcrK,IMrCP,WACX,IAAMgN,EAAiB,CACnB/B,QAAS,EACTgB,WAAY,EAEZgB,YAAa,EACbC,YAAa,EAGbhB,aAAc,QACdC,cAAe,sDACfC,YAAa,mDA0CjB,MAAO,CAAEe,KAvCC,aACNjH,KAAM,QACND,UAAW,QAEXmH,MAAO,iBACPrB,MAAO,WAEJiB,GAgCQK,MA7BJ,aACPnH,KAAM,QACND,UAAW,QAEXmH,MAAO,kBACPrB,MAAO,WAEJiB,GAsBeM,MANR,CACVrH,UAAW,GAEXsH,UAhBmB,CACnB,YACA,YACA,gBACA,qBACA,eACA,oBACA,iBACA,SACA,cACA,QAM0BC,SNbNC,GAEbC,EAAaC,EAActD,K,+BAmElC,OAAO,kBAAC,EAAD,eACH/H,OAAQJ,KAAKI,OACbxC,UAAWiJ,EAAgBjJ,UAC3BkK,eAAgB9H,KAAK8H,eACrBH,eAAgB3H,KAAK2H,eACrBF,gBAAiBzH,KAAKyH,gBACtBN,YAAanH,KAAKmH,YAClBJ,cAAe/G,KAAK+G,cACpBO,iBAAkBtH,KAAKsH,iBACvBrJ,UAAWA,GACP+B,KAAKxB,Y,GAhGSxC,a,yBO8Df,M,WAzEb,aACE,GADa,yBAHfgB,KAAOgD,KAAK0L,aAAe1O,EAGb,KAFd2O,KAAO3L,KAAK4L,UAGNC,EAAYC,SACd,OAAOD,EAAYC,SAGrBD,EAAYC,SAAW9L,K,iDAGpBmF,EAAKnI,GACR,IAAKmI,EACH,MAAM,IAAIhK,MAAM,yBAGlB6E,KAAKhD,KAAKmI,GAAOnI,EAEjBgD,KAAK+L,a,iCAILC,aAAaC,QAzBG,OAyBkB/P,KAAKE,UAAU4D,KAAKhD,S,kCAItD,IACE,OAAOd,KAAKC,MAAM6P,aAAaE,QA9BjB,SA+Bd,MAAOhR,GACP,OAAO,Q,qCAKT,OAAO8E,KAAKhD,KAAKkK,qB,kCAIjB,OAAOlH,KAAKhD,KAAKmP,S,qCAIjB,OAAOnM,KAAKhD,KAAKoP,Y,qCAIjB,OAAOpM,KAAKhD,KAAKqP,Y,iCAIjB,OAAOrM,KAAKhD,KAAKsP,Q,gCAgBjB,IAZA,IAQIC,EARQ,SAANC,EAAOvL,GAAD,OAASA,EAAI4E,QAAO,SAAC4G,EAAGtL,GAClC,OAAIA,EAAKC,MACAqL,EAAID,EAAIrL,EAAKC,OAGfqL,GAAKtL,EAAKoG,OAAS,KACzB,GAEiBiF,CAAIxM,KAAKhD,KAAKmP,QAC5B/E,EAAQpH,KAAK0M,eACbf,EAAO,GAENY,EAAgB,GAAG,CACxB,IAAMI,EAAOC,IAAOxF,EAAwB,GAAhBmF,EAAqB,GAAK,KACtDZ,EAAKlG,KAAKkH,EAAKE,OAAO,eACtBN,GAAiB,GAGnB,OAAOZ,M,MCQImB,E,kDAhFb,WAAYtO,GAAQ,IAAD,8BACjB,cAAMA,IA4BRd,cAAgB,SAACqP,EAAS5H,GACxB,EAAK6H,SAAL,eACK7H,EAAM4H,IACT,WACEE,EAAYC,KAAK/H,EAAK4H,OAjCT,EAsCnBI,+BAAiC,SAAC9O,EAAM4H,GACtC,EAAK+G,SAAS,CAAE9F,mBAAoBjB,KAvCnB,EA0CnBmH,wBAA0B,SAAC/O,EAAM4H,GAC/B,EAAK+G,SAAS,CAAE9E,YAAajC,KAxC7B,EAAKoH,MAAQ,CACXnF,YAAa,EACbiE,OAAQ,EAAKmB,aAAaL,EAAYM,aACtCnB,UAAW,EAAKkB,aAAaL,EAAYO,gBACzCtG,mBAAoB+F,EAAYP,gBAPjB,E,yDAWN1P,GACX,IAAMyQ,EAAQC,EAAU1Q,GAClB2Q,EAAO,CAAC,OAAQ,QAAS,SACzBC,EAAS,CAAC,EAAG,EAAG,KAYtB,OADAH,EAAMzH,SAAQ,SAAAtB,GAAG,OATjB,SAASmJ,EAAkBnJ,GAAiB,IAAZoJ,EAAW,uDAAH,EACtCpJ,EAAI5G,IAAM6P,EAAKG,GACfpJ,EAAIqJ,OAASH,EAAOE,GAEhBpJ,EAAItD,OACNsD,EAAItD,MAAM4E,SAAQ,SAAAtB,GAAG,OAAImJ,EAAkBnJ,EAAKoJ,EAAQ,MAIvCD,CAAkBnJ,EAAK,MACrC+I,I,+BAoBC,IAAD,SACwDzN,KAAKqN,MAA5DnF,EADD,EACCA,YAAaiE,EADd,EACcA,OAAQC,EADtB,EACsBA,UAAWlF,EADjC,EACiCA,mBAExC,OACE,yBAAKpL,UAAU,kBACb,yBAAKR,GAAG,iBAAiBQ,UAAU,4BAEnC,yBAAKA,UAAU,yBACb,kBAAC,EAAD,CACER,GAAG,kBACHuC,KAAMsO,EACNjE,YAAaA,EACbhB,mBAAoBA,EACpBkG,wBAAyBpN,KAAKoN,wBAC9BD,+BAAgCnN,KAAKmN,+BACrCzP,cAAe,SAACV,GAAD,OAAU,EAAKU,cAAcV,EAAM,aAGnDkL,EAAc,kBAAC,EAAD,CACb5M,GAAG,iBACH2M,OAAO,EACPpK,KAAMuO,EACNlE,YAAaA,EACbhB,mBAAoBA,EACpBxJ,cAAe,SAACV,GAAD,OAAU,EAAKU,cAAcV,EAAM,gBAC/C,S,GAxEWhB,aCLX,GACb+F,IAAK,CACHiM,SAAU,EACVC,SAAU,EACVnL,KAAM,QACNd,YAAa,EACbC,SAAU,EACVe,SAAU,MACVL,SAAU,EACVC,aAAc,EACdC,mBAAoB,EACpBS,WAAY,sEACZ4K,qBAAsB,EACtBC,cAAe,EACfpL,KAAM,GACNqL,UAAW,EACX/L,UAAW,EACXgM,UAAW,GAEbvQ,IAAK,CACHwQ,QAAS,CACPvF,QAAS,EACTwF,QAAS,EACTzE,UAAW,EACX0E,UAAW,EACXC,QAAS,IAGblL,QAAS,CACPC,kBAAmB,YACnBkL,YAAa,iCACbC,WAAY,QAEd1K,MAAO,CACLG,OAAQ,EACRF,KAAM,EACNC,OAAQ,EACRE,KAAM,GAERuK,WAAY,CACVxN,MAAO,sDACPmD,UAAW,YACXC,WAAY,GAEdF,UAAW,CACTlD,MAAO,oFACPmD,UAAW,WACXC,WAAY,MC/CHqK,EAAO,CAAC,KAAM,MAAO,W,iBCInB,G,OAAA,SAAClD,GACd,IAAMmD,EAAa,CACjBC,KAAM,SACNC,QAAS,EAET1F,KAAM,OACN2F,UAAW,UAGPC,EAAkB,CACtBH,KAAM,UAGFI,EAAa,CACjBrR,IAAK,UACLkR,QAAS,EACT1F,KAAM,WACN2F,UAAW,SACXG,cAAe,SACfC,YAAa,IAGf1D,EAAK3F,SAAQ,SAAAsJ,GAAQ,IAAD,EACZC,EAAO,UAAMD,EAAN,OAEb5T,OAAO8T,OAAOV,GAAd,KAAApT,OAAA,IAAAA,CAAA,EACG6T,EAAUD,EAAIG,WAAW,IAAK,MADjC/T,OAAA,IAAAA,CAAA,YAEM6T,EAFN,QAEsB,GAFtB7T,OAAA,IAAAA,CAAA,YAGM6T,EAHN,SAGuB,UAHvB,IAMAV,EAAK7I,SAAQ,SAAA0J,GAAG,aAAIhU,OAAO8T,OAAON,GAAd,KAAAxT,OAAA,IAAAA,CAAA,YACd4T,EADc,YACPI,GAAQA,EAAIC,eADLjU,OAAA,IAAAA,CAAA,YAEd4T,EAFc,YAEPI,EAFO,SAEM,UAFN,OAKpBhU,OAAO8T,OAAOL,EAAdzT,OAAA,IAAAA,CAAA,aACM6T,EADN,QACsB,OAIxB,IAAMK,EAAWlQ,MAAMmQ,KAAK,CAAE3Q,OAAQ,KAAMxE,KAAI,iCAAYyU,MAS5D,OAPAxD,EAAK3F,SAAQ,SAAAsJ,GACX,IAAMQ,EAAWC,IAAO,EAAG,GACfH,EAASE,GAEjB,GAAD,OAAIR,EAAJ,QAAgB,4FAErBzP,QAAQmQ,IAAIJ,GACN,CAAN,2BAAad,GAAb,IAAyBxT,GAAI,YAA7B,mBAA4CsU,GAA5C,CAAsDd,EAAYI,MCtDrD,YAAAvD,GACb,IAAMsE,EAAY,CAAE5G,IAAK,KAAM2F,QAAS,GAClCkB,EAAc,CAAE7G,IAAK,OAAQ2F,QAAS,GAc5C,OAZArD,EAAK3F,SAAQ,SAAAsJ,GACX,IAAMC,EAAO,UAAMD,EAAN,OAEb5T,OAAO8T,OAAOS,EAAdvU,OAAA,IAAAA,CAAA,aACM6T,EADN,QACsB,IAGtB7T,OAAO8T,OAAOU,EAAdxU,OAAA,IAAAA,CAAA,aACM6T,EADN,QACsB,OAIjB,CAACU,EAAWC,ICRN,cACb,ICPcvE,EDORxD,EAAgB,CACpByB,KAAMuG,GAAWlD,EAAYtB,MAC7BxC,KAAMQ,EAAWsD,EAAYtB,MAC7ByE,SEXK,CACL,CACEvL,KAAM,OACNmK,QAAS,IFSXzG,MCXYoD,EDWQsB,EAAYtB,KCV3BA,EAAKjR,KAAI,SAAA4U,GACd,OAAOT,EAAKnU,KAAI,SAAAgV,GAAG,MAAK,CACtB7K,KAAK,GAAD,OAAKyK,EAAL,YAAYI,GAChBW,MAAO,UAERC,SDQH,OAAO9E,EAAaC,EAActD,IGHrBkE,GANG,WAChB,IAAMjM,EAASmQ,kBAAQzJ,GAAc,IAErC,OAAO,kBAAC,EAAD,CAAmBxL,GALZ,YAKyB8E,OAAQA,EAAQvC,KAAMoP,EAAYuD,kB,wCCL3EC,EAAQ,IAARA,CAAoCC,MACpCD,EAAQ,IAARA,CAA+CC,MAE/C,IAiFeC,GAjFO,WACpB,IAAIC,EAAQ,IAAIC,KAIhBD,EAAME,YAAY,GAClBF,EAAMG,cAAc,GACpBH,EAAMI,cAAc,GACpBJ,EAAMK,mBAAmB,GACzBL,EAAQA,EAAMM,UAEd,IAAIC,EAAY,KACV/J,EAAQ6F,EAAYP,eAepB0E,EAASnE,EAAYM,YAAY1H,QAAO,SAACC,EAAK3E,GAAN,OAdxB,SAAhBkQ,EAAiBvL,EAAK3E,GAW1B,OAVIA,EAAKC,MACPD,EAAKC,MAAMyE,QAAO,SAACyL,EAAInQ,GAAL,OAAckQ,EAAcC,EAAInQ,KAAO2E,IAEzD3E,EAAKoQ,KAAOpQ,EAAKiG,OAASA,GAAuB,GAAbjG,EAAKoG,MAAa,GAAK,IAC3DpG,EAAKiG,MAAQ+J,EAAYA,EAAUI,IAAMnK,EACzCjG,EAAKqQ,EAAI,EACTL,EAAYhQ,EACZ2E,EAAIL,KAAKtE,IAGJ2E,EAGoDuL,CAAcvL,EAAK3E,KAAO,IACvFtB,QAAQmQ,IAAIoB,GA5Bc,MA8BRK,mBAAS,CACzBC,MAAO,CACLC,KAAM,4BAERC,MAAO,CACLC,sBAAsB,GAGxBC,MAAO,CACLC,WAAY,CAAC,OAAQ,QAGvBC,YAAa,CACXC,OAAQ,CACNC,SAAU,CACRC,YAAY,EACZC,SAAU,EACVC,SAAU,EACVC,eAAgB,KAElBC,WAAY,CACVC,SAAS,EACT3F,OAAQ,gBAEV4F,kBAAkB,EAClBC,MAAO,CACLtB,OAAQ,CACNuB,KADM,SACDzX,GACH2E,QAAQmQ,IAAI9U,QAOtB+W,OAAQ,CAAC,CACP3I,KAAM,mCACNtM,KAAMoU,MArCHwB,EA9BmB,oBAuE1B,OACE,kBAAC,KAAD,CACEC,eAAgB,CAAEvR,MAAO,CAAEC,OAAQ,SACnCuR,WAAYpC,KACZqC,gBAAgB,aAChBH,QAASA,KCpFA,IACb7Q,IAAK,CACHQ,WAAY,EACZyQ,UAAW,EACXC,WAAY,YAEdC,KAAM,CACJ,CACErO,KAAM,SACNsO,WAAY,IACZC,WAAY,KACZC,eAAgB,IAChBC,gBAAiB,IACjBC,aAAc,eAEhB,CACE1O,KAAM,OACNsO,WAAY,IACZC,WAAY,IACZC,eAAgB,IAChBC,gBAAiB,IACjBC,aAAc,0BACdC,aAAc,SAEhB,CACE3O,KAAM,QACNsO,WAAY,IACZC,WAAY,KACZC,eAAgB,IAChBC,gBAAiB,IACjBC,aAAc,0BACdC,aAAc,QAEhB,CACE3O,KAAM,UACNsO,WAAY,IACZC,WAAY,IACZC,eAAgB,IAChBC,gBAAiB,IACjBC,aAAc,0BACdC,aAAc,OACdC,aAAc,WAGlBlQ,QAAS,CACPmQ,QAAS,OACTC,SAAU,kBACVC,UAAW,OC5CTC,GAAU,CAAC,OAAQ,OAAQ,UAAW,OAAQ,QAAS,OAAQ,SAAU,OAAQ,QAAS,SAAU,SAAU,MAAO,SAAU,OAAQ,QAAS,U,sFCShJC,G,WAgBJ,WAAY9W,EAAMY,GAAY,6IAF9BA,UAAY,GAGV,IAAMmW,EAAYrG,EAAU1Q,GAC5BgD,KAAKpC,UAAYA,EA8BjB,aAAAoC,KAAA,QAAa+T,EACb,aAAA/T,KAAA,QA3BA,SAASgU,EAAY/S,EAAKgT,GAExB,IAFiE,IAAnCC,EAAkC,uDAAzB,KAAMC,EAAmB,uDAAN,KACtDC,EAAI,EACDA,EAAInT,EAAI/B,QAAQ,CACrB,IAAMiC,EAAOF,EAAImT,KACXC,EAAczW,GAAauD,EAAKvD,IAAcuD,EAAKvD,GAAWsB,OAAS,EAI3EiC,EAAK2S,EAAgBQ,MAFnBD,EAE2BlT,EAAKvD,GAAW,GAEhBqD,EAAImT,GAAKnT,EAAImT,GAAKD,EAGjDhT,EAAK2S,EAAgBI,QAAUA,EAC/B/S,EAAK2S,EAAgBS,MAAQtT,EAAImT,EAAI,GAAKnT,EAAImT,EAAI,GAAKF,EACvD/S,EAAK2S,EAAgBU,mBAAqBJ,EAAI,EAC9CH,EAAKQ,IAAItT,EAAK7F,GAAI6F,GAEdkT,GACFL,EAAY7S,EAAKvD,GAAYqW,EAAM9S,EAAMF,EAAImT,IAIjD,OAAOH,EAIID,CAAYD,EAAW,IAAIW,K,4DAc1BC,EAAQC,GACtB,IAAMN,EAAOtU,KAAKkM,QAAQyI,GACpBJ,EAAOvU,KAAKkM,QAAQ0I,GAE1B,OAAIN,EACKA,EAAKR,EAAgBU,mBAG1BD,EACKA,EAAKT,EAAgBU,mBAAqB,EAG5C,I,oCASKN,GACZ,OAAIA,GACFA,EAAOlU,KAAKpC,WAAasW,EAAOlU,KAAKpC,YAAc,GAC5CsW,EAAOlU,KAAKpC,YAGd,aAAAoC,KAAP,U,wCAUgBkU,EAAQW,EAAO1T,GAC/B,IAAMF,EAAMjB,KAAK8U,cAAcZ,GAE/BjT,EAAI8T,OAAOF,EAAO,EAAG1T,GACrBnB,KAAKgV,yBAAyB/T,K,+CAGPA,GAEvB,IADA,IAAImT,EAAI,EACDA,EAAInT,EAAI/B,QAAQ,CACR,aAAAc,KAAA,QAAWgH,IAAI/F,EAAImT,KAAK9Y,IAChCwY,EAAgBU,mBAAqBJ,EAAI,K,8BAI1C9Y,GACN,OAAO,aAAA0E,KAAA,QAAWgH,IAAI1L,K,8BAGhBA,GACN,OAAO,aAAA0E,KAAA,QAAWiV,IAAI3Z,K,iCAQbA,GAAuB,IAAnB4Z,IAAkB,yDAC/B,GAAKlV,KAAKmV,QAAQ7Z,GAAlB,CAIA,IAAM6F,EAAOnB,KAAKkM,QAAQ5Q,GACpB4Y,EAAS/S,EAAK2S,EAAgBI,QAC9BW,EAAQ1T,EAAK2S,EAAgBU,mBAG/BU,GAAW,aAAAlV,KAAA,QAAWoV,OAAO9Z,GAEjC,IAAM2F,EAAMjB,KAAK8U,cAAcZ,GAE/BjT,EAAI8T,OAAOF,EAAO,GAClB7U,KAAKgV,yBAAyB/T,M,8BAGxB3F,EAAI+Z,EAAUV,EAAQC,EAAQzT,GACpC,GAAInB,KAAKmV,QAAQ7Z,GACf0E,KAAKsV,SAASha,EAAI+Z,EAAUV,EAAQC,OADtC,CAKA,IAAMV,EAASlU,KAAKkM,QAAQmJ,GACtBR,EAAQ7U,KAAKuV,gBAAgBZ,EAAQC,GACrCY,EAAgB1B,EAAgB2B,gBAAgBtU,GAEtD,aAAAnB,KAAA,QAAWyU,IAAInZ,EAAIka,GAGnBA,EAAc1B,EAAgBI,QAAUA,EAExClU,KAAK0V,kBAAkBxB,EAAQW,EAAOW,M,+BAG/Bla,EAAI+Z,EAAUV,EAAQC,GAC7B,IAAMzT,EAAOnB,KAAKkM,QAAQ5Q,GACpB4Y,EAASlU,KAAKkM,QAAQmJ,GACtBR,EAAQ7U,KAAKuV,gBAAgBZ,EAAQC,GAG3C5U,KAAK2V,WAAWra,GAAI,GAGpB6F,EAAK2S,EAAgBI,QAAUA,EAE/BlU,KAAK0V,kBAAkBxB,EAAQW,EAAO1T,K,iCAG7B7F,EAAI0B,GACb,GAAKgD,KAAKmV,QAAQ7Z,GAAlB,CAIA,IAAM6F,EAAOnB,KAAKkM,QAAQ5Q,GACpBsa,EAAgB9B,EAAgB2B,gBAAgBzY,GACtDsD,IAAMa,EAAMyU,M,2BApIZ,OAAOlI,EAAU,aAAA1N,KAAD,Y,uCAuIKmB,GAErB,OAAOzF,OAAOqK,QAAQ5E,GAAM0E,QAAO,SAACC,EAAD,GAAwB,IAAD,mBAAhBX,EAAgB,KAAXc,EAAW,KACxD,MAAI,6BAA6B4P,KAAK1Q,KAAS,QAAQ0Q,KAAK1Q,KAE5Dc,EAzMe,SAAAA,GACnB,MAAc,KAAVA,EAAqBA,EAEX,MAAVA,EAAsB,GAElBA,GAASA,EAoML6P,CAAa7P,GAErBwO,KAAI3O,EAAKX,EAAKc,IAJ2DH,IAMxE,Q,KArMDgO,GAEGI,OAAS6B,OAAO,UAFnBjC,GAIGQ,KAAOyB,OAAO,QAJjBjC,GAMGS,KAAOwB,OAAO,QANjBjC,GAQGU,kBAAoBuB,OAAO,qBCbpC,IAEQC,GAAetZ,OAAfsZ,WAkDOC,GAhDM,WACnB,IAAM7V,ECLO,WACb,ICRc8G,EDQRiB,EAAgB,CACpBiI,SERK,CACL,CACEvL,KAAM,QAER,CACEA,KAAM,SACNwL,MAAO,IACP3H,QAAS,GAEX,CACE7D,KAAM,aACNjE,KAAM,SFFR2H,MAAiB0E,EAAYP,eGTxB,CACL,CACE7H,KAAM,QACNjE,KAAM,QACNsV,UAAW,OACXC,aAAc,EACdC,eAAgB,IAChBC,SAAU,SACVC,eAAgB,SAChBC,YAAa,YHCfpM,OCXYjD,EDWO+F,EAAYP,eCK1B,CAfQ,CACbpR,GAAI,SACJgP,OAAQ,EACRF,MAAO,qBAGPlD,qBACAsD,wBAAyB,oBACzBC,wBAAyB,IACzBC,yBAA0B,gBAC1BC,uBAAwB,OACxBN,yBAA0B,IAC1BO,2BAA4B,sEDC9B,OAAOY,EAAaC,GAActD,GDFnBrB,GACTjJ,EFRO,WACb,IAAMuJ,EAAQ6F,EAAYP,eAEpB2E,EAAgB,SAACpQ,GAAqC,IAAhCuV,EAA+B,uDAApB,CAAE5V,KAAM,OACzCuQ,EAAY,KAEVsF,EAAY,SAAZA,EAAa3Q,EAAK3E,GACtB,GAAIA,EAAKC,MACPD,EAAKC,MAAMyE,QAAO,SAACC,EAAK3E,GAAN,OAAesV,EAAU3Q,EAAK3E,KAAO2E,OAClD,CACL,IAAMlG,EAAK,aACT8W,KAAMvV,EAAKmI,KACXqN,GAAIxV,EAAK7F,GACT4P,MAAO2I,GAAQ/N,EAAI5G,SAChBsX,GAEL5W,EAAMwH,MAAQjG,EAAKiG,MAAQjG,EAAKiG,MAAQ+J,EAAYA,EAAUI,IAAMnK,EACpExH,EAAM2R,IAAM3R,EAAMwH,MAAsB,GAAbjG,EAAKoG,MAAa,GAAK,IAClD3H,EAAMgX,MAAQhK,IAAOhN,EAAMwH,OAAOyF,OAAO,uBACzCjN,EAAMiX,IAAMjK,IAAOhN,EAAM2R,KAAK1E,OAAO,uBAErCsE,EAAYvR,EACZkG,EAAIL,KAAK7F,GAGX,OAAOkG,GAGT,OAAO7E,EAAI4E,OAAO4Q,EAAW,KAIzBK,EAAazF,EAAcpE,EAAYM,YAAa,CAAE3M,KAAM,UAC5DmW,EAAY1F,EAAcpE,EAAYO,gBAE5C,OADA3N,QAAQmQ,IAAI8G,EAAYC,GACjB,CACL,CACEzb,GAAI,cACJgO,KAAM,OACNP,QAAS,EACTiO,IAAK,UACL5F,OAAQ0F,GAEV,CACExb,GAAI,cACJgO,KAAM,MACN0N,IAAK,UACL5F,OAAQ2F,IEvCCE,GACTC,EAAS,KAEbC,qBAAU,WACRnB,GAAW,iBAVC,SAU0B,SAAC3X,EAAMqG,EAAKgL,EAAKmF,EAAOzN,EAAO2F,EAASqK,EAAS/R,EAAQgS,EAAKC,EAAIC,EAAWC,EAAGC,GACpH,IAAM9K,EAAO,IAAIkE,KAAK9D,GAAS2K,WAAWC,OAAO,EAAG,IAChDT,EACcA,EAAO3M,IAAIqN,qBAAqB,SAAS,GACjD3R,MAAQ0G,EAIlBuK,EAASxa,OAAOmb,WACd,CACEhX,KAAK,kDAAD,OAAoD8L,EAApD,OAEN,CACE6K,IAAGC,EAAGA,EAAI,QAKhBzB,GAAW,oBA5BC,SA4B6B,SAAC3X,EAAMqG,EAAKgL,EAAKmF,EAAOzN,EAAO2F,GACtEmK,EAAOY,QACPZ,EAAS,UAEV,IAgBH,OAAO,kBAAC,EAAD,CAAmB5b,GAhDZ,QAgDyBuD,YAAa,SAAUuB,OAAQA,EAAQvC,KAAMA,EAC1DH,cAfJ,SAACqP,GACrB,IAAMtO,EAAc,IAAIqV,GAAgB7G,EAAYO,eAAgB,SACrDuK,SAAS,UAAD,OAAWhL,EAAQ,GAAGqE,QAA9B2G,GACR/R,SAAQ,YAAoC,IAAjC2Q,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,MAAOoB,EAAqB,EAArBA,SAAUtB,EAAW,EAAXA,KACrCjY,EAAYwZ,WAAWtB,EAAI,CACzBvP,OAAQ,IAAIyJ,KAAK+F,GACjBrP,MAAOyQ,EACP1O,KAAMoN,OAIVzJ,EAAYC,KAAK,YAAazO,EAAYzB,U,QKZ/Bkb,G,uKA3BP,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAKpc,UAAU,mBACX,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOqc,KAAK,IAAIC,OAAK,GACjB,kBAAC,EAAD,OAGJ,kBAAC,KAAD,CAAOD,KAAK,cACR,kBAAC,GAAD,OAGJ,kBAAC,KAAD,CAAOA,KAAK,oBACR,kBAAC,GAAD,OAGJ,kBAAC,KAAD,CAAOA,KAAK,mBACR,kBAACE,GAAD,c,GApBPrc,aCPfsc,GAAOC,SAASC,eAAe,QACjCF,IACFG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFL,K,gCCVJ,OAAe,WACbvW,IAAK,CACH6W,UAAW,EACXC,eAAgB,EAChBC,eAAgB,EAEhBC,SAAU,EACVC,aAAc,EAEdhX,YAAa,EACbK,UAAW,GAEb4W,QAAS,CACPC,cAAe,eACfC,UAAW,aACXC,MAAO,mBAET7V,QAAS,CACPoL,WAAY,eACZ0K,cAAe,SAEjBpV,MAAO,CACLqV,cACI,wQAENC,KAAM,CACJ7Y,OAAQ,CACN8Y,eAAgB,IAChBC,IAAK,M","file":"static/js/main.63c1106e.chunk.js","sourcesContent":["var map = {\n\t\"./Defaults\": [\n\t\t80,\n\t\t0\n\t],\n\t\"./Defaults.js\": [\n\t\t80,\n\t\t0\n\t],\n\t\"./Text\": [\n\t\t81,\n\t\t1\n\t],\n\t\"./Text.js\": [\n\t\t81,\n\t\t1\n\t],\n\t\"./default-layout\": [\n\t\t32\n\t],\n\t\"./default-layout.js\": [\n\t\t32\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 155;\nmodule.exports = webpackAsyncContext;","import React, { Component } from 'react';\r\nimport './NavBar.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navigationBar\">\r\n        <h3>Navigation</h3>\r\n        <nav className=\"navigationBarList\">\r\n          <Link to=\"/\" className=\"navItem\">Time tracker</Link>\r\n          <Link to=\"/companies\" className=\"navItem\">Companies</Link>\r\n          <Link to=\"/highcharts-gant\" className=\"navItem\">Highcharts Gantt</Link>\r\n          <Link to=\"/tree-grid-gant\" className=\"navItem\">TreeGrid gantt</Link>\r\n          {/*<Link to=\"/wijmo-grid\" className=\"navItem\">Wijmo Grid</Link>*/}\r\n          {/*<Link to=\"/tree-grid\" className=\"navItem\">Tree Grid</Link>*/}\r\n        </nav>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavBar\r\n","export default (obj) => JSON.parse(JSON.stringify(obj))\r\n","export default {\r\n    isEmpty: v => v === '',\r\n    isNotEmpty: v => v !== '',\r\n    isNumber: v => typeof v === 'number' && !isNaN(v)\r\n}\r\n","/**\r\n * TreeGrid component\r\n * http://www.treegrid.com/TreeGrid5_6/Doc/TreeGridFAQ.htm\r\n *\r\n */\r\nimport React, { Component, createRef } from 'react'\r\nimport noop from 'lodash/noop'\r\nimport PropTypes from 'prop-types'\r\nimport merge from 'lodash/merge'\r\nimport helpers from './utils/global-helpers'\r\n\r\nconst { TreeGrid, Grids } = window\r\n\r\nGrids.OnCustomAjax = (G, IO, data, func) => {\r\n  if (IO.Url) {\r\n    import(`./config/${IO.Url}`)\r\n      .then(({ default: res }) => func(0, res))\r\n      .catch(err => err)\r\n  } else {\r\n    G.OnDataChanged(G, JSON.parse(G.GetChanges()), func) // TODO: data doesn't match with changes list\r\n  }\r\n  \r\n  return true\r\n}\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  \r\n  // events\r\n  onDataChanged: PropTypes.func,\r\n  \r\n  // data\r\n  body: PropTypes.arrayOf(PropTypes.object),\r\n  layout: PropTypes.shape({\r\n    Cfg: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\r\n  }).isRequired,\r\n  nestedKey: PropTypes.string,\r\n  \r\n  // rows defaults http://www.treegrid.com/Doc/RowDefaults.htm\r\n  Def: PropTypes.string,\r\n  DefEmpty: PropTypes.string,\r\n  DefParent: PropTypes.string,\r\n  Validator: PropTypes.func\r\n}\r\n\r\nconst defaultProps = {\r\n  onDataChanged: noop,\r\n  nestedKey: 'Items',\r\n  body: [],\r\n  Def: 'R',\r\n  DefEmpty: 'R',\r\n  DefParent: 'R',\r\n  Validator: null\r\n}\r\n\r\nclass TreeGridComponent extends Component {\r\n  static propTypes = propTypes\r\n  \r\n  static defaultProps = defaultProps\r\n  \r\n  $el = createRef()\r\n  \r\n  grid = null\r\n  \r\n  // eslint-disable-next-line react/destructuring-assignment\r\n  gridBody = this.prepareBody(this.props.body)\r\n  \r\n  dataManager = new Worker('/sheets.github.io/ManageData.worker.js')\r\n  \r\n  componentDidMount() {\r\n    this.initGrid()\r\n    this.subscribeGridEvents()\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    this.dataManager.terminate()\r\n    \r\n    if (!this.grid) return\r\n    this.grid.Dispose()\r\n  }\r\n  \r\n  subscribeGridEvents = () => {\r\n    this.grid.OnDataChanged = (G, { Changes }, func) => {\r\n      const { body, nestedKey, ganttRunKey, Validator } = this.props\r\n      let validChanges = []\r\n      let errors = []\r\n      \r\n      if (Validator) {\r\n        const validator = new Validator(G)\r\n        ;[validChanges, errors] = validator.validate(Changes)\r\n      }\r\n      \r\n      const hasErrors = errors.length\r\n      func(0, {\r\n        IO: {\r\n          Result: hasErrors ? -1 : 0\r\n        },\r\n        Changes: hasErrors ? errors : validChanges\r\n      })\r\n      \r\n      if (hasErrors) return\r\n      G.AcceptChanges()\r\n      \r\n      const onDataManagerMessage = (...args) => {\r\n        this.onDataManagerMessage(...args)\r\n        \r\n        this.dataManager.removeEventListener('message', onDataManagerMessage)\r\n      }\r\n      \r\n      this.dataManager.addEventListener('message', onDataManagerMessage)\r\n      this.dataManager.postMessage(['update', { changes: Changes, data: body, nestedKey }])\r\n    }\r\n  }\r\n  \r\n  onDataManagerMessage = e => {\r\n    if (!Array.isArray(e.data)) return\r\n    \r\n    const { onDataChanged } = this.props\r\n    const [event, data] = e.data\r\n    \r\n    switch (event) {\r\n      case 'updated':\r\n        onDataChanged(data.data)\r\n        break\r\n      case 'error':\r\n        // eslint-disable-next-line no-console\r\n        console.error('Worker error: ', data.data)\r\n        break\r\n      default:\r\n        // eslint-disable-next-line no-console\r\n        console.debug('Worker: event not found!')\r\n    }\r\n  }\r\n  \r\n  initGrid() {\r\n    const { layout, id } = this.props\r\n    const Data = merge({}, layout)\r\n    \r\n    this.grid = TreeGrid(\r\n      {\r\n        Debug: process.env.NODE_ENV !== 'production' ? 'Problem' : 0,\r\n        id,\r\n        Layout: {\r\n          Data\r\n        },\r\n        Upload: {\r\n          Format: 'JSON',\r\n          Flags: 'Spanned',\r\n          Type: 'Changes,Span,Gantt'\r\n        },\r\n        Data: {\r\n          Data: {\r\n            Body: [this.gridBody]\r\n          }\r\n        }\r\n      },\r\n      \r\n      // root element\r\n      this.$el.current,\r\n      \r\n      // inject to Grid\r\n      {\r\n        Component: this,\r\n        Helpers: helpers\r\n      }\r\n    )\r\n  }\r\n  \r\n  /**\r\n   * Data  format http://www.treegrid.com/Doc/DataFormats.htm#JSONFormat\r\n   * @param arr\r\n   * @returns {{}[]}\r\n   */\r\n  prepareBody(arr) {\r\n    const { nestedKey, Def, DefParent, DefEmpty } = this.props\r\n    \r\n    function traverse(item) {\r\n      if (item[nestedKey] && item[nestedKey].length) {\r\n        item.Def = item.Def || DefParent\r\n        item.Items = item[nestedKey].map(traverse)\r\n      } else {\r\n        item.Def = item.Def || Def\r\n      }\r\n      \r\n      item.DefParent = item.DefParent || DefParent\r\n      item.DefEmpty = item.DefEmpty || DefEmpty\r\n      \r\n      return item\r\n    }\r\n    \r\n    return arr.map(traverse)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div\r\n        ref={this.$el}\r\n        style={{\r\n          height: '100%',\r\n          width: '100%'\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default TreeGridComponent\r\n","import mergeWith from 'lodash/mergeWith'\r\nimport defaultLayout from '../config/default-layout'\r\n\r\nexport default function (...args) {\r\n    return mergeWith(\r\n        {},\r\n        defaultLayout,\r\n        ...args,\r\n        function (objValue, srcValue) {\r\n            if (Array.isArray(objValue)) {\r\n                return srcValue.concat(objValue)\r\n            }\r\n        }\r\n    )\r\n}\r\n","export default {\r\n    Cfg: {\r\n        ShowDeleted: \"0\",\r\n        AutoSort: \"0\",\r\n        DateStrings: '1',\r\n        ReloadChanged: '3',\r\n        MainCol: 'name',\r\n        NoVScroll: 0,\r\n        Sorting: 0,\r\n        AutoUpdate: 1,\r\n        StandardFilter: 3,\r\n        SaveExpanded: 1,\r\n        PersistentCfg: 2,\r\n        Filtered: 0,\r\n        RoundNumbers: 1,\r\n        RoundNumbersDigits: 2,\r\n        Size: 'Small',\r\n        Undo: 32,\r\n        RowIndex: \"Pos\",\r\n        SearchLap: 1,\r\n        FilterLap: 1,\r\n        Validate: 'Changed,Messages',\r\n        Sync: 'Horz,Vert',\r\n        SyncId: 'TimeTracker',\r\n        // CfgId: 'Costs',\r\n        ExportType: 'Expanded,Outline,Indent,ForceBorder,TextType,Strings,FixedRows,Size'\r\n    },\r\n    Toolbar: {\r\n        Cells30Manipulate: \"Undo,Redo,Add,AddChild,Calc,Outdent,Indent,ExpandAll,CollapseAll\"\r\n    },\r\n    Def: {\r\n        R: {\r\n            Expanded: 1\r\n        }\r\n    },\r\n    DefCols: {\r\n        C: {\r\n            CanFilter: 0\r\n        }\r\n    },\r\n    Root: {\r\n        AcceptDef: 'Well',\r\n        CDef: 'Well'\r\n    },\r\n    Panel: {\r\n        Copy: 1,\r\n        Delete: 1,\r\n        Select: 1,\r\n        Move: 1\r\n    },\r\n    MenuPrint: {\r\n        Items: 'ColsCaption,Cols,SpaceCaption,RowsCaption,Foot,OptionsCaption,Options,SizeCaption,Size',\r\n        Attribute: 'CanPrint',\r\n        HideUnused: '1'\r\n    }\r\n}\r\n","import centerHeader from '../../components/TreeGridComponent/utils/center-header'\r\n\r\nexport default () => {\r\n    const mainHeader = {\r\n        Pos: 'Pos',\r\n        name: \"Name\",\r\n        code: \"Code\",\r\n        hours: 'Hours',\r\n        _start: 'Start',\r\n        _end: 'End'\r\n    }\r\n\r\n    // set align for header' key\r\n    // http://www.treegrid.com/Doc/ColBasics.htm#HeaderCellvalue\r\n    Object.keys(mainHeader).forEach((key) => centerHeader(key, mainHeader))\r\n\r\n    mainHeader.id = 'Header'\r\n\r\n    return [\r\n        mainHeader\r\n    ]\r\n}\r\n","export default function getPrevEvent(grid, row) {\r\n    const _row = grid.GetPrev(row)\r\n\r\n    if (!_row) return\r\n\r\n    if (_row.Def.Name !== 'Event') {\r\n        return getPrevEvent(grid, _row)\r\n    }\r\n\r\n    return _row\r\n}\r\n","import isNumber from 'lodash/isNumber'\r\nimport isNaN from 'lodash/isNaN'\r\n\r\nexport default function pickNumber(...args) {\r\n    return args.find(n => isNumber(n) && !isNaN(n));\r\n};\r\n","class ChangesHolder {\n  _changes = {}\n\n  static getErrorKey(key) {\n    return `${key}Error`\n  }\n\n  static getMessages(change, key) {\n    return change[ChangesHolder.getErrorKey(key)] || []\n  }\n\n  getChange(id) {\n    const row = this._changes[id]\n    if (!row) {\n      this._changes[id] = { id }\n    }\n\n    return this._changes[id]\n  }\n\n  addError(id, key, message) {\n    const change = this.getChange(id)\n\n    const messages = ChangesHolder.getMessages(change, key)\n    messages.push(message)\n\n    change[ChangesHolder.getErrorKey(key)] = messages\n  }\n\n  removeError(id, key) {\n    this.addError(id, key, '')\n  }\n\n  getChanges() {\n    return Object.values(this._changes).reduce((acc, errors) => {\n      const change = {}\n\n      Object.entries(errors).forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          change[key] = value.find(m => m) || ''\n        } else {\n          change[key] = value\n        }\n      })\n\n      return [...acc, change]\n    }, [])\n  }\n}\n\nexport default ChangesHolder\n","import ChangesHolder from './ChangesHolder'\n\nclass BaseValidator {\n  validChanges = null\n\n  invalidChanges = null\n\n  rules = {}\n\n  constructor(grid) {\n    if (!grid) {\n      throw new Error('TreeGrid validator: Set related grid!')\n    }\n\n    this.grid = grid\n  }\n\n  _getRow(id) {\n    return this.grid.GetRowById(id)\n  }\n\n  forEachRule(fn) {\n    Object.entries(this.rules).forEach(([rule, cb]) => fn(rule, cb))\n  }\n\n  validate(changes) {\n    this.validChanges = new ChangesHolder()\n    this.invalidChanges = new ChangesHolder()\n\n    changes.forEach(change => {\n      this.forEachRule((key, fn) => {\n        if (key in change) {\n          fn.call(this, change)\n        }\n      })\n    })\n\n    return [this.validChanges.getChanges(), this.invalidChanges.getChanges()]\n  }\n}\n\nexport default BaseValidator\n","import React, { Component } from 'react';\r\nimport TreeGridComponent from '../../../components/TreeGridComponent'\r\n\r\n\r\n// Layout\r\nimport mergeLayouts from '../../../components/TreeGridComponent/utils/merge-layouts'\r\nimport staticLayout from '../static-layout'\r\nimport createColumns from '../create-columns'\r\nimport createLeftColumns from '../create-left-columns'\r\nimport createHead from '../create-head'\r\nimport createFoot from '../create-foot'\r\nimport createSolid from '../create-solid'\r\nimport createRowsDef from '../create-rows-def'\r\n\r\n// Utils\r\nimport getPrevEvent from './utils/get-prev-event'\r\nimport pickNumber from '../../../helpers/pick-number'\r\nimport isUndefined from 'lodash/isUndefined'\r\nimport Validator from '../../../components/TreeGridComponent/validator'\r\n\r\nclass TimeTrackerGrid extends Component {\r\n    layout = this.createLayout()\r\n\r\n    createLayout() {\r\n        const { OperationStartDate, isAux, DerrickType } = this.props\r\n        const dynamicLayout = {}\r\n\r\n        dynamicLayout.LeftCols = createLeftColumns()\r\n\r\n        dynamicLayout.Cols = createColumns({ isAux })\r\n\r\n        dynamicLayout.Head = createHead()\r\n\r\n        dynamicLayout.Foot = createFoot()\r\n\r\n        dynamicLayout.Solid = createSolid({ OperationStartDate, isAux, DerrickType })\r\n\r\n        dynamicLayout.Def = createRowsDef()\r\n\r\n        return mergeLayouts(staticLayout, dynamicLayout)\r\n    }\r\n\r\n    getEventStart = (grid, row, get) => {\r\n        const eventRow = getPrevEvent(grid, row)\r\n\r\n        if (eventRow) {\r\n            return get(eventRow, '_end')\r\n        }\r\n\r\n        return this.props.OperationStartDate\r\n    }\r\n\r\n    getEventEnd = (start, duration) => {\r\n        if (start && typeof duration === 'number') {\r\n            return start + duration\r\n        }\r\n\r\n        return ''\r\n    }\r\n\r\n    getEventDuration = (...args) => {\r\n        const hours = pickNumber(...args)\r\n\r\n        if (isUndefined(hours)) return ''\r\n\r\n        return 60 * 60 * 1000 * hours // to milliseconds\r\n    }\r\n\r\n    getPlannedDepth = (grid, row, get, plannedDepth) => {\r\n        if (grid.Helpers.isNotEmpty(plannedDepth)) return plannedDepth\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        if (eventRow) {\r\n            return get(eventRow, '_plannedDepth')\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    getActualDepth = (grid, row, get, actualDepth) => {\r\n        if (grid.Helpers.isNotEmpty(actualDepth)) return actualDepth\r\n\r\n        if (!this.hasActual(grid, row)) return ''\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        if (eventRow) {\r\n            return get(eventRow, '_actualDepth')\r\n        }\r\n\r\n        return 0\r\n    }\r\n\r\n    getBehindHours = (grid, row, get, delta) => {\r\n        if (!this.hasActual(grid, row)) return ''\r\n\r\n        const eventRow = getPrevEvent(grid, row)\r\n        const prevDelta = eventRow ? get(eventRow, 'behindHours') : 0\r\n\r\n        return prevDelta + delta\r\n    }\r\n\r\n    hasActual = (grid, row) => {\r\n        return grid.Helpers.isNotEmpty(row.actualHours)\r\n    }\r\n\r\n    render() {\r\n        return <TreeGridComponent\r\n            layout={this.layout}\r\n            nestedKey={TimeTrackerGrid.nestedKey}\r\n            getBehindHours={this.getBehindHours}\r\n            getActualDepth={this.getActualDepth}\r\n            getPlannedDepth={this.getPlannedDepth}\r\n            getEventEnd={this.getEventEnd}\r\n            getEventStart={this.getEventStart}\r\n            getEventDuration={this.getEventDuration}\r\n            Validator={Validator}\r\n            {...this.props}\r\n        />\r\n    }\r\n}\r\n\r\nexport default TimeTrackerGrid\r\n","export default () => {\r\n    return [\r\n        {\r\n            Name: 'code',\r\n            CanFilter: 1,\r\n            MinWidth: 60,\r\n            CaseSensitive: 0\r\n        },\r\n        {\r\n            Name: 'name',\r\n            RelWidth: 1,\r\n            MinWidth: 250,\r\n            CanFilter: 1,\r\n            CaseSensitive: 0\r\n        }\r\n    ]\r\n}\r\n","export default ({ isAux }) => {\r\n    const cols = [\r\n        {\r\n            Name: 'hours',\r\n            MinWidth: 80,\r\n            CanEmpty: 1,\r\n            Format: ',0.00',\r\n            EditFormat: '',\r\n            Type: 'Float'\r\n        },\r\n        {\r\n            Name: '_eventDuration',\r\n            Type: 'Float',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0,\r\n            Formula: 'Grid.Component.props.getEventDuration(hours)'\r\n        },\r\n        {\r\n            Name: 'start',\r\n            Visible: 0,\r\n            CanHide: 0,\r\n            CanPrint: 0,\r\n            CanExport: 0\r\n        },\r\n        {\r\n            Name: '_start',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            CanEdit: 1,\r\n            OnChange: `Grid.SetValue(Row, \"start\", Value, 1)`,\r\n            ClassFormula: 'Grid.Helpers.isEmpty(start) && \"TSClassReadOnly\"',\r\n            Formula: 'start ? start : Grid.Component.props.getEventStart(Grid, Row, Get)',\r\n            MinWidth: 120\r\n        },\r\n        {\r\n            Name: '_end',\r\n            Format: 'yyyy-M-d H:mm',\r\n            Type: 'Date',\r\n            MinWidth: 120,\r\n            Formula: 'Grid.Component.props.getEventEnd(_start, _eventDuration)'\r\n        }\r\n    ]\r\n\r\n    return cols\r\n}\r\n","export default function centerHeader(key, config) {\r\n    config[`${key}Align`] = 'Center'\r\n}\r\n","export default () => {\r\n    const total = {\r\n        id: 'Total',\r\n        Color: '#D0E6F5',\r\n        CanDelete: 0,\r\n        CanEdit: 0,\r\n        Calculated: 1,\r\n        code: \"SUM\",\r\n\r\n        // calculations\r\n        hoursFormula: 'sum()',\r\n        _startFormula: '',\r\n        _endFormula: 'Grid.GetLast() ? Get(Grid.GetLast(), \"_end\") : \"\"'\r\n    }\r\n\r\n    return [total]\r\n}\r\n","export default ({ OperationStartDate, DerrickType, isAux }) => {\r\n    const topBar = {\r\n        id: 'topBar',\r\n        Space: -1,\r\n        Tag: 'timeGridTopBar',\r\n        Cells: 'OperationStartDate',\r\n\r\n        // OperationStartDate cell settings\r\n        OperationStartDate,\r\n        OperationStartDateLabel: 'Start operation: ',\r\n        OperationStartDateWidth: 120,\r\n        OperationStartDateFormat: 'yyyy-M-d H:mm',\r\n        OperationStartDateType: 'Date',\r\n        OperationStartDateRecalc: 256,\r\n        OperationStartDateOnChange: 'Grid.Component.props.handleOperationStartDateChange(Grid,Value)',\r\n\r\n        // DerrickType,\r\n        // DerrickTypeType: 'Bool',\r\n        // DerrickTypeLabel: 'Aux derrick: ',\r\n        // DerrickTypeOnChange: 'Grid.Component.props.handleDerrickTypeChange(Grid,Value)',\r\n    }\r\n\r\n    const topBarAux = {\r\n        id: 'topBarAux',\r\n        Visible: 0,\r\n        Cells: 'OperationStartDate',\r\n        OperationStartDate,\r\n        OperationStartDateRecalc: 256\r\n    }\r\n\r\n    return isAux ? [topBarAux] : [topBar]\r\n}\r\n","export default () => {\r\n    const commonGroupDef = {\r\n        CanEdit: 0,\r\n        Calculated: 1,\r\n\r\n        nameCanEdit: 1,\r\n        codeCanEdit: 1,\r\n\r\n        // calculations\r\n        hoursFormula: 'sum()',\r\n        _startFormula: 'Row.firstChild ? Get(Row.firstChild, \"_start\") : \"\"',\r\n        _endFormula: 'Row.lastChild ? Get(Row.lastChild, \"_end\") : \"\"',\r\n    }\r\n\r\n    const Well = {\r\n        CDef: 'Phase',\r\n        AcceptDef: 'Phase',\r\n\r\n        Class: 'time-grid-well',\r\n        Color: '#d7d7d7',\r\n\r\n        ...commonGroupDef\r\n    }\r\n\r\n    const Phase = {\r\n        CDef: 'Event',\r\n        AcceptDef: 'Event',\r\n\r\n        Class: 'time-grid-phase',\r\n        Color: '#f0f0f0',\r\n\r\n        ...commonGroupDef\r\n    }\r\n\r\n    const eventCalcOrder = [\r\n        'nameClass',\r\n        '_tftHours',\r\n        '_plannedDepth',\r\n        '_plannedDepthClass',\r\n        '_actualDepth',\r\n        '_actualDepthClass',\r\n        '_eventDuration',\r\n        '_start',\r\n        '_startClass',\r\n        '_end'\r\n    ]\r\n\r\n    const Event = {\r\n        AcceptDef: '',\r\n\r\n        CalcOrder: eventCalcOrder.join()\r\n    }\r\n\r\n    return { Well, Phase, Event }\r\n}\r\n","import data from './data.json';\r\nimport moment from 'moment'\r\n\r\nconst STORAGE_KEY = 'data'\r\n\r\nclass DataService {\r\n  data = this.getFromLS() || data;\r\n  days = this.getDays()\r\n  \r\n  constructor() {\r\n    if (DataService.instance) {\r\n      return DataService.instance\r\n    }\r\n    \r\n    DataService.instance = this\r\n  }\r\n  \r\n  save(key, data) {\r\n    if (!key) {\r\n      throw new Error('No key at save method')\r\n    }\r\n    \r\n    this.data[key] = data\r\n    \r\n    this.saveToLS()\r\n  }\r\n  \r\n  saveToLS() {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(this.data))\r\n  }\r\n  \r\n  getFromLS() {\r\n    try {\r\n      return JSON.parse(localStorage.getItem(STORAGE_KEY))\r\n    } catch (e) {\r\n      return null\r\n    }\r\n  }\r\n  \r\n  getStartTime() {\r\n    return this.data.OperationStartDate\r\n  }\r\n  \r\n  getPhases() {\r\n    return this.data.Phases\r\n  }\r\n  \r\n  getPhasesAux() {\r\n    return this.data.PhasesAux\r\n  }\r\n  \r\n  getCompanies() {\r\n    return this.data.Companies\r\n  }\r\n  \r\n  getCosts() {\r\n    return this.data.Costs\r\n  }\r\n  \r\n  getDays() {\r\n    const sum = (arr) => arr.reduce((s, item) => {\r\n      if (item.Items) {\r\n        return s + sum(item.Items)\r\n      }\r\n      \r\n      return s + (item.hours || 0)\r\n    }, 0)\r\n    \r\n    let totalDuration = sum(this.data.Phases)\r\n    const start = this.getStartTime()\r\n    const days = []\r\n    \r\n    while (totalDuration > 0) {\r\n      const date = moment(start + totalDuration * 60 * 60 * 1000)\r\n      days.push(date.format('YYYY_MM_DD'))\r\n      totalDuration -= 24\r\n    }\r\n    \r\n    return days\r\n  }\r\n}\r\n\r\nexport default new DataService()\r\n","import React, { Component } from 'react'\r\nimport deepClone from '../../helpers/deep-clone'\r\nimport TimeTrackerGrid from './TimeTrackerGrid'\r\nimport dataService from '../../db/dataService'\r\n\r\nclass TimeTracker extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    \r\n    this.state = {\r\n      DerrickType: 1,\r\n      Phases: this.prepareState(dataService.getPhases()),\r\n      PhasesAux: this.prepareState(dataService.getPhasesAux()),\r\n      OperationStartDate: dataService.getStartTime()\r\n    }\r\n  }\r\n  \r\n  prepareState(data) {\r\n    const wells = deepClone(data)\r\n    const defs = ['Well', 'Phase', 'Event']\r\n    const reCalc = [3, 3, 256]\r\n    \r\n    function addRowDefinitions(row, level = 0) {\r\n      row.Def = defs[level]\r\n      row.Recalc = reCalc[level]\r\n      \r\n      if (row.Items) {\r\n        row.Items.forEach(row => addRowDefinitions(row, level + 1))\r\n      }\r\n    }\r\n    \r\n    wells.forEach(row => addRowDefinitions(row, 0))\r\n    return wells\r\n  }\r\n  \r\n  onDataChanged = (newData, key) => {\r\n    this.setState(\r\n      { [key]: newData },\r\n      () => {\r\n        dataService.save(key, newData)\r\n      }\r\n    )\r\n  }\r\n  \r\n  handleOperationStartDateChange = (grid, value) => {\r\n    this.setState({ OperationStartDate: value })\r\n  }\r\n  \r\n  handleDerrickTypeChange = (grid, value) => {\r\n    this.setState({ DerrickType: value })\r\n  }\r\n  \r\n  render() {\r\n    const { DerrickType, Phases, PhasesAux, OperationStartDate } = this.state\r\n    \r\n    return (\r\n      <div className=\"time-grid-view\">\r\n        <div id=\"timeGridTopBar\" className=\"time-grid-view__top-bar\"/>\r\n        \r\n        <div className=\"time-grid-view__grids\">\r\n          <TimeTrackerGrid\r\n            id=\"TimeTrackerMain\"\r\n            body={Phases}\r\n            DerrickType={DerrickType}\r\n            OperationStartDate={OperationStartDate}\r\n            handleDerrickTypeChange={this.handleDerrickTypeChange}\r\n            handleOperationStartDateChange={this.handleOperationStartDateChange}\r\n            onDataChanged={(data) => this.onDataChanged(data, 'Phases')}\r\n          />\r\n          \r\n          {DerrickType ? <TimeTrackerGrid\r\n            id=\"TimeTrackerAux\"\r\n            isAux={true}\r\n            body={PhasesAux}\r\n            DerrickType={DerrickType}\r\n            OperationStartDate={OperationStartDate}\r\n            onDataChanged={(data) => this.onDataChanged(data, 'PhasesAux')}\r\n          /> : ''}\r\n        </div>\r\n      \r\n      \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TimeTracker\r\n","export default {\n  Cfg: {\n    Dragging: 1,\n    HideZero: 1,\n    Size: 'Small',\n    ShowDeleted: 0,\n    AutoSort: 0,\n    RowIndex: 'Pos',\n    Filtered: 0,\n    RoundNumbers: 1,\n    RoundNumbersDigits: 2,\n    ExportType: 'Expanded,Outline,Indent,ForceBorder,TextType,Strings,FixedRows,Size',\n    PrintPageOrientation: 1,\n    PrintPageSize: 7,\n    Undo: 32,\n    ColPaging: 2,\n    NoVScroll: 1,\n    Alternate: 2\n  },\n  Def: {\n    Comment: {\n      CanEdit: 0,\n      CanCopy: 0,\n      CanDelete: 0,\n      CanSelect: 0,\n      CanDrag: 0\n    }\n  },\n  Toolbar: {\n    Cells30Manipulate: 'Undo,Redo',\n    Cells20Data: 'Print,ExportPDF,Export,Columns',\n    Cells60Cfg: 'Help'\n  },\n  Panel: {\n    Select: 1,\n    Copy: 1,\n    Delete: 1,\n    Move: 1\n  },\n  MenuExport: {\n    Items: 'ColsCaption,Cols,RowsCaption,OptionsCaption,Options',\n    Attribute: 'CanExport',\n    HideUnused: 1\n  },\n  MenuPrint: {\n    Items: 'ColsCaption,Cols,SpaceCaption,RowsCaption,OptionsCaption,Options,SizeCaption,Size',\n    Attribute: 'CanPrint',\n    HideUnused: '1'\n  }\n}\n","export const COLS = ['in', 'out', 'onboard']\n","import random from 'lodash/random';\nimport { loremIpsum } from 'lorem-ipsum'\nimport { COLS } from './constants'\n\nexport default (days) => {\n  const daysHeader = {\n    Kind: 'Header',\n    Spanned: 1,\n    \n    name: 'Name',\n    nameAlign: 'Center'\n  }\n  \n  const companiesHeader = {\n    Kind: 'Header'\n  }\n  \n  const commentRow = {\n    Def: 'Comment',\n    Spanned: 1,\n    name: 'Comments',\n    nameAlign: 'Center',\n    nameVertAlign: 'middle',\n    nameRowSpan: 10\n  }\n  \n  days.forEach(day => {\n    const colName = `${day}_in`\n    \n    Object.assign(daysHeader, {\n      [colName]: day.replaceAll('_', '-'),\n      [`${colName}Span`]: 3,\n      [`${colName}Align`]: 'Center'\n    })\n    \n    COLS.forEach(col => Object.assign(companiesHeader, {\n      [`${day}_${col}`]: col.toUpperCase(),\n      [`${day}_${col}Align`]: 'Center'\n    }))\n    \n    Object.assign(commentRow, {\n      [`${colName}Span`]: 3\n    })\n  })\n  \n  const comments = Array.from({ length: 10 }).map(() => ({ ...commentRow }))\n  \n  days.forEach(day => {\n    const rowIndex = random(0, 9)\n    const row = comments[rowIndex]\n    \n    row[`${day}_in`] = 'hello1 hello2 hello3 hello4 hello5 hello6 hello7 hello8 hello9 hello10 hello11 hello12'\n  })\n  console.log(comments)\n  return [{ ...daysHeader, id: 'Header' }, ...comments, daysHeader, companiesHeader]\n}\n","export default days => {\n  const toComment = { Pos: 'To', Spanned: 1 }\n  const fromComment = { Pos: 'From', Spanned: 1 }\n  \n  days.forEach(day => {\n    const colName = `${day}_in`\n    \n    Object.assign(toComment, {\n      [`${colName}Span`]: 3\n    })\n  \n    Object.assign(fromComment, {\n      [`${colName}Span`]: 3\n    })\n  })\n  \n  return [toComment, fromComment]\n}\n","import mergeLayouts from '../../components/TreeGridComponent/utils/merge-layouts'\nimport staticLayout from './static-layout'\nimport createColumns from './create-columns'\nimport createHead from './create-head'\nimport createFoot from './create-foot'\nimport dataService from '../../db/dataService'\nimport createLeftColumns from './create-left-columns'\n\nexport default () => {\n  const dynamicLayout = {\n    Foot: createFoot(dataService.days),\n    Head: createHead(dataService.days),\n    LeftCols: createLeftColumns(),\n    Cols: createColumns(dataService.days)\n  }\n  \n  return mergeLayouts(staticLayout, dynamicLayout)\n}\n","import { COLS } from './constants'\n\nexport default (days) => {\n  return days.map(day => {\n    return COLS.map(col => ({\n      Name: `${day}_${col}`,\n      Width: 80\n    }))\n  }).flat()\n}\n","export default () => {\n  return [\n    {\n      Name: 'name',\n      Spanned: 1\n    }\n  ]\n}\n","import React, { useMemo } from 'react'\nimport createLayout from './create-layout'\nimport TreeGridComponent from '../../components/TreeGridComponent'\nimport dataService from '../../db/dataService'\n\nconst GRID_ID = 'Companies'\n\nconst Companies = () => {\n  const layout = useMemo(createLayout, [])\n  \n  return <TreeGridComponent id={GRID_ID} layout={layout} body={dataService.getCompanies()}/>\n}\n\nexport default Companies\n","import React, { useState } from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport dataService from '../../db/dataService'\n\nrequire('highcharts/modules/gantt')(Highcharts)\nrequire('highcharts/modules/draggable-points')(Highcharts)\n\nconst HighchartGant = () => {\n  var today = new Date(),\n    day = 1000 * 60 * 60 * 24;\n\n// Set to 00:00:00:000 today\n  today.setUTCHours(0);\n  today.setUTCMinutes(0);\n  today.setUTCSeconds(0);\n  today.setUTCMilliseconds(0);\n  today = today.getTime();\n  \n  let prevEvent = null\n  const start = dataService.getStartTime()\n  const collectEvents = (acc, item) => {\n    if (item.Items) {\n      item.Items.reduce((ac, item) => collectEvents(ac, item), acc)\n    } else {\n      item.end = (item.start || start) + (item.hours * 60 * 60 * 1000)\n      item.start = prevEvent ? prevEvent.end : start\n      item.y = 0\n      prevEvent = item\n      acc.push(item)\n    }\n    \n    return acc\n  }\n  \n  const events = dataService.getPhases().reduce((acc, item) => collectEvents(acc, item), [])\n  console.log(events)\n  \n  const [options] = useState({\n    title: {\n      text: 'Intraday jobs Scheduling'\n    },\n    xAxis: {\n      currentDateIndicator: true\n    },\n    \n    yAxis: {\n      categories: ['Main', 'Aux']\n    },\n    \n    plotOptions: {\n      series: {\n        dragDrop: {\n          draggableX: true,\n          dragMinY: 0,\n          dragMaxY: 2,\n          dragPrecisionX: 1000 * 60\n        },\n        dataLabels: {\n          enabled: true,\n          format: '{point.name}'\n        },\n        allowPointSelect: true,\n        point: {\n          events: {\n            drag(e) {\n              console.log(e)\n            }\n          }\n        }\n      }\n    },\n    \n    series: [{\n      name: 'Init M1, Import FIRT market data',\n      data: events\n    }]\n  })\n  \n  return (\n    <HighchartsReact\n      containerProps={{ style: { height: '100%' } }}\n      highcharts={Highcharts}\n      constructorType='ganttChart'\n      options={options}\n    />\n  )\n}\n\nexport default HighchartGant\n","export default {\n  Cfg: {\n    AutoUpdate: 1,\n    FastGantt: 1,\n    GanttStyle: 'Standard'\n  },\n  Zoom: [\n    {\n      Name: \"months\",\n      GanttUnits: \"d\",\n      GanttWidth: \"50\", // 1 day equal 50px\n      GanttDragUnits: 'h',\n      GanttChartRound: \"d\",\n      GanttHeader1: \"M#MMMM yyyy\"\n    },\n    {\n      Name: \"days\",\n      GanttUnits: \"h\",\n      GanttWidth: \"8\", // 1 hour equal 8px\n      GanttDragUnits: 'm',\n      GanttChartRound: \"d\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h6#HH\"\n    },\n    {\n      Name: \"hours\",\n      GanttUnits: \"h\",\n      GanttWidth: \"25\", // 1 hour equal 25px\n      GanttDragUnits: 'm',\n      GanttChartRound: \"h\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h#HH\"\n    },\n    {\n      Name: \"minutes\",\n      GanttUnits: \"m\",\n      GanttWidth: \"2\", // 1 minute equal 2px\n      GanttDragUnits: 's',\n      GanttChartRound: \"h\",\n      GanttHeader1: \"d#dddd dddddd MMMM yyyy\",\n      GanttHeader2: \"h#HH\",\n      GanttHeader3: \"m15#mm\"\n    }\n  ],\n  Toolbar: {\n    Cells05: \"Zoom\",\n    ZoomType: \"SelectGanttZoom\",\n    ZoomWidth: \"90\"\n  }\n}\n","import dataService from '../../db/dataService'\nimport moment from 'moment'\n\nconst CLASSES = ['Aqua', 'Blue', 'Fuchsia', 'Gray', 'Green', 'Lime', 'Maroon', 'Navy', 'Olive', 'Orange', 'Purple', 'Red', 'Silver', 'Teal', 'White', 'Yellow']\n\nexport default () => {\n  const start = dataService.getStartTime()\n  \n  const collectEvents = (arr, settings = { Type: 'box' }) => {\n    let prevEvent = null\n    \n    const collector = (acc, item) => {\n      if (item.Items) {\n        item.Items.reduce((acc, item) => collector(acc, item), acc)\n      } else {\n        const event = {\n          Text: item.name,\n          Id: item.id,\n          Class: CLASSES[acc.length],\n          ...settings\n        }\n        event.start = item.start ? item.start : prevEvent ? prevEvent.end : start\n        event.end = event.start + (item.hours * 60 * 60 * 1000)\n        event.Start = moment(event.start).format('MM/DD/YYYY HH:mm:ss')\n        event.End = moment(event.end).format('MM/DD/YYYY HH:mm:ss')\n        \n        prevEvent = event\n        acc.push(event)\n      }\n      \n      return acc\n    }\n    \n    return arr.reduce(collector, [])\n  }\n  \n  \n  const eventsMain = collectEvents(dataService.getPhases(), { Type: 'Fixed' })\n  const eventsAux = collectEvents(dataService.getPhasesAux())\n  console.log(eventsMain, eventsAux)\n  return [\n    {\n      id: '64029a29010',\n      name: 'Main',\n      CanEdit: 0,\n      Tip: 'Phase 1',\n      events: eventsMain\n    },\n    {\n      id: '63029a29010',\n      name: 'Aux',\n      Tip: 'Phase 1',\n      events: eventsAux\n    }\n  ]\n}\n","import merge from 'lodash/merge'\r\nimport set from 'lodash/set'\r\nimport deepClone from '../../helpers/deep-clone'\r\n\r\nconst convertValue = value => {\r\n  if (value === '') return value\r\n  \r\n  if (value === '0') return 0\r\n  \r\n  return +value || value\r\n}\r\n\r\nclass DataListManager {\r\n  // symbol vars for ignoring JSON.stringify\r\n  static parent = Symbol('parent')\r\n  \r\n  static next = Symbol('next')\r\n  \r\n  static prev = Symbol('prev')\r\n  \r\n  static indexWithinParent = Symbol('indexWithinParent')\r\n  \r\n  #list\r\n  \r\n  #data\r\n  \r\n  nestedKey = ''\r\n  \r\n  constructor(data, nestedKey) {\r\n    const dataClone = deepClone(data)\r\n    this.nestedKey = nestedKey\r\n    \r\n    // TODO: fix flatting for more than one well. Now it works just for two levels\r\n    // nextParent is defined wrong.\r\n    function flatArrById(arr, list, parent = null, nextParent = null) {\r\n      let i = 0\r\n      while (i < arr.length) {\r\n        const item = arr[i++]\r\n        const hasChildren = nestedKey && item[nestedKey] && item[nestedKey].length > 0\r\n        \r\n        if (hasChildren) {\r\n          // eslint-disable-next-line prefer-destructuring\r\n          item[DataListManager.next] = item[nestedKey][0] // get first child\r\n        } else {\r\n          item[DataListManager.next] = arr[i] ? arr[i] : nextParent // get sibling item or next parent\r\n        }\r\n        \r\n        item[DataListManager.parent] = parent\r\n        item[DataListManager.prev] = arr[i - 2] ? arr[i - 2] : parent\r\n        item[DataListManager.indexWithinParent] = i - 1\r\n        list.set(item.id, item)\r\n        \r\n        if (hasChildren) {\r\n          flatArrById(item[nestedKey], list, item, arr[i])\r\n        }\r\n      }\r\n      \r\n      return list\r\n    }\r\n    \r\n    this.#data = dataClone\r\n    this.#list = flatArrById(dataClone, new Map())\r\n  }\r\n  \r\n  get data() {\r\n    return deepClone(this.#data)\r\n  }\r\n  \r\n  /**\r\n   * Get future index for inserting item. choose between nextIndex or prevIndex\r\n   * @param nextId - uid\r\n   * @param prevId - uid\r\n   * @returns {number}\r\n   * @private\r\n   */\r\n  _getFutureIndex(nextId, prevId) {\r\n    const next = this.getItem(nextId)\r\n    const prev = this.getItem(prevId)\r\n    \r\n    if (next) {\r\n      return next[DataListManager.indexWithinParent]\r\n    }\r\n    \r\n    if (prev) {\r\n      return prev[DataListManager.indexWithinParent] + 1\r\n    }\r\n    \r\n    return 0\r\n  }\r\n  \r\n  /**\r\n   * Returns parent's array for child item\r\n   * @param parent\r\n   * @returns {Array}\r\n   * @private\r\n   */\r\n  _getParentArr(parent) {\r\n    if (parent) {\r\n      parent[this.nestedKey] = parent[this.nestedKey] || []\r\n      return parent[this.nestedKey]\r\n    }\r\n    \r\n    return this.#data\r\n  }\r\n  \r\n  /**\r\n   * Add child to array and update their index\r\n   * @param parent\r\n   * @param index\r\n   * @param item\r\n   * @private\r\n   */\r\n  _setChildToParent(parent, index, item) {\r\n    const arr = this._getParentArr(parent)\r\n    \r\n    arr.splice(index, 0, item)\r\n    this._updateIndexWithinParent(arr)\r\n  }\r\n  \r\n  _updateIndexWithinParent(arr) {\r\n    let i = 0\r\n    while (i < arr.length) {\r\n      const item = this.#list.get(arr[i++].id)\r\n      item[DataListManager.indexWithinParent] = i - 1\r\n    }\r\n  }\r\n  \r\n  getItem(id) {\r\n    return this.#list.get(id)\r\n  }\r\n  \r\n  hasItem(id) {\r\n    return this.#list.has(id)\r\n  }\r\n  \r\n  /**\r\n   * Remove item from parent or from parent & list\r\n   * @param id\r\n   * @param isTotally{Boolean}\r\n   */\r\n  removeItem(id, isTotally = true) {\r\n    if (!this.hasItem(id)) {\r\n      return\r\n    }\r\n    \r\n    const item = this.getItem(id)\r\n    const parent = item[DataListManager.parent]\r\n    const index = item[DataListManager.indexWithinParent]\r\n    \r\n    // remove item from list\r\n    if (isTotally) this.#list.delete(id)\r\n    \r\n    const arr = this._getParentArr(parent)\r\n    \r\n    arr.splice(index, 1)\r\n    this._updateIndexWithinParent(arr)\r\n  }\r\n  \r\n  addItem(id, parentId, nextId, prevId, item) {\r\n    if (this.hasItem(id)) {\r\n      this.moveItem(id, parentId, nextId, prevId)\r\n      return\r\n    }\r\n    \r\n    const parent = this.getItem(parentId)\r\n    const index = this._getFutureIndex(nextId, prevId)\r\n    const convertedItem = DataListManager.convertItemKeys(item)\r\n    // update list\r\n    this.#list.set(id, convertedItem)\r\n    \r\n    // set parent\r\n    convertedItem[DataListManager.parent] = parent\r\n    \r\n    this._setChildToParent(parent, index, convertedItem)\r\n  }\r\n  \r\n  moveItem(id, parentId, nextId, prevId) {\r\n    const item = this.getItem(id)\r\n    const parent = this.getItem(parentId)\r\n    const index = this._getFutureIndex(nextId, prevId)\r\n    \r\n    // remove item from old parent\r\n    this.removeItem(id, false)\r\n    \r\n    // change parent\r\n    item[DataListManager.parent] = parent\r\n    \r\n    this._setChildToParent(parent, index, item)\r\n  }\r\n  \r\n  updateItem(id, data) {\r\n    if (!this.hasItem(id)) {\r\n      return\r\n    }\r\n    \r\n    const item = this.getItem(id)\r\n    const convertedData = DataListManager.convertItemKeys(data)\r\n    merge(item, convertedData)\r\n  }\r\n  \r\n  static convertItemKeys(item) {\r\n    // TODO: change after model structure concern\r\n    return Object.entries(item).reduce((acc, [key, value]) => {\r\n      if (/^_|^f_|^[A-Z]_|Click|Error/.test(key) && !/Span$/.test(key)) return acc // ignore temp keys\r\n      \r\n      value = convertValue(value) // TODO: replace to TReeGrid config. convert to number.\r\n      \r\n      set(acc, key, value)\r\n      return acc\r\n    }, {})\r\n  }\r\n}\r\n\r\nexport { DataListManager, DataListManager as default }\r\n","import React, { useEffect } from 'react'\nimport TreeGridComponent from '../../components/TreeGridComponent'\nimport createLayout from './create-layout'\nimport createBody from './create-body'\nimport dataService from '../../db/dataService'\nimport DataListManager from './DataListManager'\n\nconst GRID_ID = 'GANTT'\n\nconst { TGAddEvent } = window\n\nconst TreeGridGant = () => {\n  const layout = createLayout()\n  const body = createBody()\n  let dialog = null\n  \n  useEffect(() => {\n    TGAddEvent('OnDragGanttRun', GRID_ID, (grid, row, col, index, start, newData, oldData, change, dir, XY, keyPrefix, X, Y) => {\n      const date = new Date(newData).toString().substr(0, 21)\n      if (dialog) {\n        const inputEl = dialog.Tag.getElementsByTagName(\"input\")[0]\n        inputEl.value = date\n        return\n      }\n      \n      dialog = window.ShowDialog(\n        {\n          Body: `<input type=\"text\" style=\"width: 140px\" value=\"${date}\">`\n        },\n        {\n          X, Y: Y + 12\n        }\n      )\n    })\n    \n    TGAddEvent('OnEndDragGanttRun', GRID_ID, (grid, row, col, index, start, newData) => {\n      dialog.Close()\n      dialog = null\n    })\n  }, [])\n  \n  const onDataChanged = (newData) => {\n    const dataManager = new DataListManager(dataService.getPhasesAux(), 'Items')\n    const events = Function(`return ${newData[1].events}`)()\n    events.forEach(({ Id, Start, Duration, Text }) => {\n      dataManager.updateItem(Id, {\n        start: +new Date(Start),\n        hours: Duration,\n        name: Text\n      })\n    })\n    \n    dataService.save('PhasesAux', dataManager.data)\n  }\n  \n  return <TreeGridComponent id={GRID_ID} ganttRunKey={'events'} layout={layout} body={body}\n                            onDataChanged={onDataChanged}/>\n}\n\nexport default TreeGridGant\n","import createLeftCols from './create-left-cols'\nimport createCols from './create-cols'\nimport mergeLayouts from '../../components/TreeGridComponent/utils/merge-layouts'\nimport staticLayout from './static-layout'\nimport createSolid from './create-solid'\nimport dataService from '../../db/dataService'\n\nexport default () => {\n  const dynamicLayout = {\n    LeftCols: createLeftCols(),\n    Cols: createCols(dataService.getStartTime()),\n    Solid: createSolid(dataService.getStartTime())\n  }\n  \n  return mergeLayouts(staticLayout, dynamicLayout)\n}\n","export default (OperationStartDate) => {\r\n  const topBar = {\r\n    id: 'topBar',\r\n    Space: -1,\r\n    Cells: 'OperationStartDate',\r\n    \r\n    // OperationStartDate cell settings\r\n    OperationStartDate,\r\n    OperationStartDateLabel: 'Start operation: ',\r\n    OperationStartDateWidth: 120,\r\n    OperationStartDateFormat: 'yyyy-M-d H:mm',\r\n    OperationStartDateType: 'Date',\r\n    OperationStartDateRecalc: 256,\r\n    OperationStartDateOnChange: 'Grid.Component.props.handleOperationStartDateChange(Grid,Value)'\r\n  }\r\n  \r\n  return [topBar]\r\n}\r\n","export default () => {\n  return [\n    {\n      Name: 'name'\n    },\n    {\n      Name: 'events',\n      Width: 100,\n      Visible: 0\n    },\n    {\n      Name: 'projectEnd',\n      Type: 'Date'\n    }\n  ]\n}\n","export default (start) => {\n  return [\n    {\n      Name: 'GANTT',\n      Type: 'Gantt',\n      GanttZoom: 'days',\n      GanttRunSave: 2,\n      GanttDataUnits: 'h',\n      GanttRun: \"events\",\n      GanttRunAdjust: 'Shrink',\n      GanttRunTip: \"*Text*\"\n    }\n  ]\n}\n","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport NavBar from './components/NavBar'\r\n\r\nimport TimeTracker from './views/TimeTracker'\r\nimport Companies from './views/Companies'\r\nimport HighchartsGant from './views/HighchartGant'\r\nimport TreeGridGantt from './views/TreeGridGantt'\r\nimport { HashRouter, Route, Switch } from 'react-router-dom'\r\n\r\n\r\nclass Sample extends Component {\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <NavBar/>\r\n                <div className=\"views-container\">\r\n                    <Switch>\r\n                        <Route path=\"/\" exact>\r\n                            <TimeTracker/>\r\n                        </Route>\r\n    \r\n                        <Route path=\"/companies\">\r\n                            <Companies/>\r\n                        </Route>\r\n    \r\n                        <Route path=\"/highcharts-gant\">\r\n                            <HighchartsGant/>\r\n                        </Route>\r\n    \r\n                        <Route path=\"/tree-grid-gant\">\r\n                            <TreeGridGantt/>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </HashRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sample\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nconst root = document.getElementById('root')\r\nif (root) {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App/>\r\n    </React.StrictMode>,\r\n    root\r\n  );\r\n}\r\n","export default {\n  Cfg: {\n    FocusRect: 1,\n    SelectingCells: 2,\n    SelectingFocus: 1,\n  \n    CopyCols: 0,\n    PasteFocused: 4,\n    \n    ShowDeleted: 0,\n    NoVScroll: 0\n  },\n  Actions: {\n    OnCtrlDragRow: 'DragSelected',\n    OnDragRow: 'FocusCells',\n    OnDel: '!StartEditEmpty' // prevent delete rows on del button pressing\n  },\n  Toolbar: {\n    Cells60Cfg: 'Columns,Help',\n    Cells70Styles: 'Sizes'\n  },\n  Panel: {\n    PanelCopyMenu:\n        'CopyRowBelow,CopyRowsBelow@F,CopyTree,CopyRowsTreeBelow@F,CopySelected@S,CopySelectedTree@S,CopySelectedChildEnd,CopySelectedTreeChildEnd,-,AddRowBelow,AddRowsBelow@2,CopyEmptyBelow,CopyRowsEmptyBelow@2,CopySelectedEmpty,-,AddChildEnd,CopySelectedEmptyChildEnd'\n  },\n  Lang: {\n    Format: {\n      GroupSeparator: ' ',\n      GMT: 0\n    }\n  }\n}\n"],"sourceRoot":""}